DRN(
  (upsample): Upsample(scale_factor=8.0, mode=bicubic)
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Conv2d(3, 10, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (down): ModuleList(
    (0): DownBlock(
      (dual_module): Sequential(
        (0): Sequential(
          (0): Conv2d(10, 10, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
        (1): Conv2d(10, 20, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
    (1): DownBlock(
      (dual_module): Sequential(
        (0): Sequential(
          (0): Conv2d(20, 20, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
        (1): Conv2d(20, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
    (2): DownBlock(
      (dual_module): Sequential(
        (0): Sequential(
          (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
        )
        (1): Conv2d(40, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
  )
  (up_blocks): ModuleList(
    (0): Sequential(
      (0): RCAB(
        (body): Sequential(
          (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (1): RCAB(
        (body): Sequential(
          (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (2): RCAB(
        (body): Sequential(
          (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (3): RCAB(
        (body): Sequential(
          (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (4): RCAB(
        (body): Sequential(
          (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (5): RCAB(
        (body): Sequential(
          (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (6): RCAB(
        (body): Sequential(
          (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (7): RCAB(
        (body): Sequential(
          (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (8): RCAB(
        (body): Sequential(
          (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (9): RCAB(
        (body): Sequential(
          (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (10): RCAB(
        (body): Sequential(
          (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (11): RCAB(
        (body): Sequential(
          (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (12): RCAB(
        (body): Sequential(
          (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (13): RCAB(
        (body): Sequential(
          (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (14): RCAB(
        (body): Sequential(
          (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (15): RCAB(
        (body): Sequential(
          (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (16): RCAB(
        (body): Sequential(
          (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (17): RCAB(
        (body): Sequential(
          (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (18): RCAB(
        (body): Sequential(
          (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (19): RCAB(
        (body): Sequential(
          (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (20): RCAB(
        (body): Sequential(
          (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (21): RCAB(
        (body): Sequential(
          (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (22): RCAB(
        (body): Sequential(
          (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (23): RCAB(
        (body): Sequential(
          (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (24): RCAB(
        (body): Sequential(
          (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (25): RCAB(
        (body): Sequential(
          (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (26): RCAB(
        (body): Sequential(
          (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (27): RCAB(
        (body): Sequential(
          (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (28): RCAB(
        (body): Sequential(
          (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (29): RCAB(
        (body): Sequential(
          (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (30): RCAB(
        (body): Sequential(
          (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (31): RCAB(
        (body): Sequential(
          (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (32): RCAB(
        (body): Sequential(
          (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (33): RCAB(
        (body): Sequential(
          (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (34): RCAB(
        (body): Sequential(
          (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (35): RCAB(
        (body): Sequential(
          (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (36): Upsampler(
        (0): Conv2d(80, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): PixelShuffle(upscale_factor=2)
      )
      (37): Conv2d(80, 40, kernel_size=(1, 1), stride=(1, 1))
    )
    (1): Sequential(
      (0): RCAB(
        (body): Sequential(
          (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (1): RCAB(
        (body): Sequential(
          (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (2): RCAB(
        (body): Sequential(
          (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (3): RCAB(
        (body): Sequential(
          (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (4): RCAB(
        (body): Sequential(
          (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (5): RCAB(
        (body): Sequential(
          (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (6): RCAB(
        (body): Sequential(
          (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (7): RCAB(
        (body): Sequential(
          (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (8): RCAB(
        (body): Sequential(
          (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (9): RCAB(
        (body): Sequential(
          (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (10): RCAB(
        (body): Sequential(
          (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (11): RCAB(
        (body): Sequential(
          (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (12): RCAB(
        (body): Sequential(
          (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (13): RCAB(
        (body): Sequential(
          (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (14): RCAB(
        (body): Sequential(
          (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (15): RCAB(
        (body): Sequential(
          (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (16): RCAB(
        (body): Sequential(
          (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (17): RCAB(
        (body): Sequential(
          (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (18): RCAB(
        (body): Sequential(
          (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (19): RCAB(
        (body): Sequential(
          (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (20): RCAB(
        (body): Sequential(
          (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (21): RCAB(
        (body): Sequential(
          (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (22): RCAB(
        (body): Sequential(
          (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (23): RCAB(
        (body): Sequential(
          (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (24): RCAB(
        (body): Sequential(
          (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (25): RCAB(
        (body): Sequential(
          (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (26): RCAB(
        (body): Sequential(
          (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (27): RCAB(
        (body): Sequential(
          (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (28): RCAB(
        (body): Sequential(
          (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (29): RCAB(
        (body): Sequential(
          (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (30): RCAB(
        (body): Sequential(
          (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (31): RCAB(
        (body): Sequential(
          (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (32): RCAB(
        (body): Sequential(
          (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (33): RCAB(
        (body): Sequential(
          (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (34): RCAB(
        (body): Sequential(
          (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (35): RCAB(
        (body): Sequential(
          (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (36): Upsampler(
        (0): Conv2d(80, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): PixelShuffle(upscale_factor=2)
      )
      (37): Conv2d(80, 20, kernel_size=(1, 1), stride=(1, 1))
    )
    (2): Sequential(
      (0): RCAB(
        (body): Sequential(
          (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(40, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 40, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (1): RCAB(
        (body): Sequential(
          (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(40, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 40, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (2): RCAB(
        (body): Sequential(
          (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(40, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 40, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (3): RCAB(
        (body): Sequential(
          (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(40, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 40, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (4): RCAB(
        (body): Sequential(
          (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(40, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 40, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (5): RCAB(
        (body): Sequential(
          (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(40, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 40, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (6): RCAB(
        (body): Sequential(
          (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(40, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 40, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (7): RCAB(
        (body): Sequential(
          (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(40, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 40, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (8): RCAB(
        (body): Sequential(
          (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(40, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 40, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (9): RCAB(
        (body): Sequential(
          (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(40, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 40, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (10): RCAB(
        (body): Sequential(
          (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(40, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 40, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (11): RCAB(
        (body): Sequential(
          (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(40, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 40, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (12): RCAB(
        (body): Sequential(
          (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(40, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 40, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (13): RCAB(
        (body): Sequential(
          (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(40, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 40, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (14): RCAB(
        (body): Sequential(
          (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(40, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 40, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (15): RCAB(
        (body): Sequential(
          (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(40, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 40, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (16): RCAB(
        (body): Sequential(
          (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(40, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 40, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (17): RCAB(
        (body): Sequential(
          (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(40, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 40, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (18): RCAB(
        (body): Sequential(
          (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(40, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 40, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (19): RCAB(
        (body): Sequential(
          (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(40, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 40, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (20): RCAB(
        (body): Sequential(
          (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(40, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 40, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (21): RCAB(
        (body): Sequential(
          (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(40, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 40, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (22): RCAB(
        (body): Sequential(
          (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(40, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 40, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (23): RCAB(
        (body): Sequential(
          (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(40, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 40, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (24): RCAB(
        (body): Sequential(
          (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(40, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 40, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (25): RCAB(
        (body): Sequential(
          (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(40, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 40, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (26): RCAB(
        (body): Sequential(
          (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(40, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 40, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (27): RCAB(
        (body): Sequential(
          (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(40, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 40, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (28): RCAB(
        (body): Sequential(
          (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(40, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 40, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (29): RCAB(
        (body): Sequential(
          (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(40, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 40, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (30): RCAB(
        (body): Sequential(
          (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(40, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 40, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (31): RCAB(
        (body): Sequential(
          (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(40, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 40, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (32): RCAB(
        (body): Sequential(
          (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(40, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 40, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (33): RCAB(
        (body): Sequential(
          (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(40, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 40, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (34): RCAB(
        (body): Sequential(
          (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(40, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 40, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (35): RCAB(
        (body): Sequential(
          (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace=True)
          (2): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(40, 2, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace=True)
              (2): Conv2d(2, 40, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (36): Upsampler(
        (0): Conv2d(40, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): PixelShuffle(upscale_factor=2)
      )
      (37): Conv2d(40, 10, kernel_size=(1, 1), stride=(1, 1))
    )
  )
  (tail): ModuleList(
    (0): Conv2d(80, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): Conv2d(80, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (2): Conv2d(40, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (3): Conv2d(20, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
)
[DownBlock(
  (dual_module): Sequential(
    (0): Sequential(
      (0): Conv2d(3, 10, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (1): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (1): Conv2d(10, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  )
), DownBlock(
  (dual_module): Sequential(
    (0): Sequential(
      (0): Conv2d(3, 10, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (1): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (1): Conv2d(10, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  )
), DownBlock(
  (dual_module): Sequential(
    (0): Sequential(
      (0): Conv2d(3, 10, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (1): LeakyReLU(negative_slope=0.2, inplace=True)
    )
    (1): Conv2d(10, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  )
)]
The number of parameters is 10.00M
DataParallel(
  (module): DRN(
    (upsample): Upsample(scale_factor=8.0, mode=bicubic)
    (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
    (head): Conv2d(3, 10, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (down): ModuleList(
      (0): DownBlock(
        (dual_module): Sequential(
          (0): Sequential(
            (0): Conv2d(10, 10, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (1): LeakyReLU(negative_slope=0.2, inplace=True)
          )
          (1): Conv2d(10, 20, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
      )
      (1): DownBlock(
        (dual_module): Sequential(
          (0): Sequential(
            (0): Conv2d(20, 20, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (1): LeakyReLU(negative_slope=0.2, inplace=True)
          )
          (1): Conv2d(20, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
      )
      (2): DownBlock(
        (dual_module): Sequential(
          (0): Sequential(
            (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (1): LeakyReLU(negative_slope=0.2, inplace=True)
          )
          (1): Conv2d(40, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
      )
    )
    (up_blocks): ModuleList(
      (0): Sequential(
        (0): RCAB(
          (body): Sequential(
            (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (1): RCAB(
          (body): Sequential(
            (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (2): RCAB(
          (body): Sequential(
            (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (3): RCAB(
          (body): Sequential(
            (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (4): RCAB(
          (body): Sequential(
            (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (5): RCAB(
          (body): Sequential(
            (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (6): RCAB(
          (body): Sequential(
            (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (7): RCAB(
          (body): Sequential(
            (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (8): RCAB(
          (body): Sequential(
            (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (9): RCAB(
          (body): Sequential(
            (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (10): RCAB(
          (body): Sequential(
            (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (11): RCAB(
          (body): Sequential(
            (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (12): RCAB(
          (body): Sequential(
            (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (13): RCAB(
          (body): Sequential(
            (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (14): RCAB(
          (body): Sequential(
            (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (15): RCAB(
          (body): Sequential(
            (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (16): RCAB(
          (body): Sequential(
            (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (17): RCAB(
          (body): Sequential(
            (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (18): RCAB(
          (body): Sequential(
            (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (19): RCAB(
          (body): Sequential(
            (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (20): RCAB(
          (body): Sequential(
            (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (21): RCAB(
          (body): Sequential(
            (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (22): RCAB(
          (body): Sequential(
            (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (23): RCAB(
          (body): Sequential(
            (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (24): RCAB(
          (body): Sequential(
            (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (25): RCAB(
          (body): Sequential(
            (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (26): RCAB(
          (body): Sequential(
            (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (27): RCAB(
          (body): Sequential(
            (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (28): RCAB(
          (body): Sequential(
            (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (29): RCAB(
          (body): Sequential(
            (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (30): RCAB(
          (body): Sequential(
            (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (31): RCAB(
          (body): Sequential(
            (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (32): RCAB(
          (body): Sequential(
            (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (33): RCAB(
          (body): Sequential(
            (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (34): RCAB(
          (body): Sequential(
            (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (35): RCAB(
          (body): Sequential(
            (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (36): Upsampler(
          (0): Conv2d(80, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): PixelShuffle(upscale_factor=2)
        )
        (37): Conv2d(80, 40, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): Sequential(
        (0): RCAB(
          (body): Sequential(
            (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (1): RCAB(
          (body): Sequential(
            (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (2): RCAB(
          (body): Sequential(
            (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (3): RCAB(
          (body): Sequential(
            (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (4): RCAB(
          (body): Sequential(
            (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (5): RCAB(
          (body): Sequential(
            (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (6): RCAB(
          (body): Sequential(
            (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (7): RCAB(
          (body): Sequential(
            (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (8): RCAB(
          (body): Sequential(
            (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (9): RCAB(
          (body): Sequential(
            (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (10): RCAB(
          (body): Sequential(
            (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (11): RCAB(
          (body): Sequential(
            (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (12): RCAB(
          (body): Sequential(
            (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (13): RCAB(
          (body): Sequential(
            (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (14): RCAB(
          (body): Sequential(
            (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (15): RCAB(
          (body): Sequential(
            (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (16): RCAB(
          (body): Sequential(
            (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (17): RCAB(
          (body): Sequential(
            (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (18): RCAB(
          (body): Sequential(
            (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (19): RCAB(
          (body): Sequential(
            (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (20): RCAB(
          (body): Sequential(
            (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (21): RCAB(
          (body): Sequential(
            (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (22): RCAB(
          (body): Sequential(
            (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (23): RCAB(
          (body): Sequential(
            (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (24): RCAB(
          (body): Sequential(
            (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (25): RCAB(
          (body): Sequential(
            (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (26): RCAB(
          (body): Sequential(
            (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (27): RCAB(
          (body): Sequential(
            (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (28): RCAB(
          (body): Sequential(
            (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (29): RCAB(
          (body): Sequential(
            (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (30): RCAB(
          (body): Sequential(
            (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (31): RCAB(
          (body): Sequential(
            (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (32): RCAB(
          (body): Sequential(
            (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (33): RCAB(
          (body): Sequential(
            (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (34): RCAB(
          (body): Sequential(
            (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (35): RCAB(
          (body): Sequential(
            (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(80, 5, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(5, 80, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (36): Upsampler(
          (0): Conv2d(80, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): PixelShuffle(upscale_factor=2)
        )
        (37): Conv2d(80, 20, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): Sequential(
        (0): RCAB(
          (body): Sequential(
            (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(40, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 40, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (1): RCAB(
          (body): Sequential(
            (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(40, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 40, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (2): RCAB(
          (body): Sequential(
            (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(40, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 40, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (3): RCAB(
          (body): Sequential(
            (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(40, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 40, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (4): RCAB(
          (body): Sequential(
            (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(40, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 40, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (5): RCAB(
          (body): Sequential(
            (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(40, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 40, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (6): RCAB(
          (body): Sequential(
            (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(40, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 40, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (7): RCAB(
          (body): Sequential(
            (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(40, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 40, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (8): RCAB(
          (body): Sequential(
            (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(40, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 40, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (9): RCAB(
          (body): Sequential(
            (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(40, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 40, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (10): RCAB(
          (body): Sequential(
            (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(40, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 40, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (11): RCAB(
          (body): Sequential(
            (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(40, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 40, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (12): RCAB(
          (body): Sequential(
            (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(40, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 40, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (13): RCAB(
          (body): Sequential(
            (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(40, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 40, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (14): RCAB(
          (body): Sequential(
            (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(40, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 40, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (15): RCAB(
          (body): Sequential(
            (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(40, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 40, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (16): RCAB(
          (body): Sequential(
            (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(40, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 40, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (17): RCAB(
          (body): Sequential(
            (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(40, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 40, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (18): RCAB(
          (body): Sequential(
            (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(40, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 40, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (19): RCAB(
          (body): Sequential(
            (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(40, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 40, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (20): RCAB(
          (body): Sequential(
            (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(40, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 40, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (21): RCAB(
          (body): Sequential(
            (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(40, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 40, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (22): RCAB(
          (body): Sequential(
            (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(40, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 40, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (23): RCAB(
          (body): Sequential(
            (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(40, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 40, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (24): RCAB(
          (body): Sequential(
            (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(40, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 40, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (25): RCAB(
          (body): Sequential(
            (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(40, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 40, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (26): RCAB(
          (body): Sequential(
            (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(40, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 40, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (27): RCAB(
          (body): Sequential(
            (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(40, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 40, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (28): RCAB(
          (body): Sequential(
            (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(40, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 40, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (29): RCAB(
          (body): Sequential(
            (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(40, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 40, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (30): RCAB(
          (body): Sequential(
            (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(40, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 40, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (31): RCAB(
          (body): Sequential(
            (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(40, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 40, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (32): RCAB(
          (body): Sequential(
            (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(40, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 40, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (33): RCAB(
          (body): Sequential(
            (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(40, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 40, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (34): RCAB(
          (body): Sequential(
            (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(40, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 40, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (35): RCAB(
          (body): Sequential(
            (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(40, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 40, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (36): Upsampler(
          (0): Conv2d(40, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): PixelShuffle(upscale_factor=2)
        )
        (37): Conv2d(40, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (tail): ModuleList(
      (0): Conv2d(80, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(80, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (2): Conv2d(40, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): Conv2d(20, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  )
)
[DataParallel(
  (module): DownBlock(
    (dual_module): Sequential(
      (0): Sequential(
        (0): Conv2d(3, 10, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (1): Conv2d(10, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
  )
), DataParallel(
  (module): DownBlock(
    (dual_module): Sequential(
      (0): Sequential(
        (0): Conv2d(3, 10, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (1): Conv2d(10, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
  )
), DataParallel(
  (module): DownBlock(
    (dual_module): Sequential(
      (0): Sequential(
        (0): Conv2d(3, 10, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (1): Conv2d(10, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
  )
)]
The number of parameters is 10.00M
[Epoch 1]	Learning rate: 1.00e-4
DataParallel(
  (module): DRN(
    (upsample): Upsample(scale_factor=8.0, mode=bicubic)
    (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
    (head): Conv2d(3, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (down): ModuleList(
      (0): DownBlock(
        (dual_module): Sequential(
          (0): Sequential(
            (0): Conv2d(8, 8, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (1): LeakyReLU(negative_slope=0.2, inplace=True)
          )
          (1): Conv2d(8, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
      )
      (1): DownBlock(
        (dual_module): Sequential(
          (0): Sequential(
            (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (1): LeakyReLU(negative_slope=0.2, inplace=True)
          )
          (1): Conv2d(16, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
      )
      (2): DownBlock(
        (dual_module): Sequential(
          (0): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (1): LeakyReLU(negative_slope=0.2, inplace=True)
          )
          (1): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
      )
    )
    (up_blocks): ModuleList(
      (0): Sequential(
        (0): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (1): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (2): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (3): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (4): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (5): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (6): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (7): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (8): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (9): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (10): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (11): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (12): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (13): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (14): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (15): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (16): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (17): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (18): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (19): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (20): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (21): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (22): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (23): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (24): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (25): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (26): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (27): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (28): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (29): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (30): Upsampler(
          (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): PixelShuffle(upscale_factor=2)
        )
        (31): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): Sequential(
        (0): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (1): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (2): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (3): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (4): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (5): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (6): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (7): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (8): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (9): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (10): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (11): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (12): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (13): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (14): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (15): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (16): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (17): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (18): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (19): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (20): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (21): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (22): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (23): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (24): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (25): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (26): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (27): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (28): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (29): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (30): Upsampler(
          (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): PixelShuffle(upscale_factor=2)
        )
        (31): Conv2d(64, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): Sequential(
        (0): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (1): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (2): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (3): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (4): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (5): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (6): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (7): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (8): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (9): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (10): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (11): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (12): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (13): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (14): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (15): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (16): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (17): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (18): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (19): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (20): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (21): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (22): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (23): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (24): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (25): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (26): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (27): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (28): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (29): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (30): Upsampler(
          (0): Conv2d(32, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): PixelShuffle(upscale_factor=2)
        )
        (31): Conv2d(32, 8, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (tail): ModuleList(
      (0): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (2): Conv2d(32, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  )
)
[DataParallel(
  (module): DownBlock(
    (dual_module): Sequential(
      (0): Sequential(
        (0): Conv2d(3, 8, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (1): Conv2d(8, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
  )
), DataParallel(
  (module): DownBlock(
    (dual_module): Sequential(
      (0): Sequential(
        (0): Conv2d(3, 8, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (1): Conv2d(8, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
  )
), DataParallel(
  (module): DownBlock(
    (dual_module): Sequential(
      (0): Sequential(
        (0): Conv2d(3, 8, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (1): Conv2d(8, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
  )
)]
The number of parameters is 5.40M
[Epoch 1]	Learning rate: 1.00e-4
[1600/32000]	[L1: 492.5940]	126.9+4.7s
[3200/32000]	[L1: 428.7776]	83.2+0.6s
[4800/32000]	[L1: 376.1247]	83.2+0.6s
[6400/32000]	[L1: 334.6304]	82.4+0.6s
[8000/32000]	[L1: 301.2569]	81.9+0.6s
[9600/32000]	[L1: 274.2776]	83.4+0.6s
[11200/32000]	[L1: 252.9297]	81.8+0.6s
[12800/32000]	[L1: 235.9600]	79.3+0.6s
[14400/32000]	[L1: 222.2227]	81.7+0.6s
[16000/32000]	[L1: 211.0876]	82.9+0.6s
[17600/32000]	[L1: 201.7585]	82.3+0.6s
[19200/32000]	[L1: 193.7109]	77.6+0.6s
[20800/32000]	[L1: 186.8289]	80.7+0.6s
[22400/32000]	[L1: 180.6870]	82.1+0.6s
[24000/32000]	[L1: 175.3738]	81.9+0.6s
[25600/32000]	[L1: 170.5488]	81.9+0.6s
[27200/32000]	[L1: 166.1531]	82.0+0.6s
[28800/32000]	[L1: 162.0199]	82.1+0.6s
[30400/32000]	[L1: 158.1257]	81.6+0.6s
[32000/32000]	[L1: 154.5738]	82.3+0.6s

Evaluation:
[my_val x8]	PSNR: 21.71 (Best: 21.71 @epoch 1)
Total time: 3.81s

[Epoch 2]	Learning rate: 1.00e-4
[1600/32000]	[L1: 83.8112]	82.1+5.3s
[3200/32000]	[L1: 82.6658]	82.1+0.6s
[4800/32000]	[L1: 81.8958]	78.6+0.6s
[6400/32000]	[L1: 81.1165]	80.1+0.6s
[8000/32000]	[L1: 80.3035]	80.6+0.6s
[9600/32000]	[L1: 79.4259]	78.3+0.6s
[11200/32000]	[L1: 78.5247]	82.7+0.6s
[12800/32000]	[L1: 77.7348]	80.3+0.6s
[14400/32000]	[L1: 76.9706]	81.4+0.6s
[16000/32000]	[L1: 76.2626]	82.3+0.6s
[17600/32000]	[L1: 75.6510]	82.1+0.6s
[19200/32000]	[L1: 75.0884]	80.0+0.6s
[20800/32000]	[L1: 74.6382]	82.3+0.6s
[22400/32000]	[L1: 74.1748]	82.3+0.6s
[24000/32000]	[L1: 73.5972]	81.8+0.6s
[25600/32000]	[L1: 73.1227]	82.3+0.6s
[27200/32000]	[L1: 72.6969]	81.5+0.6s
[28800/32000]	[L1: 72.3572]	82.2+0.6s
[30400/32000]	[L1: 71.9293]	80.6+0.6s
[32000/32000]	[L1: 71.4502]	82.0+0.6s

Evaluation:
[my_val x8]	PSNR: 21.61 (Best: 21.71 @epoch 1)
Total time: 3.92s

[Epoch 3]	Learning rate: 1.00e-4
[1600/32000]	[L1: 62.6373]	83.3+6.0s
[3200/32000]	[L1: 63.0397]	83.9+0.6s
[4800/32000]	[L1: 62.5795]	85.2+0.7s
[6400/32000]	[L1: 62.3288]	84.2+0.6s
[8000/32000]	[L1: 62.3224]	81.6+0.6s
[9600/32000]	[L1: 62.1022]	83.0+0.6s
[11200/32000]	[L1: 61.8959]	82.8+0.6s
[12800/32000]	[L1: 61.6825]	84.3+0.6s
[14400/32000]	[L1: 61.3818]	83.6+0.6s
[16000/32000]	[L1: 61.3010]	82.7+0.6s
[17600/32000]	[L1: 61.0433]	81.4+0.6s
[19200/32000]	[L1: 60.7623]	82.7+0.6s
[20800/32000]	[L1: 60.4934]	83.5+0.6s
[22400/32000]	[L1: 60.3731]	82.8+0.6s
[24000/32000]	[L1: 60.1612]	83.9+0.6s
[25600/32000]	[L1: 59.9284]	83.4+0.6s
[27200/32000]	[L1: 59.7396]	83.2+0.6s
[28800/32000]	[L1: 59.5051]	83.3+0.6s
[30400/32000]	[L1: 59.3354]	82.5+0.6s
[32000/32000]	[L1: 59.1770]	82.6+0.6s

Evaluation:
[my_val x8]	PSNR: 21.67 (Best: 21.71 @epoch 1)
Total time: 3.82s

[Epoch 4]	Learning rate: 1.00e-4
[1600/32000]	[L1: 55.4915]	82.1+5.7s
[3200/32000]	[L1: 55.3138]	79.0+0.6s
[4800/32000]	[L1: 55.6262]	82.0+0.6s
[6400/32000]	[L1: 55.3866]	82.0+0.6s
[8000/32000]	[L1: 55.0732]	81.9+0.6s
[9600/32000]	[L1: 55.0510]	82.2+0.6s
[11200/32000]	[L1: 54.9557]	80.0+0.6s
[12800/32000]	[L1: 54.8101]	82.0+0.6s
[14400/32000]	[L1: 54.6084]	81.7+0.6s
[16000/32000]	[L1: 54.4384]	81.0+0.6s
[17600/32000]	[L1: 54.4188]	81.7+0.6s
[19200/32000]	[L1: 54.4486]	81.3+0.6s
[20800/32000]	[L1: 54.4669]	81.9+0.6s
[22400/32000]	[L1: 54.3808]	82.7+0.6s
[24000/32000]	[L1: 54.3067]	81.6+0.6s
[25600/32000]	[L1: 54.2141]	82.0+0.6s
[27200/32000]	[L1: 54.1238]	81.9+0.6s
[28800/32000]	[L1: 54.0577]	81.1+0.6s
[30400/32000]	[L1: 53.8879]	81.0+0.6s
[32000/32000]	[L1: 53.8085]	81.9+0.6s

Evaluation:
[my_val x8]	PSNR: 21.71 (Best: 21.71 @epoch 4)
Total time: 3.75s

[Epoch 5]	Learning rate: 1.00e-4
[1600/32000]	[L1: 52.1311]	82.0+5.7s
[3200/32000]	[L1: 52.1433]	81.7+0.6s
[4800/32000]	[L1: 52.1997]	81.0+0.6s
[6400/32000]	[L1: 52.1511]	82.3+0.6s
[8000/32000]	[L1: 51.9240]	79.7+0.6s
[9600/32000]	[L1: 51.9886]	80.7+0.6s
[11200/32000]	[L1: 51.9069]	82.3+0.6s
[12800/32000]	[L1: 52.0904]	81.0+0.6s
[14400/32000]	[L1: 52.1384]	81.2+0.6s
[16000/32000]	[L1: 52.0293]	81.3+0.6s
[17600/32000]	[L1: 52.1139]	81.5+0.6s
[19200/32000]	[L1: 52.0169]	81.9+0.6s
[20800/32000]	[L1: 51.9600]	81.9+0.6s
[22400/32000]	[L1: 52.0566]	81.9+0.6s
[24000/32000]	[L1: 51.9950]	79.7+0.6s
[25600/32000]	[L1: 51.9612]	81.7+0.6s
[27200/32000]	[L1: 52.0077]	82.0+0.6s
[28800/32000]	[L1: 51.9709]	82.7+0.6s
[30400/32000]	[L1: 51.9366]	82.3+0.6s
[32000/32000]	[L1: 51.8908]	82.6+0.6s

Evaluation:
[my_val x8]	PSNR: 21.71 (Best: 21.71 @epoch 4)
Total time: 3.66s

[Epoch 6]	Learning rate: 1.00e-4
[1600/32000]	[L1: 49.9857]	82.4+6.1s
[3200/32000]	[L1: 50.3904]	82.1+0.6s
[4800/32000]	[L1: 50.6932]	82.7+0.6s
[6400/32000]	[L1: 51.0258]	81.7+0.6s
[8000/32000]	[L1: 50.6745]	82.5+0.6s
[9600/32000]	[L1: 50.7511]	81.8+0.6s
[11200/32000]	[L1: 50.6665]	81.9+0.6s
[12800/32000]	[L1: 50.5342]	82.0+0.6s
[14400/32000]	[L1: 50.4187]	81.9+0.6s
[16000/32000]	[L1: 50.4565]	81.5+0.6s
[17600/32000]	[L1: 50.3452]	79.9+0.6s
[19200/32000]	[L1: 50.3880]	81.8+0.6s
[20800/32000]	[L1: 50.3827]	81.9+0.6s
[22400/32000]	[L1: 50.3508]	81.3+0.6s
[24000/32000]	[L1: 50.3153]	82.4+0.6s
[25600/32000]	[L1: 50.3504]	82.2+0.6s
[27200/32000]	[L1: 50.3539]	81.9+0.6s
[28800/32000]	[L1: 50.2855]	81.4+0.6s
[30400/32000]	[L1: 50.2758]	80.4+0.6s
[32000/32000]	[L1: 50.2620]	81.7+0.6s

Evaluation:
[my_val x8]	PSNR: 21.58 (Best: 21.71 @epoch 4)
Total time: 3.66s

[Epoch 7]	Learning rate: 1.00e-4
[1600/32000]	[L1: 51.2564]	82.3+5.6s
[3200/32000]	[L1: 50.7293]	82.0+0.6s
[4800/32000]	[L1: 50.6362]	81.8+0.6s
[6400/32000]	[L1: 50.4275]	81.6+0.6s
[8000/32000]	[L1: 50.1183]	81.2+0.6s
[9600/32000]	[L1: 50.0952]	82.0+0.6s
[11200/32000]	[L1: 49.8886]	82.2+0.6s
[12800/32000]	[L1: 49.8062]	81.8+0.6s
[14400/32000]	[L1: 49.8052]	79.7+0.6s
[16000/32000]	[L1: 49.7223]	80.7+0.6s
[17600/32000]	[L1: 49.6411]	80.4+0.6s
[19200/32000]	[L1: 49.6069]	81.7+0.6s
[20800/32000]	[L1: 49.5001]	81.4+0.6s
[22400/32000]	[L1: 49.5231]	81.2+0.6s
[24000/32000]	[L1: 49.4021]	81.5+0.6s
[25600/32000]	[L1: 49.3902]	80.7+0.6s
[27200/32000]	[L1: 49.4117]	81.4+0.6s
[28800/32000]	[L1: 49.3490]	81.8+0.6s
[30400/32000]	[L1: 49.3490]	81.8+0.6s
[32000/32000]	[L1: 49.3304]	80.8+0.6s

Evaluation:
[my_val x8]	PSNR: 21.50 (Best: 21.71 @epoch 4)
Total time: 3.83s

[Epoch 8]	Learning rate: 1.00e-4
[1600/32000]	[L1: 48.7565]	82.2+5.9s
[3200/32000]	[L1: 48.7767]	81.1+0.6s
[4800/32000]	[L1: 48.6232]	81.5+0.6s
[6400/32000]	[L1: 48.7087]	81.8+0.6s
[8000/32000]	[L1: 48.7648]	81.6+0.6s
[9600/32000]	[L1: 48.9454]	79.6+0.6s
[11200/32000]	[L1: 48.8162]	81.9+0.6s
[12800/32000]	[L1: 48.5657]	82.7+0.6s
[14400/32000]	[L1: 48.5113]	80.1+0.6s
[16000/32000]	[L1: 48.5100]	76.9+0.6s
[17600/32000]	[L1: 48.5386]	79.6+0.6s
[19200/32000]	[L1: 48.6231]	78.3+0.6s
[20800/32000]	[L1: 48.6850]	81.6+0.6s
[22400/32000]	[L1: 48.6122]	81.4+0.6s
[24000/32000]	[L1: 48.5092]	79.6+0.6s
[25600/32000]	[L1: 48.4814]	81.7+0.6s
[27200/32000]	[L1: 48.4414]	80.7+0.6s
[28800/32000]	[L1: 48.4872]	79.0+0.6s
[30400/32000]	[L1: 48.4300]	81.5+0.6s
[32000/32000]	[L1: 48.3990]	82.2+0.6s

Evaluation:
[my_val x8]	PSNR: 21.71 (Best: 21.71 @epoch 4)
Total time: 3.78s

[Epoch 9]	Learning rate: 1.00e-4
[1600/32000]	[L1: 49.1750]	82.9+6.1s
[3200/32000]	[L1: 48.8229]	81.8+0.6s
[4800/32000]	[L1: 48.3684]	81.7+0.6s
[6400/32000]	[L1: 48.3283]	80.8+0.6s
[8000/32000]	[L1: 48.2781]	80.9+0.6s
[9600/32000]	[L1: 48.0245]	79.7+0.6s
[11200/32000]	[L1: 47.8853]	81.0+0.6s
[12800/32000]	[L1: 47.9602]	81.4+0.6s
[14400/32000]	[L1: 47.9148]	81.0+0.6s
[16000/32000]	[L1: 47.9420]	82.6+0.6s
[17600/32000]	[L1: 47.9758]	82.3+0.6s
[19200/32000]	[L1: 47.8494]	82.1+0.6s
[20800/32000]	[L1: 47.7954]	82.4+0.6s
[22400/32000]	[L1: 47.8038]	80.1+0.6s
[24000/32000]	[L1: 47.7833]	81.7+0.6s
[25600/32000]	[L1: 47.8257]	79.7+0.6s
[27200/32000]	[L1: 47.8322]	81.0+0.6s
[28800/32000]	[L1: 47.8418]	80.3+0.6s
[30400/32000]	[L1: 47.8325]	81.9+0.6s
[32000/32000]	[L1: 47.8557]	82.2+0.6s

Evaluation:
[my_val x8]	PSNR: 21.69 (Best: 21.71 @epoch 4)
Total time: 3.80s

[Epoch 10]	Learning rate: 1.00e-4
[1600/32000]	[L1: 46.3936]	82.8+6.1s
[3200/32000]	[L1: 47.3267]	83.8+0.6s
[4800/32000]	[L1: 47.5270]	82.4+0.6s
[6400/32000]	[L1: 47.5194]	81.9+0.6s
[8000/32000]	[L1: 47.4664]	80.8+0.6s
[9600/32000]	[L1: 47.4760]	81.7+0.6s
[11200/32000]	[L1: 47.5066]	81.3+0.6s
[12800/32000]	[L1: 47.4177]	82.4+0.6s
[14400/32000]	[L1: 47.3684]	82.1+0.6s
[16000/32000]	[L1: 47.3154]	81.7+0.6s
[17600/32000]	[L1: 47.3533]	80.9+0.6s
[19200/32000]	[L1: 47.3320]	81.3+0.6s
[20800/32000]	[L1: 47.3073]	80.3+0.6s
[22400/32000]	[L1: 47.2703]	80.9+0.6s
[24000/32000]	[L1: 47.2507]	82.1+0.6s
[25600/32000]	[L1: 47.2830]	82.4+0.6s
[27200/32000]	[L1: 47.2768]	81.5+0.6s
[28800/32000]	[L1: 47.2754]	82.3+0.6s
[30400/32000]	[L1: 47.3157]	81.8+0.6s
[32000/32000]	[L1: 47.3009]	80.4+0.6s

Evaluation:
[my_val x8]	PSNR: 21.70 (Best: 21.71 @epoch 4)
Total time: 3.67s

[Epoch 11]	Learning rate: 1.00e-4
[1600/32000]	[L1: 46.6764]	81.7+5.9s
[3200/32000]	[L1: 46.8547]	81.5+0.6s
[4800/32000]	[L1: 46.5222]	82.2+0.6s
[6400/32000]	[L1: 46.6031]	80.2+0.6s
[8000/32000]	[L1: 46.7774]	81.8+0.6s
[9600/32000]	[L1: 46.8432]	81.7+0.6s
[11200/32000]	[L1: 47.0112]	80.7+0.6s
[12800/32000]	[L1: 47.0912]	82.0+0.6s
[14400/32000]	[L1: 47.0755]	80.5+0.6s
[16000/32000]	[L1: 47.0839]	82.6+0.6s
[17600/32000]	[L1: 47.0924]	80.1+0.6s
[19200/32000]	[L1: 47.1464]	80.7+0.6s
[20800/32000]	[L1: 47.1334]	79.5+0.6s
[22400/32000]	[L1: 47.1162]	81.7+0.6s
[24000/32000]	[L1: 47.0050]	81.6+0.6s
[25600/32000]	[L1: 46.9874]	82.2+0.6s
[27200/32000]	[L1: 47.0282]	82.1+0.6s
[28800/32000]	[L1: 46.9746]	82.1+0.6s
[30400/32000]	[L1: 46.9807]	81.9+0.6s
[32000/32000]	[L1: 46.9653]	80.8+0.6s

Evaluation:
[my_val x8]	PSNR: 21.72 (Best: 21.72 @epoch 11)
Total time: 3.81s

[Epoch 12]	Learning rate: 1.00e-4
[1600/32000]	[L1: 46.6886]	80.8+5.9s
[3200/32000]	[L1: 46.6637]	82.5+0.6s
[4800/32000]	[L1: 46.7432]	82.0+0.6s
[6400/32000]	[L1: 46.6684]	82.0+0.6s
[8000/32000]	[L1: 46.9487]	82.3+0.6s
[9600/32000]	[L1: 46.8920]	81.5+0.6s
[11200/32000]	[L1: 46.6325]	81.6+0.6s
[12800/32000]	[L1: 46.6478]	80.0+0.6s
[14400/32000]	[L1: 46.6118]	81.3+0.6s
[16000/32000]	[L1: 46.5708]	82.6+0.6s
[17600/32000]	[L1: 46.5301]	81.3+0.6s
[19200/32000]	[L1: 46.5039]	82.2+0.6s
[20800/32000]	[L1: 46.5413]	82.0+0.6s
[22400/32000]	[L1: 46.4656]	81.6+0.6s
[24000/32000]	[L1: 46.4219]	81.4+0.6s
[25600/32000]	[L1: 46.3906]	81.8+0.6s
[27200/32000]	[L1: 46.3253]	80.6+0.6s
[28800/32000]	[L1: 46.3456]	82.5+0.6s
[30400/32000]	[L1: 46.3245]	81.6+0.6s
[32000/32000]	[L1: 46.2892]	81.9+0.6s

Evaluation:
[my_val x8]	PSNR: 21.81 (Best: 21.81 @epoch 12)
Total time: 3.72s

[Epoch 13]	Learning rate: 1.00e-4
[1600/32000]	[L1: 46.4862]	80.9+6.1s
[3200/32000]	[L1: 46.4644]	82.2+0.6s
[4800/32000]	[L1: 46.3022]	82.1+0.6s
[6400/32000]	[L1: 46.4321]	80.8+0.6s
[8000/32000]	[L1: 46.4921]	82.3+0.6s
[9600/32000]	[L1: 46.5072]	81.9+0.6s
[11200/32000]	[L1: 46.4962]	81.2+0.6s
[12800/32000]	[L1: 46.4129]	80.1+0.6s
[14400/32000]	[L1: 46.3261]	78.3+0.6s
[16000/32000]	[L1: 46.2373]	79.4+0.6s
[17600/32000]	[L1: 46.2128]	82.5+0.6s
[19200/32000]	[L1: 46.1614]	81.9+0.6s
[20800/32000]	[L1: 46.1618]	82.0+0.6s
[22400/32000]	[L1: 46.2629]	82.4+0.6s
[24000/32000]	[L1: 46.2300]	82.2+0.6s
[25600/32000]	[L1: 46.2189]	80.7+0.6s
[27200/32000]	[L1: 46.1491]	82.4+0.6s
[28800/32000]	[L1: 46.1534]	81.9+0.6s
[30400/32000]	[L1: 46.0457]	82.1+0.6s
[32000/32000]	[L1: 46.0044]	81.3+0.6s

Evaluation:
[my_val x8]	PSNR: 21.78 (Best: 21.81 @epoch 12)
Total time: 3.93s

[Epoch 14]	Learning rate: 1.00e-4
[1600/32000]	[L1: 45.4107]	82.5+5.7s
[3200/32000]	[L1: 45.7906]	80.8+0.6s
[4800/32000]	[L1: 45.7587]	81.9+0.6s
[6400/32000]	[L1: 46.0972]	77.3+0.6s
[8000/32000]	[L1: 46.1361]	80.4+0.6s
[9600/32000]	[L1: 45.9997]	79.7+0.6s
[11200/32000]	[L1: 45.9986]	80.0+0.6s
[12800/32000]	[L1: 46.0169]	82.2+0.6s
[14400/32000]	[L1: 45.8540]	81.9+0.6s
[16000/32000]	[L1: 45.8433]	82.0+0.6s
[17600/32000]	[L1: 45.8562]	82.1+0.6s
[19200/32000]	[L1: 45.8429]	81.4+0.6s
[20800/32000]	[L1: 45.8343]	79.7+0.6s
[22400/32000]	[L1: 45.8304]	82.1+0.6s
[24000/32000]	[L1: 45.8329]	81.0+0.6s
[25600/32000]	[L1: 45.7464]	81.7+0.6s
[27200/32000]	[L1: 45.6376]	80.5+0.6s
[28800/32000]	[L1: 45.6896]	82.5+0.6s
[30400/32000]	[L1: 45.6938]	81.8+0.6s
[32000/32000]	[L1: 45.6518]	81.1+0.6s

Evaluation:
[my_val x8]	PSNR: 21.64 (Best: 21.81 @epoch 12)
Total time: 3.61s

[Epoch 15]	Learning rate: 9.99e-5
[1600/32000]	[L1: 45.6347]	82.7+5.8s
[3200/32000]	[L1: 46.0790]	81.6+0.6s
[4800/32000]	[L1: 45.7371]	82.0+0.6s
[6400/32000]	[L1: 45.7095]	80.2+0.6s
[8000/32000]	[L1: 45.6564]	81.8+0.6s
[9600/32000]	[L1: 45.6189]	82.5+0.6s
[11200/32000]	[L1: 45.7028]	82.2+0.6s
[12800/32000]	[L1: 45.6718]	80.4+0.6s
[14400/32000]	[L1: 45.5110]	83.0+0.6s
[16000/32000]	[L1: 45.5687]	82.5+0.6s
[17600/32000]	[L1: 45.6352]	81.0+0.6s
[19200/32000]	[L1: 45.4755]	81.9+0.6s
[20800/32000]	[L1: 45.4227]	81.6+0.6s
[22400/32000]	[L1: 45.3752]	81.6+0.6s
[24000/32000]	[L1: 45.3126]	82.1+0.6s
[25600/32000]	[L1: 45.3460]	82.0+0.6s
[27200/32000]	[L1: 45.3056]	82.4+0.6s
[28800/32000]	[L1: 45.3153]	82.1+0.6s
[30400/32000]	[L1: 45.2591]	81.6+0.6s
[32000/32000]	[L1: 45.2421]	82.1+0.6s

Evaluation:
[my_val x8]	PSNR: 21.62 (Best: 21.81 @epoch 12)
Total time: 3.66s

[Epoch 16]	Learning rate: 9.99e-5
[1600/32000]	[L1: 44.7451]	81.8+6.1s
[3200/32000]	[L1: 44.6525]	82.1+0.6s
[4800/32000]	[L1: 44.7512]	82.4+0.6s
[6400/32000]	[L1: 44.9494]	81.8+0.6s
[8000/32000]	[L1: 45.1987]	82.3+0.6s
[9600/32000]	[L1: 45.0111]	81.9+0.6s
[11200/32000]	[L1: 45.0139]	81.9+0.6s
[12800/32000]	[L1: 45.1173]	81.1+0.6s
[14400/32000]	[L1: 45.1074]	82.1+0.6s
[16000/32000]	[L1: 45.1800]	79.7+0.6s
[17600/32000]	[L1: 45.1761]	77.4+0.6s
[19200/32000]	[L1: 45.2199]	80.5+0.6s
[20800/32000]	[L1: 45.1363]	79.8+0.6s
[22400/32000]	[L1: 45.2266]	77.7+0.6s
[24000/32000]	[L1: 45.1447]	80.2+0.6s
[25600/32000]	[L1: 45.1534]	82.4+0.6s
[27200/32000]	[L1: 45.1542]	82.5+0.6s
[28800/32000]	[L1: 45.1372]	77.8+0.6s
[30400/32000]	[L1: 45.1474]	81.7+0.6s
[32000/32000]	[L1: 45.1445]	81.7+0.6s

Evaluation:
[my_val x8]	PSNR: 21.87 (Best: 21.87 @epoch 16)
Total time: 3.89s

[Epoch 17]	Learning rate: 9.99e-5
[1600/32000]	[L1: 44.5475]	82.0+5.9s
[3200/32000]	[L1: 44.2838]	82.1+0.6s
[4800/32000]	[L1: 44.4280]	80.8+0.6s
[6400/32000]	[L1: 44.3093]	81.3+0.6s
[8000/32000]	[L1: 44.4245]	81.6+0.6s
[9600/32000]	[L1: 44.4975]	79.3+0.6s
[11200/32000]	[L1: 44.4518]	77.3+0.6s
[12800/32000]	[L1: 44.5533]	77.7+0.6s
[14400/32000]	[L1: 44.6958]	78.4+0.6s
[16000/32000]	[L1: 44.8538]	76.6+0.6s
[17600/32000]	[L1: 44.7930]	80.0+0.6s
[19200/32000]	[L1: 44.7880]	80.1+0.6s
[20800/32000]	[L1: 44.8627]	81.9+0.6s
[22400/32000]	[L1: 44.9288]	82.3+0.6s
[24000/32000]	[L1: 44.9076]	81.8+0.6s
[25600/32000]	[L1: 44.8831]	80.0+0.6s
[27200/32000]	[L1: 44.8624]	82.7+0.6s
[28800/32000]	[L1: 44.9002]	82.0+0.6s
[30400/32000]	[L1: 44.8775]	80.8+0.6s
[32000/32000]	[L1: 44.8744]	80.4+0.6s

Evaluation:
[my_val x8]	PSNR: 21.71 (Best: 21.87 @epoch 16)
Total time: 3.88s

[Epoch 18]	Learning rate: 9.99e-5
[1600/32000]	[L1: 44.7160]	81.1+5.5s
[3200/32000]	[L1: 44.7388]	80.4+0.6s
[4800/32000]	[L1: 45.0274]	82.1+0.6s
[6400/32000]	[L1: 44.6700]	82.1+0.6s
[8000/32000]	[L1: 44.6998]	82.3+0.6s
[9600/32000]	[L1: 44.7542]	80.3+0.6s
[11200/32000]	[L1: 44.7264]	77.3+0.6s
[12800/32000]	[L1: 44.5698]	81.7+0.6s
[14400/32000]	[L1: 44.5842]	83.8+0.6s
[16000/32000]	[L1: 44.5009]	80.0+0.6s
[17600/32000]	[L1: 44.4915]	82.2+0.6s
[19200/32000]	[L1: 44.4981]	82.6+0.6s
[20800/32000]	[L1: 44.5310]	81.8+0.6s
[22400/32000]	[L1: 44.4981]	82.2+0.6s
[24000/32000]	[L1: 44.4983]	80.8+0.6s
[25600/32000]	[L1: 44.4969]	82.9+0.6s
[27200/32000]	[L1: 44.4625]	81.9+0.6s
[28800/32000]	[L1: 44.4640]	82.3+0.6s
[30400/32000]	[L1: 44.4495]	81.0+0.6s
[32000/32000]	[L1: 44.4760]	82.1+0.6s

Evaluation:
[my_val x8]	PSNR: 21.61 (Best: 21.87 @epoch 16)
Total time: 3.67s

[Epoch 19]	Learning rate: 9.99e-5
[1600/32000]	[L1: 45.3670]	80.7+6.5s
[3200/32000]	[L1: 44.9368]	82.5+0.6s
[4800/32000]	[L1: 44.6080]	80.9+0.6s
[6400/32000]	[L1: 44.3369]	80.7+0.6s
[8000/32000]	[L1: 44.3084]	82.0+0.6s
[9600/32000]	[L1: 44.4549]	81.1+0.6s
[11200/32000]	[L1: 44.4416]	82.0+0.6s
[12800/32000]	[L1: 44.6118]	80.7+0.6s
[14400/32000]	[L1: 44.6511]	81.9+0.6s
[16000/32000]	[L1: 44.7254]	81.8+0.6s
[17600/32000]	[L1: 44.5330]	82.4+0.6s
[19200/32000]	[L1: 44.4718]	81.7+0.6s
[20800/32000]	[L1: 44.5008]	82.0+0.6s
[22400/32000]	[L1: 44.4232]	82.3+0.6s
[24000/32000]	[L1: 44.4520]	80.9+0.6s
[25600/32000]	[L1: 44.4116]	82.2+0.6s
[27200/32000]	[L1: 44.4481]	81.8+0.6s
[28800/32000]	[L1: 44.4161]	79.6+0.6s
[30400/32000]	[L1: 44.3999]	81.3+0.6s
[32000/32000]	[L1: 44.3895]	78.1+0.6s

Evaluation:
[my_val x8]	PSNR: 21.78 (Best: 21.87 @epoch 16)
Total time: 3.58s

[Epoch 20]	Learning rate: 9.99e-5
[1600/32000]	[L1: 44.3560]	82.6+5.8s
[3200/32000]	[L1: 43.4765]	81.6+0.6s
[4800/32000]	[L1: 43.5061]	81.6+0.6s
[6400/32000]	[L1: 43.4575]	81.9+0.6s
[8000/32000]	[L1: 43.7625]	81.9+0.6s
[9600/32000]	[L1: 43.7964]	81.0+0.6s
[11200/32000]	[L1: 43.7175]	81.7+0.6s
[12800/32000]	[L1: 43.8382]	82.0+0.6s
[14400/32000]	[L1: 43.8871]	78.3+0.6s
[16000/32000]	[L1: 43.9348]	78.7+0.6s
[17600/32000]	[L1: 43.9605]	79.4+0.6s
[19200/32000]	[L1: 43.9854]	80.2+0.6s
[20800/32000]	[L1: 43.9899]	81.0+0.6s
[22400/32000]	[L1: 43.9674]	77.9+0.6s
[24000/32000]	[L1: 43.9763]	82.1+0.6s
[25600/32000]	[L1: 44.0359]	81.5+0.6s
[27200/32000]	[L1: 44.0648]	78.0+0.6s
[28800/32000]	[L1: 44.0775]	79.6+0.6s
[30400/32000]	[L1: 44.0515]	80.4+0.6s
[32000/32000]	[L1: 44.0519]	81.2+0.6s

Evaluation:
[my_val x8]	PSNR: 21.58 (Best: 21.87 @epoch 16)
Total time: 3.75s

[Epoch 21]	Learning rate: 9.99e-5
[1600/32000]	[L1: 43.6267]	81.8+6.0s
[3200/32000]	[L1: 44.2691]	82.5+0.6s
[4800/32000]	[L1: 44.2269]	82.4+0.6s
[6400/32000]	[L1: 43.8386]	82.5+0.6s
[8000/32000]	[L1: 43.6163]	81.1+0.6s
[9600/32000]	[L1: 43.6852]	81.3+0.6s
[11200/32000]	[L1: 43.8178]	81.2+0.6s
[12800/32000]	[L1: 43.8030]	82.1+0.6s
[14400/32000]	[L1: 43.8062]	81.8+0.6s
[16000/32000]	[L1: 43.8428]	81.3+0.6s
[17600/32000]	[L1: 43.8437]	80.8+0.6s
[19200/32000]	[L1: 43.8394]	79.1+0.6s
[20800/32000]	[L1: 43.8458]	81.6+0.6s
[22400/32000]	[L1: 43.7734]	77.9+0.6s
[24000/32000]	[L1: 43.8482]	78.6+0.6s
[25600/32000]	[L1: 43.8193]	81.5+0.6s
[27200/32000]	[L1: 43.8525]	80.9+0.6s
[28800/32000]	[L1: 43.8483]	82.1+0.6s
[30400/32000]	[L1: 43.8782]	81.1+0.6s
[32000/32000]	[L1: 43.8514]	81.6+0.6s

Evaluation:
[my_val x8]	PSNR: 21.63 (Best: 21.87 @epoch 16)
Total time: 3.85s

[Epoch 22]	Learning rate: 9.99e-5
[1600/32000]	[L1: 42.6777]	82.9+6.0s
[3200/32000]	[L1: 43.3488]	81.9+0.6s
[4800/32000]	[L1: 43.8710]	79.3+0.6s
[6400/32000]	[L1: 43.8295]	78.6+0.6s
[8000/32000]	[L1: 43.7202]	82.0+0.6s
[9600/32000]	[L1: 43.7963]	81.3+0.6s
[11200/32000]	[L1: 43.8902]	79.6+0.6s
[12800/32000]	[L1: 43.8762]	81.7+0.6s
[14400/32000]	[L1: 43.8928]	79.6+0.6s
[16000/32000]	[L1: 43.8332]	82.0+0.6s
[17600/32000]	[L1: 43.7504]	81.7+0.6s
[19200/32000]	[L1: 43.6650]	80.3+0.6s
[20800/32000]	[L1: 43.6648]	80.5+0.6s
[22400/32000]	[L1: 43.7427]	80.2+0.6s
[24000/32000]	[L1: 43.7746]	82.1+0.6s
[25600/32000]	[L1: 43.7291]	81.8+0.6s
[27200/32000]	[L1: 43.7465]	81.7+0.6s
[28800/32000]	[L1: 43.7640]	80.9+0.6s
[30400/32000]	[L1: 43.7717]	80.7+0.6s
[32000/32000]	[L1: 43.7568]	80.9+0.6s

Evaluation:
[my_val x8]	PSNR: 21.74 (Best: 21.87 @epoch 16)
Total time: 3.75s

[Epoch 23]	Learning rate: 9.99e-5
[1600/32000]	[L1: 43.7648]	80.7+6.0s
[3200/32000]	[L1: 43.4187]	76.9+0.6s
[4800/32000]	[L1: 43.0901]	82.2+0.6s
[6400/32000]	[L1: 43.0562]	81.9+0.6s
[8000/32000]	[L1: 43.0918]	80.5+0.6s
[9600/32000]	[L1: 42.9367]	82.0+0.6s
[11200/32000]	[L1: 43.0439]	78.3+0.6s
[12800/32000]	[L1: 43.0808]	80.8+0.6s
[14400/32000]	[L1: 43.1320]	81.8+0.6s
[16000/32000]	[L1: 43.0842]	81.3+0.6s
[17600/32000]	[L1: 43.1797]	82.2+0.6s
[19200/32000]	[L1: 43.1721]	81.6+0.6s
[20800/32000]	[L1: 43.2421]	81.2+0.6s
[22400/32000]	[L1: 43.2720]	81.4+0.6s
[24000/32000]	[L1: 43.3300]	81.9+0.6s
[25600/32000]	[L1: 43.3518]	82.0+0.6s
[27200/32000]	[L1: 43.3553]	81.7+0.6s
[28800/32000]	[L1: 43.4280]	81.2+0.6s
[30400/32000]	[L1: 43.4367]	80.0+0.6s
[32000/32000]	[L1: 43.3981]	80.2+0.6s

Evaluation:
[my_val x8]	PSNR: 21.72 (Best: 21.87 @epoch 16)
Total time: 3.85s

[Epoch 24]	Learning rate: 9.99e-5
[1600/32000]	[L1: 43.6709]	81.7+5.8s
[3200/32000]	[L1: 43.6413]	82.6+0.6s
[4800/32000]	[L1: 43.7855]	81.5+0.6s
[6400/32000]	[L1: 43.9078]	79.8+0.6s
[8000/32000]	[L1: 43.8133]	78.9+0.6s
[9600/32000]	[L1: 43.8178]	79.0+0.6s
[11200/32000]	[L1: 43.7674]	79.8+0.6s
[12800/32000]	[L1: 43.6462]	81.2+0.6s
[14400/32000]	[L1: 43.6083]	81.8+0.6s
[16000/32000]	[L1: 43.4867]	80.8+0.6s
[17600/32000]	[L1: 43.5156]	81.6+0.6s
[19200/32000]	[L1: 43.4883]	80.8+0.6s
[20800/32000]	[L1: 43.5669]	79.7+0.6s
[22400/32000]	[L1: 43.5908]	79.4+0.6s
[24000/32000]	[L1: 43.5219]	80.8+0.6s
[25600/32000]	[L1: 43.4717]	82.0+0.6s
[27200/32000]	[L1: 43.4889]	82.0+0.6s
[28800/32000]	[L1: 43.4909]	82.2+0.6s
[30400/32000]	[L1: 43.4213]	81.1+0.6s
[32000/32000]	[L1: 43.4346]	82.4+0.6s

Evaluation:
[my_val x8]	PSNR: 21.48 (Best: 21.87 @epoch 16)
Total time: 3.76s

[Epoch 25]	Learning rate: 9.98e-5
[1600/32000]	[L1: 42.8344]	83.2+5.8s
[3200/32000]	[L1: 43.2801]	79.6+0.6s
[4800/32000]	[L1: 43.2845]	82.3+0.6s
[6400/32000]	[L1: 43.0271]	81.6+0.6s
[8000/32000]	[L1: 43.0074]	79.9+0.6s
[9600/32000]	[L1: 42.9324]	79.9+0.6s
[11200/32000]	[L1: 42.8661]	81.5+0.6s
[12800/32000]	[L1: 42.8433]	81.8+0.6s
[14400/32000]	[L1: 42.9004]	81.1+0.6s
[16000/32000]	[L1: 42.9214]	80.4+0.6s
[17600/32000]	[L1: 42.8917]	79.1+0.6s
[19200/32000]	[L1: 42.8982]	81.4+0.6s
[20800/32000]	[L1: 42.8232]	82.1+0.6s
[22400/32000]	[L1: 42.7655]	82.0+0.6s
[24000/32000]	[L1: 42.7424]	81.4+0.6s
[25600/32000]	[L1: 42.7789]	81.7+0.6s
[27200/32000]	[L1: 42.7860]	81.5+0.6s
[28800/32000]	[L1: 42.8199]	82.5+0.6s
[30400/32000]	[L1: 42.8345]	82.3+0.6s
[32000/32000]	[L1: 42.8195]	81.8+0.6s

Evaluation:
[my_val x8]	PSNR: 21.57 (Best: 21.87 @epoch 16)
Total time: 3.75s

[Epoch 26]	Learning rate: 9.98e-5
[1600/32000]	[L1: 42.2621]	82.2+6.5s
[3200/32000]	[L1: 42.8848]	81.8+0.6s
[4800/32000]	[L1: 42.7825]	80.6+0.6s
[6400/32000]	[L1: 42.6572]	82.5+0.6s
[8000/32000]	[L1: 42.4980]	82.8+0.6s
[9600/32000]	[L1: 42.3964]	81.7+0.6s
[11200/32000]	[L1: 42.4610]	78.9+0.6s
[12800/32000]	[L1: 42.5125]	81.7+0.6s
[14400/32000]	[L1: 42.5329]	81.0+0.6s
[16000/32000]	[L1: 42.5401]	80.3+0.6s
[17600/32000]	[L1: 42.5690]	80.4+0.6s
[19200/32000]	[L1: 42.6798]	81.6+0.6s
[20800/32000]	[L1: 42.6764]	83.9+0.7s
[22400/32000]	[L1: 42.6620]	82.0+0.6s
[24000/32000]	[L1: 42.6524]	81.8+0.6s
[25600/32000]	[L1: 42.6220]	81.9+0.6s
[27200/32000]	[L1: 42.7163]	82.3+0.6s
[28800/32000]	[L1: 42.7521]	82.4+0.6s
[30400/32000]	[L1: 42.7609]	81.8+0.6s
[32000/32000]	[L1: 42.7811]	81.8+0.6s

Evaluation:
[my_val x8]	PSNR: 21.56 (Best: 21.87 @epoch 16)
Total time: 3.76s

[Epoch 27]	Learning rate: 9.98e-5
[1600/32000]	[L1: 42.5192]	80.5+6.0s
[3200/32000]	[L1: 42.8404]	80.8+0.6s
[4800/32000]	[L1: 42.7792]	79.6+0.6s
[6400/32000]	[L1: 42.6327]	81.7+0.6s
[8000/32000]	[L1: 42.6362]	78.8+0.6s
[9600/32000]	[L1: 42.5343]	80.8+0.6s
[11200/32000]	[L1: 42.5731]	79.9+0.6s
[12800/32000]	[L1: 42.6192]	82.0+0.6s
[14400/32000]	[L1: 42.6150]	78.7+0.6s
[16000/32000]	[L1: 42.5908]	81.9+0.6s
[17600/32000]	[L1: 42.5608]	82.2+0.6s
[19200/32000]	[L1: 42.6694]	81.9+0.6s
[20800/32000]	[L1: 42.6821]	82.3+0.6s
[22400/32000]	[L1: 42.6792]	81.5+0.6s
[24000/32000]	[L1: 42.6090]	81.8+0.6s
[25600/32000]	[L1: 42.6391]	80.4+0.6s
[27200/32000]	[L1: 42.6109]	80.9+0.6s
[28800/32000]	[L1: 42.6361]	82.0+0.6s
[30400/32000]	[L1: 42.6345]	80.2+0.6s
[32000/32000]	[L1: 42.6548]	81.4+0.6s

Evaluation:
[my_val x8]	PSNR: 21.78 (Best: 21.87 @epoch 16)
Total time: 3.78s

[Epoch 28]	Learning rate: 9.98e-5
[1600/32000]	[L1: 43.1169]	81.2+6.4s
[3200/32000]	[L1: 42.9132]	82.2+0.6s
[4800/32000]	[L1: 42.8428]	81.7+0.6s
[6400/32000]	[L1: 42.9041]	81.8+0.6s
[8000/32000]	[L1: 42.8614]	80.3+0.6s
[9600/32000]	[L1: 42.8642]	81.7+0.6s
[11200/32000]	[L1: 42.6393]	81.9+0.6s
[12800/32000]	[L1: 42.6811]	82.0+0.6s
[14400/32000]	[L1: 42.7354]	81.6+0.6s
[16000/32000]	[L1: 42.7434]	81.5+0.6s
[17600/32000]	[L1: 42.6652]	81.3+0.6s
[19200/32000]	[L1: 42.6204]	81.0+0.6s
[20800/32000]	[L1: 42.5464]	81.7+0.6s
[22400/32000]	[L1: 42.4860]	82.4+0.6s
[24000/32000]	[L1: 42.4431]	81.8+0.6s
[25600/32000]	[L1: 42.5223]	81.8+0.6s
[27200/32000]	[L1: 42.5082]	80.7+0.6s
[28800/32000]	[L1: 42.4797]	76.8+0.6s
[30400/32000]	[L1: 42.4785]	81.2+0.6s
[32000/32000]	[L1: 42.4970]	82.2+0.6s

Evaluation:
[my_val x8]	PSNR: 21.92 (Best: 21.92 @epoch 28)
Total time: 3.70s

[Epoch 29]	Learning rate: 9.98e-5
[1600/32000]	[L1: 41.6246]	82.9+6.0s
[3200/32000]	[L1: 41.8989]	83.3+0.6s
[4800/32000]	[L1: 41.8368]	82.7+0.6s
[6400/32000]	[L1: 42.1282]	83.3+0.6s
[8000/32000]	[L1: 42.1705]	81.6+0.6s
[9600/32000]	[L1: 42.1542]	82.2+0.6s
[11200/32000]	[L1: 42.2649]	82.5+0.6s
[12800/32000]	[L1: 42.2568]	81.9+0.6s
[14400/32000]	[L1: 42.1514]	81.9+0.6s
[16000/32000]	[L1: 42.1145]	82.1+0.6s
[17600/32000]	[L1: 42.1141]	81.4+0.6s
[19200/32000]	[L1: 42.0932]	81.7+0.6s
[20800/32000]	[L1: 42.0923]	80.0+0.6s
[22400/32000]	[L1: 42.1664]	81.6+0.6s
[24000/32000]	[L1: 42.1923]	82.0+0.6s
[25600/32000]	[L1: 42.2331]	80.3+0.6s
[27200/32000]	[L1: 42.2430]	80.2+0.6s
[28800/32000]	[L1: 42.2390]	81.9+0.6s
[30400/32000]	[L1: 42.2545]	81.6+0.6s
[32000/32000]	[L1: 42.2430]	82.1+0.6s

Evaluation:
[my_val x8]	PSNR: 21.47 (Best: 21.92 @epoch 28)
Total time: 3.79s

[Epoch 30]	Learning rate: 9.98e-5
[1600/32000]	[L1: 42.6074]	80.9+5.8s
[3200/32000]	[L1: 42.4942]	82.0+0.6s
[4800/32000]	[L1: 42.4197]	83.5+0.6s
[6400/32000]	[L1: 42.2209]	82.6+0.6s
[8000/32000]	[L1: 41.8938]	82.8+0.6s
[9600/32000]	[L1: 41.9647]	83.1+0.6s
[11200/32000]	[L1: 42.1367]	81.9+0.6s
[12800/32000]	[L1: 42.0553]	80.8+0.6s
[14400/32000]	[L1: 41.9358]	81.7+0.6s
[16000/32000]	[L1: 41.9580]	82.0+0.6s
[17600/32000]	[L1: 41.9255]	82.4+0.6s
[19200/32000]	[L1: 41.8834]	80.9+0.6s
[20800/32000]	[L1: 41.9289]	80.0+0.6s
[22400/32000]	[L1: 42.0138]	79.4+0.6s
[24000/32000]	[L1: 42.0289]	82.3+0.6s
[25600/32000]	[L1: 42.0219]	82.1+0.6s
[27200/32000]	[L1: 42.0027]	81.8+0.6s
[28800/32000]	[L1: 41.9740]	81.2+0.6s
[30400/32000]	[L1: 41.9615]	80.8+0.6s
[32000/32000]	[L1: 41.9732]	81.8+0.6s

Evaluation:
[my_val x8]	PSNR: 21.66 (Best: 21.92 @epoch 28)
Total time: 3.63s

[Epoch 31]	Learning rate: 9.98e-5
[1600/32000]	[L1: 42.9717]	82.7+6.2s
[3200/32000]	[L1: 42.7096]	83.8+0.6s
[4800/32000]	[L1: 42.5541]	83.5+0.6s
[6400/32000]	[L1: 42.5942]	82.3+0.6s
[8000/32000]	[L1: 42.6012]	83.4+0.6s
[9600/32000]	[L1: 42.4514]	82.8+0.6s
[11200/32000]	[L1: 42.2219]	81.9+0.6s
[12800/32000]	[L1: 42.2743]	81.6+0.6s
[14400/32000]	[L1: 42.2197]	83.2+0.6s
[16000/32000]	[L1: 42.1787]	83.1+0.6s
[17600/32000]	[L1: 42.1384]	82.5+0.6s
[19200/32000]	[L1: 42.1749]	82.4+0.6s
[20800/32000]	[L1: 42.2416]	81.0+0.6s
[22400/32000]	[L1: 42.1522]	82.3+0.6s
[24000/32000]	[L1: 42.0847]	82.9+0.6s
[25600/32000]	[L1: 42.0801]	83.1+0.6s
[27200/32000]	[L1: 42.0444]	82.1+0.6s
[28800/32000]	[L1: 42.0166]	82.7+0.6s
[30400/32000]	[L1: 41.9320]	82.7+0.6s
[32000/32000]	[L1: 41.9133]	81.7+0.6s

Evaluation:
[my_val x8]	PSNR: 20.71 (Best: 21.92 @epoch 28)
Total time: 3.75s

[Epoch 32]	Learning rate: 9.97e-5
[1600/32000]	[L1: 41.3433]	81.8+5.6s
[3200/32000]	[L1: 41.8999]	81.5+0.6s
[4800/32000]	[L1: 42.0293]	82.3+0.6s
[6400/32000]	[L1: 41.8678]	81.4+0.6s
[8000/32000]	[L1: 42.0134]	80.2+0.6s
[9600/32000]	[L1: 42.0591]	79.9+0.6s
[11200/32000]	[L1: 41.9494]	81.8+0.6s
[12800/32000]	[L1: 41.8321]	81.9+0.6s
[14400/32000]	[L1: 41.7615]	81.3+0.6s
[16000/32000]	[L1: 41.6300]	82.1+0.6s
[17600/32000]	[L1: 41.6726]	81.9+0.6s
[19200/32000]	[L1: 41.6351]	81.5+0.6s
[20800/32000]	[L1: 41.6287]	80.2+0.6s
[22400/32000]	[L1: 41.5650]	82.3+0.6s
[24000/32000]	[L1: 41.5283]	82.7+0.6s
[25600/32000]	[L1: 41.5021]	82.2+0.6s
[27200/32000]	[L1: 41.5274]	81.2+0.6s
[28800/32000]	[L1: 41.5307]	81.5+0.6s
[30400/32000]	[L1: 41.5559]	82.2+0.6s
[32000/32000]	[L1: 41.6093]	81.6+0.6s

Evaluation:
[my_val x8]	PSNR: 21.71 (Best: 21.92 @epoch 28)
Total time: 3.78s

[Epoch 33]	Learning rate: 9.97e-5
[1600/32000]	[L1: 41.5335]	82.2+5.7s
[3200/32000]	[L1: 41.3616]	82.3+0.6s
[4800/32000]	[L1: 41.5192]	82.1+0.6s
[6400/32000]	[L1: 41.5285]	81.8+0.6s
[8000/32000]	[L1: 41.6044]	82.0+0.6s
[9600/32000]	[L1: 41.6259]	81.9+0.6s
[11200/32000]	[L1: 41.6131]	81.9+0.6s
[12800/32000]	[L1: 41.6198]	81.4+0.6s
[14400/32000]	[L1: 41.5249]	82.0+0.6s
[16000/32000]	[L1: 41.5372]	81.6+0.6s
[17600/32000]	[L1: 41.6110]	78.1+0.6s
[19200/32000]	[L1: 41.5053]	76.6+0.6s
[20800/32000]	[L1: 41.4596]	76.4+0.6s
[22400/32000]	[L1: 41.4770]	77.9+0.6s
[24000/32000]	[L1: 41.4804]	78.0+0.6s
[25600/32000]	[L1: 41.5446]	82.4+0.6s
[27200/32000]	[L1: 41.5465]	80.4+0.6s
[28800/32000]	[L1: 41.5598]	76.9+0.6s
[30400/32000]	[L1: 41.5269]	79.5+0.6s
[32000/32000]	[L1: 41.4908]	82.0+0.6s

Evaluation:
[my_val x8]	PSNR: 21.59 (Best: 21.92 @epoch 28)
Total time: 3.81s

[Epoch 34]	Learning rate: 9.97e-5
[1600/32000]	[L1: 42.8232]	81.6+6.2s
[3200/32000]	[L1: 42.0759]	83.2+0.6s
[4800/32000]	[L1: 41.4394]	81.8+0.6s
[6400/32000]	[L1: 41.5484]	82.0+0.6s
[8000/32000]	[L1: 41.4920]	82.3+0.6s
[9600/32000]	[L1: 41.4131]	81.9+0.6s
[11200/32000]	[L1: 41.4655]	82.4+0.6s
[12800/32000]	[L1: 41.4569]	79.2+0.6s
[14400/32000]	[L1: 41.4824]	82.1+0.6s
[16000/32000]	[L1: 41.4406]	81.5+0.6s
[17600/32000]	[L1: 41.5510]	82.5+0.6s
[19200/32000]	[L1: 41.4761]	82.1+0.6s
[20800/32000]	[L1: 41.4412]	79.6+0.6s
[22400/32000]	[L1: 41.4278]	81.5+0.6s
[24000/32000]	[L1: 41.5106]	78.8+0.6s
[25600/32000]	[L1: 41.5581]	82.8+0.6s
[27200/32000]	[L1: 41.5290]	81.8+0.6s
[28800/32000]	[L1: 41.4813]	81.9+0.6s
[30400/32000]	[L1: 41.5167]	79.1+0.6s
[32000/32000]	[L1: 41.5156]	78.6+0.6s

Evaluation:
[my_val x8]	PSNR: 22.17 (Best: 22.17 @epoch 34)
Total time: 3.83s

[Epoch 35]	Learning rate: 9.97e-5
[1600/32000]	[L1: 41.7311]	81.1+6.2s
[3200/32000]	[L1: 41.8955]	82.4+0.6s
[4800/32000]	[L1: 41.9462]	81.2+0.6s
[6400/32000]	[L1: 41.8352]	80.2+0.6s
[8000/32000]	[L1: 41.7971]	82.3+0.6s
[9600/32000]	[L1: 41.4987]	80.8+0.6s
[11200/32000]	[L1: 41.5351]	82.0+0.6s
[12800/32000]	[L1: 41.5409]	79.8+0.6s
[14400/32000]	[L1: 41.5883]	82.3+0.6s
[16000/32000]	[L1: 41.5145]	81.7+0.6s
[17600/32000]	[L1: 41.4361]	82.0+0.6s
[19200/32000]	[L1: 41.3583]	81.5+0.6s
[20800/32000]	[L1: 41.3395]	82.1+0.6s
[22400/32000]	[L1: 41.3186]	82.2+0.6s
[24000/32000]	[L1: 41.2399]	81.2+0.6s
[25600/32000]	[L1: 41.2194]	81.6+0.6s
[27200/32000]	[L1: 41.1900]	81.4+0.6s
[28800/32000]	[L1: 41.1265]	81.8+0.6s
[30400/32000]	[L1: 41.1084]	81.5+0.6s
[32000/32000]	[L1: 41.1424]	81.9+0.6s

Evaluation:
[my_val x8]	PSNR: 22.01 (Best: 22.17 @epoch 34)
Total time: 3.80s

[Epoch 36]	Learning rate: 9.97e-5
[1600/32000]	[L1: 40.8304]	82.6+5.7s
[3200/32000]	[L1: 41.1920]	82.4+0.6s
[4800/32000]	[L1: 41.1132]	81.2+0.6s
[6400/32000]	[L1: 41.0968]	81.8+0.6s
[8000/32000]	[L1: 40.9988]	83.0+0.6s
[9600/32000]	[L1: 41.1229]	82.8+0.6s
[11200/32000]	[L1: 41.0729]	82.3+0.6s
[12800/32000]	[L1: 40.9398]	81.8+0.6s
[14400/32000]	[L1: 40.8946]	82.1+0.6s
[16000/32000]	[L1: 40.8669]	83.5+0.6s
[17600/32000]	[L1: 40.7979]	80.6+0.6s
[19200/32000]	[L1: 40.8045]	80.8+0.6s
[20800/32000]	[L1: 40.8162]	82.5+0.6s
[22400/32000]	[L1: 40.8713]	82.4+0.6s
[24000/32000]	[L1: 40.9231]	82.0+0.6s
[25600/32000]	[L1: 40.8547]	82.9+0.6s
[27200/32000]	[L1: 40.8047]	81.9+0.6s
[28800/32000]	[L1: 40.8456]	83.2+0.6s
[30400/32000]	[L1: 40.8651]	82.2+0.6s
[32000/32000]	[L1: 40.8548]	81.7+0.6s

Evaluation:
[my_val x8]	PSNR: 21.54 (Best: 22.17 @epoch 34)
Total time: 3.75s

[Epoch 37]	Learning rate: 9.97e-5
[1600/32000]	[L1: 40.7678]	82.1+5.7s
[3200/32000]	[L1: 41.0131]	81.9+0.6s
[4800/32000]	[L1: 41.1232]	83.1+0.6s
[6400/32000]	[L1: 41.3866]	83.8+0.6s
[8000/32000]	[L1: 41.2709]	82.8+0.6s
[9600/32000]	[L1: 41.3380]	83.5+0.6s
[11200/32000]	[L1: 41.3824]	83.1+0.6s
[12800/32000]	[L1: 41.3917]	82.2+0.6s
[14400/32000]	[L1: 41.2778]	81.9+0.6s
[16000/32000]	[L1: 41.2455]	81.8+0.6s
[17600/32000]	[L1: 41.2348]	83.0+0.6s
[19200/32000]	[L1: 41.2051]	82.6+0.6s
[20800/32000]	[L1: 41.1490]	82.2+0.6s
[22400/32000]	[L1: 41.0608]	82.7+0.6s
[24000/32000]	[L1: 41.0336]	80.3+0.6s
[25600/32000]	[L1: 41.0064]	82.3+0.6s
[27200/32000]	[L1: 41.0370]	82.2+0.6s
[28800/32000]	[L1: 41.0167]	82.8+0.6s
[30400/32000]	[L1: 41.1014]	82.6+0.6s
[32000/32000]	[L1: 41.0723]	82.8+0.6s

Evaluation:
[my_val x8]	PSNR: 21.47 (Best: 22.17 @epoch 34)
Total time: 3.67s

[Epoch 38]	Learning rate: 9.96e-5
[1600/32000]	[L1: 41.0810]	82.2+6.2s
[3200/32000]	[L1: 40.9117]	82.5+0.6s
[4800/32000]	[L1: 41.1201]	81.3+0.6s
[6400/32000]	[L1: 41.1916]	82.0+0.6s
[8000/32000]	[L1: 41.2228]	83.2+0.6s
[9600/32000]	[L1: 41.2049]	82.4+0.6s
[11200/32000]	[L1: 41.1696]	82.7+0.6s
[12800/32000]	[L1: 41.2189]	82.5+0.6s
[14400/32000]	[L1: 41.1690]	82.2+0.6s
[16000/32000]	[L1: 41.2607]	84.0+0.6s
[17600/32000]	[L1: 41.1773]	82.4+0.6s
[19200/32000]	[L1: 41.0748]	83.4+0.6s
[20800/32000]	[L1: 41.0711]	83.1+0.6s
[22400/32000]	[L1: 41.0374]	84.0+0.6s
[24000/32000]	[L1: 40.9974]	83.3+0.6s
[25600/32000]	[L1: 41.0388]	82.9+0.6s
[27200/32000]	[L1: 41.0071]	83.6+0.6s
[28800/32000]	[L1: 40.9892]	83.6+0.6s
[30400/32000]	[L1: 41.0037]	82.8+0.6s
[32000/32000]	[L1: 41.0234]	82.6+0.6s

Evaluation:
[my_val x8]	PSNR: 21.98 (Best: 22.17 @epoch 34)
Total time: 3.84s

[Epoch 39]	Learning rate: 9.96e-5
[1600/32000]	[L1: 40.8179]	82.5+6.5s
[3200/32000]	[L1: 41.1498]	83.8+0.6s
[4800/32000]	[L1: 40.8943]	83.9+0.6s
[6400/32000]	[L1: 40.6296]	83.0+0.6s
[8000/32000]	[L1: 40.8071]	83.0+0.6s
[9600/32000]	[L1: 40.9409]	82.1+0.6s
[11200/32000]	[L1: 40.7710]	83.5+0.6s
[12800/32000]	[L1: 40.8713]	82.7+0.6s
[14400/32000]	[L1: 40.7234]	82.8+0.6s
[16000/32000]	[L1: 40.6634]	82.4+0.6s
[17600/32000]	[L1: 40.6167]	82.6+0.6s
[19200/32000]	[L1: 40.5509]	83.2+0.6s
[20800/32000]	[L1: 40.5504]	82.6+0.6s
[22400/32000]	[L1: 40.5849]	83.4+0.6s
[24000/32000]	[L1: 40.6165]	84.1+0.6s
[25600/32000]	[L1: 40.6087]	83.4+0.6s
[27200/32000]	[L1: 40.6023]	82.6+0.6s
[28800/32000]	[L1: 40.6151]	81.2+0.6s
[30400/32000]	[L1: 40.6703]	81.7+0.6s
[32000/32000]	[L1: 40.6055]	82.5+0.6s

Evaluation:
[my_val x8]	PSNR: 21.59 (Best: 22.17 @epoch 34)
Total time: 3.69s

[Epoch 40]	Learning rate: 9.96e-5
[1600/32000]	[L1: 40.1039]	83.3+5.6s
[3200/32000]	[L1: 40.3486]	82.1+0.6s
[4800/32000]	[L1: 40.1178]	81.8+0.6s
[6400/32000]	[L1: 40.4956]	82.2+0.6s
[8000/32000]	[L1: 40.8256]	82.0+0.6s
[9600/32000]	[L1: 40.7450]	82.2+0.6s
[11200/32000]	[L1: 40.7205]	81.5+0.6s
[12800/32000]	[L1: 40.7491]	82.3+0.6s
[14400/32000]	[L1: 40.7278]	81.5+0.6s
[16000/32000]	[L1: 40.6439]	82.5+0.6s
[17600/32000]	[L1: 40.5837]	82.8+0.6s
[19200/32000]	[L1: 40.5936]	83.2+0.6s
[20800/32000]	[L1: 40.5042]	83.0+0.6s
[22400/32000]	[L1: 40.4461]	83.0+0.6s
[24000/32000]	[L1: 40.3907]	82.8+0.6s
[25600/32000]	[L1: 40.3872]	82.7+0.6s
[27200/32000]	[L1: 40.3423]	82.2+0.6s
[28800/32000]	[L1: 40.4327]	82.3+0.6s
[30400/32000]	[L1: 40.4519]	82.4+0.6s
[32000/32000]	[L1: 40.4418]	83.4+0.6s

Evaluation:
[my_val x8]	PSNR: 21.71 (Best: 22.17 @epoch 34)
Total time: 3.86s

[Epoch 41]	Learning rate: 9.96e-5
[1600/32000]	[L1: 39.7745]	83.2+5.7s
[3200/32000]	[L1: 40.2974]	83.2+0.6s
[4800/32000]	[L1: 40.7345]	81.7+0.6s
[6400/32000]	[L1: 40.6527]	82.4+0.6s
[8000/32000]	[L1: 40.7586]	82.7+0.7s
[9600/32000]	[L1: 40.8200]	82.8+0.6s
[11200/32000]	[L1: 40.5546]	83.6+0.6s
[12800/32000]	[L1: 40.4606]	83.5+0.6s
[14400/32000]	[L1: 40.5559]	83.0+0.6s
[16000/32000]	[L1: 40.5707]	82.5+0.6s
[17600/32000]	[L1: 40.5028]	82.2+0.6s
[19200/32000]	[L1: 40.4487]	84.3+0.6s
[20800/32000]	[L1: 40.5744]	84.0+0.6s
[22400/32000]	[L1: 40.4952]	82.0+0.6s
[24000/32000]	[L1: 40.5506]	83.6+0.6s
[25600/32000]	[L1: 40.5138]	81.5+0.6s
[27200/32000]	[L1: 40.5235]	82.3+0.6s
[28800/32000]	[L1: 40.5531]	82.3+0.6s
[30400/32000]	[L1: 40.4786]	80.8+0.6s
[32000/32000]	[L1: 40.4714]	82.9+0.6s

Evaluation:
[my_val x8]	PSNR: 22.17 (Best: 22.17 @epoch 41)
Total time: 3.86s

[Epoch 42]	Learning rate: 9.96e-5
[1600/32000]	[L1: 40.9803]	83.7+5.3s
[3200/32000]	[L1: 41.1488]	83.9+0.6s
[4800/32000]	[L1: 41.1347]	83.4+0.6s
[6400/32000]	[L1: 40.9372]	82.6+0.6s
[8000/32000]	[L1: 40.9852]	80.9+0.6s
[9600/32000]	[L1: 40.9037]	83.8+0.6s
[11200/32000]	[L1: 41.0464]	82.2+0.6s
[12800/32000]	[L1: 40.9141]	82.4+0.6s
[14400/32000]	[L1: 40.9514]	81.3+0.6s
[16000/32000]	[L1: 40.8563]	81.7+0.6s
[17600/32000]	[L1: 40.7749]	81.9+0.6s
[19200/32000]	[L1: 40.7808]	83.2+0.6s
[20800/32000]	[L1: 40.7491]	82.1+0.6s
[22400/32000]	[L1: 40.7082]	81.8+0.6s
[24000/32000]	[L1: 40.6932]	83.6+0.6s
[25600/32000]	[L1: 40.6732]	82.4+0.6s
[27200/32000]	[L1: 40.6804]	82.0+0.6s
[28800/32000]	[L1: 40.5916]	82.1+0.6s
[30400/32000]	[L1: 40.5910]	81.2+0.6s
[32000/32000]	[L1: 40.5585]	82.5+0.6s

Evaluation:
[my_val x8]	PSNR: 21.35 (Best: 22.17 @epoch 41)
Total time: 3.64s

[Epoch 43]	Learning rate: 9.95e-5
[1600/32000]	[L1: 40.3015]	84.3+6.1s
[3200/32000]	[L1: 40.4331]	82.3+0.6s
[4800/32000]	[L1: 40.1499]	82.6+0.6s
[6400/32000]	[L1: 40.1082]	82.7+0.6s
[8000/32000]	[L1: 40.2463]	82.0+0.6s
[9600/32000]	[L1: 40.1899]	82.7+0.6s
[11200/32000]	[L1: 40.0581]	81.7+0.6s
[12800/32000]	[L1: 40.1219]	81.4+0.6s
[14400/32000]	[L1: 40.1731]	83.1+0.6s
[16000/32000]	[L1: 40.1953]	82.9+0.6s
[17600/32000]	[L1: 40.1453]	81.0+0.6s
[19200/32000]	[L1: 40.0471]	81.7+0.6s
[20800/32000]	[L1: 40.0241]	79.8+0.6s
[22400/32000]	[L1: 40.0399]	80.5+0.6s
[24000/32000]	[L1: 40.0254]	80.0+0.6s
[25600/32000]	[L1: 40.0965]	81.4+0.6s
[27200/32000]	[L1: 40.1148]	81.4+0.6s
[28800/32000]	[L1: 40.1471]	82.8+0.6s
[30400/32000]	[L1: 40.1092]	82.1+0.6s
[32000/32000]	[L1: 40.1630]	80.9+0.6s

Evaluation:
[my_val x8]	PSNR: 21.71 (Best: 22.17 @epoch 41)
Total time: 3.66s

[Epoch 44]	Learning rate: 9.95e-5
[1600/32000]	[L1: 38.8619]	81.5+5.6s
[3200/32000]	[L1: 39.1973]	81.9+0.6s
[4800/32000]	[L1: 39.3691]	83.3+0.6s
[6400/32000]	[L1: 39.8130]	82.4+0.6s
[8000/32000]	[L1: 39.7432]	81.9+0.6s
[9600/32000]	[L1: 39.8068]	82.6+0.6s
[11200/32000]	[L1: 39.7127]	82.6+0.6s
[12800/32000]	[L1: 39.8792]	82.6+0.6s
[14400/32000]	[L1: 39.8986]	80.2+0.6s
[16000/32000]	[L1: 39.8690]	81.8+0.6s
[17600/32000]	[L1: 39.9818]	82.0+0.6s
[19200/32000]	[L1: 40.0870]	81.6+0.6s
[20800/32000]	[L1: 40.0736]	80.6+0.6s
[22400/32000]	[L1: 40.0694]	82.7+0.6s
[24000/32000]	[L1: 40.1206]	81.6+0.6s
[25600/32000]	[L1: 40.1032]	82.4+0.6s
[27200/32000]	[L1: 40.1791]	82.3+0.6s
[28800/32000]	[L1: 40.1659]	81.8+0.6s
[30400/32000]	[L1: 40.1837]	81.4+0.6s
[32000/32000]	[L1: 40.1543]	82.7+0.6s

Evaluation:
[my_val x8]	PSNR: 21.50 (Best: 22.17 @epoch 41)
Total time: 3.63s

[Epoch 45]	Learning rate: 9.95e-5
[1600/32000]	[L1: 41.2056]	82.0+5.9s
[3200/32000]	[L1: 40.5927]	81.6+0.6s
[4800/32000]	[L1: 40.3432]	82.2+0.6s
[6400/32000]	[L1: 40.2554]	82.8+0.6s
[8000/32000]	[L1: 40.3201]	83.1+0.6s
[9600/32000]	[L1: 40.0603]	81.3+0.6s
[11200/32000]	[L1: 39.9037]	80.9+0.6s
[12800/32000]	[L1: 39.9019]	82.2+0.6s
[14400/32000]	[L1: 39.9008]	81.5+0.6s
[16000/32000]	[L1: 39.8666]	82.3+0.6s
[17600/32000]	[L1: 39.8685]	81.9+0.6s
[19200/32000]	[L1: 39.9256]	82.1+0.6s
[20800/32000]	[L1: 39.8988]	81.7+0.6s
[22400/32000]	[L1: 39.9322]	80.7+0.6s
[24000/32000]	[L1: 39.9531]	83.2+0.6s
[25600/32000]	[L1: 39.9437]	82.1+0.6s
[27200/32000]	[L1: 39.9522]	82.5+0.6s
[28800/32000]	[L1: 39.9301]	82.3+0.6s
[30400/32000]	[L1: 39.9501]	81.6+0.6s
[32000/32000]	[L1: 39.9020]	80.6+0.6s

Evaluation:
[my_val x8]	PSNR: 22.08 (Best: 22.17 @epoch 41)
Total time: 3.77s

[Epoch 46]	Learning rate: 9.95e-5
[1600/32000]	[L1: 40.4320]	81.7+5.3s
[3200/32000]	[L1: 39.9596]	82.2+0.6s
[4800/32000]	[L1: 39.8198]	80.8+0.6s
[6400/32000]	[L1: 39.8738]	82.2+0.6s
[8000/32000]	[L1: 39.9205]	82.0+0.6s
[9600/32000]	[L1: 40.0025]	82.4+0.6s
[11200/32000]	[L1: 39.9610]	80.7+0.6s
[12800/32000]	[L1: 40.0389]	82.2+0.6s
[14400/32000]	[L1: 40.0098]	81.6+0.6s
[16000/32000]	[L1: 40.0513]	82.3+0.6s
[17600/32000]	[L1: 40.0063]	82.5+0.6s
[19200/32000]	[L1: 39.9742]	81.5+0.6s
[20800/32000]	[L1: 40.0021]	83.3+0.6s
[22400/32000]	[L1: 39.9547]	81.6+0.6s
[24000/32000]	[L1: 39.9140]	82.3+0.6s
[25600/32000]	[L1: 39.9704]	82.1+0.6s
[27200/32000]	[L1: 40.0182]	81.6+0.6s
[28800/32000]	[L1: 40.0501]	81.5+0.6s
[30400/32000]	[L1: 39.9888]	83.7+0.6s
[32000/32000]	[L1: 39.9933]	83.0+0.6s

Evaluation:
[my_val x8]	PSNR: 21.56 (Best: 22.17 @epoch 41)
Total time: 3.68s

[Epoch 47]	Learning rate: 9.95e-5
[1600/32000]	[L1: 40.5409]	83.1+6.4s
[3200/32000]	[L1: 39.8199]	83.7+0.6s
[4800/32000]	[L1: 39.9832]	83.4+0.6s
[6400/32000]	[L1: 39.8504]	82.9+0.6s
[8000/32000]	[L1: 39.8014]	83.0+0.6s
[9600/32000]	[L1: 40.1001]	83.2+0.6s
[11200/32000]	[L1: 40.0198]	80.9+0.6s
[12800/32000]	[L1: 40.0180]	81.3+0.6s
[14400/32000]	[L1: 40.0942]	80.1+0.6s
[16000/32000]	[L1: 40.0460]	81.8+0.6s
[17600/32000]	[L1: 39.9802]	82.4+0.6s
[19200/32000]	[L1: 40.0496]	81.5+0.6s
[20800/32000]	[L1: 40.0787]	81.7+0.6s
[22400/32000]	[L1: 40.0691]	82.7+0.6s
[24000/32000]	[L1: 39.9827]	82.0+0.6s
[25600/32000]	[L1: 39.9520]	82.1+0.6s
[27200/32000]	[L1: 39.9361]	82.0+0.6s
[28800/32000]	[L1: 39.9925]	79.9+0.6s
[30400/32000]	[L1: 39.9710]	80.8+0.6s
[32000/32000]	[L1: 39.9774]	79.1+0.6s

Evaluation:
[my_val x8]	PSNR: 21.64 (Best: 22.17 @epoch 41)
Total time: 3.74s

[Epoch 48]	Learning rate: 9.94e-5
[1600/32000]	[L1: 40.0160]	83.1+6.3s
[3200/32000]	[L1: 39.8226]	82.2+0.6s
[4800/32000]	[L1: 39.8916]	81.6+0.6s
[6400/32000]	[L1: 40.2350]	82.9+0.6s
[8000/32000]	[L1: 40.3640]	82.7+0.6s
[9600/32000]	[L1: 40.4425]	82.9+0.6s
[11200/32000]	[L1: 40.3721]	80.6+0.6s
[12800/32000]	[L1: 40.2881]	81.9+0.6s
[14400/32000]	[L1: 40.2179]	81.8+0.6s
[16000/32000]	[L1: 40.1412]	83.2+0.6s
[17600/32000]	[L1: 40.2188]	82.8+0.6s
[19200/32000]	[L1: 40.1867]	82.1+0.6s
[20800/32000]	[L1: 40.1605]	81.5+0.6s
[22400/32000]	[L1: 40.1694]	82.3+0.6s
[24000/32000]	[L1: 40.1499]	82.8+0.6s
[25600/32000]	[L1: 40.1699]	83.9+0.6s
[27200/32000]	[L1: 40.1653]	82.9+0.6s
[28800/32000]	[L1: 40.1511]	83.4+0.6s
[30400/32000]	[L1: 40.1321]	82.2+0.6s
[32000/32000]	[L1: 40.1625]	82.6+0.6s

Evaluation:
[my_val x8]	PSNR: 21.79 (Best: 22.17 @epoch 41)
Total time: 3.75s

[Epoch 49]	Learning rate: 9.94e-5
[1600/32000]	[L1: 40.0659]	82.0+5.9s
[3200/32000]	[L1: 40.4713]	82.3+0.6s
[4800/32000]	[L1: 40.2958]	82.8+0.6s
[6400/32000]	[L1: 40.2218]	83.5+0.6s
[8000/32000]	[L1: 40.0398]	84.0+0.6s
[9600/32000]	[L1: 40.4262]	82.8+0.6s
[11200/32000]	[L1: 40.4130]	83.1+0.6s
[12800/32000]	[L1: 40.4931]	83.2+0.6s
[14400/32000]	[L1: 40.5560]	82.4+0.6s
[16000/32000]	[L1: 40.4996]	83.6+0.6s
[17600/32000]	[L1: 40.4276]	82.6+0.6s
[19200/32000]	[L1: 40.3474]	82.2+0.6s
[20800/32000]	[L1: 40.3851]	82.3+0.6s
[22400/32000]	[L1: 40.2702]	80.4+0.6s
[24000/32000]	[L1: 40.1963]	81.3+0.6s
[25600/32000]	[L1: 40.1535]	81.5+0.6s
[27200/32000]	[L1: 40.1320]	83.0+0.6s
[28800/32000]	[L1: 40.1292]	81.2+0.6s
[30400/32000]	[L1: 40.1106]	81.2+0.6s
[32000/32000]	[L1: 40.0949]	81.1+0.6s

Evaluation:
[my_val x8]	PSNR: 21.57 (Best: 22.17 @epoch 41)
Total time: 3.82s

[Epoch 50]	Learning rate: 9.94e-5
[1600/32000]	[L1: 39.7365]	83.3+6.1s
[3200/32000]	[L1: 39.9142]	82.5+0.6s
[4800/32000]	[L1: 39.5856]	81.4+0.6s
[6400/32000]	[L1: 39.6011]	79.5+0.6s
[8000/32000]	[L1: 39.6191]	83.1+0.6s
[9600/32000]	[L1: 39.5670]	80.5+0.6s
[11200/32000]	[L1: 39.5384]	79.8+0.6s
[12800/32000]	[L1: 39.4844]	81.5+0.6s
[14400/32000]	[L1: 39.6129]	80.3+0.6s
[16000/32000]	[L1: 39.6665]	81.6+0.6s
[17600/32000]	[L1: 39.6920]	82.3+0.6s
[19200/32000]	[L1: 39.5813]	83.0+0.6s
[20800/32000]	[L1: 39.6349]	81.6+0.6s
[22400/32000]	[L1: 39.6032]	82.7+0.6s
[24000/32000]	[L1: 39.6333]	82.6+0.6s
[25600/32000]	[L1: 39.6621]	81.3+0.6s
[27200/32000]	[L1: 39.6690]	82.5+0.6s
[28800/32000]	[L1: 39.6617]	81.3+0.6s
[30400/32000]	[L1: 39.6282]	81.4+0.6s
[32000/32000]	[L1: 39.6614]	82.0+0.6s

Evaluation:
[my_val x8]	PSNR: 21.91 (Best: 22.17 @epoch 41)
Total time: 3.83s

[Epoch 51]	Learning rate: 9.94e-5
[1600/32000]	[L1: 39.8963]	83.2+5.7s
[3200/32000]	[L1: 39.6415]	80.9+0.6s
[4800/32000]	[L1: 39.3124]	82.5+0.6s
[6400/32000]	[L1: 39.5573]	80.4+0.6s
[8000/32000]	[L1: 39.5739]	83.5+0.6s
[9600/32000]	[L1: 39.5292]	81.5+0.6s
[11200/32000]	[L1: 39.6298]	82.5+0.6s
[12800/32000]	[L1: 39.6344]	83.1+0.6s
[14400/32000]	[L1: 39.6141]	83.6+0.6s
[16000/32000]	[L1: 39.5600]	83.7+0.6s
[17600/32000]	[L1: 39.5727]	83.6+0.6s
[19200/32000]	[L1: 39.5165]	82.8+0.6s
[20800/32000]	[L1: 39.5327]	82.7+0.6s
[22400/32000]	[L1: 39.5161]	82.3+0.6s
[24000/32000]	[L1: 39.5473]	82.9+0.6s
[25600/32000]	[L1: 39.5107]	83.6+0.6s
[27200/32000]	[L1: 39.4658]	82.4+0.6s
[28800/32000]	[L1: 39.4363]	82.6+0.6s
[30400/32000]	[L1: 39.4139]	82.6+0.6s
[32000/32000]	[L1: 39.4049]	82.6+0.6s

Evaluation:
[my_val x8]	PSNR: 21.66 (Best: 22.17 @epoch 41)
Total time: 3.73s

[Epoch 52]	Learning rate: 9.93e-5
[1600/32000]	[L1: 39.8291]	81.9+6.1s
[3200/32000]	[L1: 39.5941]	83.1+0.6s
[4800/32000]	[L1: 39.6566]	84.4+0.6s
[6400/32000]	[L1: 39.7617]	82.8+0.6s
[8000/32000]	[L1: 39.8214]	82.2+0.6s
[9600/32000]	[L1: 39.7498]	81.2+0.6s
[11200/32000]	[L1: 39.7295]	82.2+0.6s
[12800/32000]	[L1: 39.7184]	82.0+0.6s
[14400/32000]	[L1: 39.7864]	80.6+0.6s
[16000/32000]	[L1: 39.7896]	81.9+0.6s
[17600/32000]	[L1: 39.6058]	80.5+0.6s
[19200/32000]	[L1: 39.6561]	81.2+0.6s
[20800/32000]	[L1: 39.6825]	80.0+0.6s
[22400/32000]	[L1: 39.6239]	75.5+0.6s
[24000/32000]	[L1: 39.6455]	81.5+0.6s
[25600/32000]	[L1: 39.6581]	81.9+0.6s
[27200/32000]	[L1: 39.6801]	81.5+0.6s
[28800/32000]	[L1: 39.6816]	80.8+0.6s
[30400/32000]	[L1: 39.6504]	81.0+0.6s
[32000/32000]	[L1: 39.6528]	82.0+0.6s

Evaluation:
[my_val x8]	PSNR: 21.60 (Best: 22.17 @epoch 41)
Total time: 3.75s

[Epoch 53]	Learning rate: 9.93e-5
[1600/32000]	[L1: 38.2210]	82.6+5.9s
[3200/32000]	[L1: 38.0912]	80.3+0.6s
[4800/32000]	[L1: 38.5090]	81.6+0.6s
[6400/32000]	[L1: 38.7413]	82.2+0.6s
[8000/32000]	[L1: 38.9195]	82.3+0.6s
[9600/32000]	[L1: 39.0025]	79.9+0.6s
[11200/32000]	[L1: 39.0363]	81.7+0.6s
[12800/32000]	[L1: 39.1417]	79.6+0.6s
[14400/32000]	[L1: 39.2528]	80.8+0.6s
[16000/32000]	[L1: 39.3234]	81.2+0.6s
[17600/32000]	[L1: 39.3913]	81.8+0.6s
[19200/32000]	[L1: 39.4537]	82.5+0.6s
[20800/32000]	[L1: 39.4572]	80.8+0.6s
[22400/32000]	[L1: 39.5265]	82.2+0.6s
[24000/32000]	[L1: 39.5306]	82.0+0.6s
[25600/32000]	[L1: 39.5358]	80.9+0.6s
[27200/32000]	[L1: 39.5101]	76.6+0.6s
[28800/32000]	[L1: 39.4844]	80.8+0.6s
[30400/32000]	[L1: 39.4867]	80.7+0.6s
[32000/32000]	[L1: 39.5036]	81.0+0.6s

Evaluation:
[my_val x8]	PSNR: 21.60 (Best: 22.17 @epoch 41)
Total time: 3.80s

[Epoch 54]	Learning rate: 9.93e-5
[1600/32000]	[L1: 39.6456]	81.8+6.0s
[3200/32000]	[L1: 39.1480]	82.1+0.6s
[4800/32000]	[L1: 39.2948]	80.3+0.6s
[6400/32000]	[L1: 39.3008]	82.5+0.6s
[8000/32000]	[L1: 39.7131]	82.9+0.6s
[9600/32000]	[L1: 39.6509]	78.8+0.6s
[11200/32000]	[L1: 39.6530]	80.0+0.6s
[12800/32000]	[L1: 39.6119]	80.1+0.6s
[14400/32000]	[L1: 39.5813]	80.5+0.6s
[16000/32000]	[L1: 39.5962]	82.3+0.6s
[17600/32000]	[L1: 39.6250]	82.0+0.6s
[19200/32000]	[L1: 39.5840]	79.6+0.6s
[20800/32000]	[L1: 39.6103]	81.8+0.6s
[22400/32000]	[L1: 39.6382]	82.1+0.6s
[24000/32000]	[L1: 39.6045]	80.4+0.6s
[25600/32000]	[L1: 39.6178]	81.9+0.6s
[27200/32000]	[L1: 39.5388]	81.5+0.6s
[28800/32000]	[L1: 39.4866]	81.5+0.6s
[30400/32000]	[L1: 39.4894]	80.7+0.6s
[32000/32000]	[L1: 39.4610]	80.6+0.6s

Evaluation:
[my_val x8]	PSNR: 21.52 (Best: 22.17 @epoch 41)
Total time: 3.76s

[Epoch 55]	Learning rate: 9.93e-5
[1600/32000]	[L1: 38.7184]	81.4+6.3s
[3200/32000]	[L1: 38.9767]	82.0+0.6s
[4800/32000]	[L1: 38.9136]	78.3+0.6s
[6400/32000]	[L1: 38.7415]	80.5+0.6s
[8000/32000]	[L1: 39.0488]	81.8+0.6s
[9600/32000]	[L1: 39.2645]	81.8+0.6s
[11200/32000]	[L1: 39.2595]	81.4+0.6s
[12800/32000]	[L1: 39.2823]	81.1+0.6s
[14400/32000]	[L1: 39.3317]	82.3+0.6s
[16000/32000]	[L1: 39.3357]	82.2+0.6s
[17600/32000]	[L1: 39.2963]	81.6+0.6s
[19200/32000]	[L1: 39.3027]	81.6+0.6s
[20800/32000]	[L1: 39.3014]	81.9+0.6s
[22400/32000]	[L1: 39.3097]	82.1+0.6s
[24000/32000]	[L1: 39.3092]	82.1+0.6s
[25600/32000]	[L1: 39.3504]	80.9+0.6s
[27200/32000]	[L1: 39.3152]	82.0+0.6s
[28800/32000]	[L1: 39.2177]	79.2+0.6s
[30400/32000]	[L1: 39.3073]	80.2+0.6s
[32000/32000]	[L1: 39.2754]	82.5+0.6s

Evaluation:
[my_val x8]	PSNR: 21.43 (Best: 22.17 @epoch 41)
Total time: 3.78s

[Epoch 56]	Learning rate: 9.92e-5
[1600/32000]	[L1: 39.7583]	81.7+6.3s
[3200/32000]	[L1: 40.9007]	81.8+0.6s
[4800/32000]	[L1: 40.7347]	81.2+0.6s
[6400/32000]	[L1: 40.5434]	81.5+0.6s
[8000/32000]	[L1: 40.3915]	81.8+0.6s
[9600/32000]	[L1: 40.2450]	82.2+0.6s
[11200/32000]	[L1: 40.1078]	81.4+0.6s
[12800/32000]	[L1: 40.0506]	81.8+0.6s
[14400/32000]	[L1: 39.9630]	80.8+0.6s
[16000/32000]	[L1: 39.7541]	79.5+0.6s
[17600/32000]	[L1: 39.6668]	80.7+0.6s
[19200/32000]	[L1: 39.5697]	81.9+0.6s
[20800/32000]	[L1: 39.5062]	80.9+0.6s
[22400/32000]	[L1: 39.4755]	77.8+0.6s
[24000/32000]	[L1: 39.5322]	82.1+0.6s
[25600/32000]	[L1: 39.4858]	80.4+0.6s
[27200/32000]	[L1: 39.4807]	78.1+0.6s
[28800/32000]	[L1: 39.4673]	81.0+0.6s
[30400/32000]	[L1: 39.4576]	81.8+0.6s
[32000/32000]	[L1: 39.5032]	82.8+0.6s

Evaluation:
[my_val x8]	PSNR: 21.20 (Best: 22.17 @epoch 41)
Total time: 3.83s

[Epoch 57]	Learning rate: 9.92e-5
[1600/32000]	[L1: 38.3403]	81.7+5.5s
[3200/32000]	[L1: 38.7440]	80.3+0.6s
[4800/32000]	[L1: 38.9257]	81.2+0.6s
[6400/32000]	[L1: 39.0709]	81.0+0.6s
[8000/32000]	[L1: 38.9541]	80.2+0.6s
[9600/32000]	[L1: 38.9579]	80.7+0.6s
[11200/32000]	[L1: 38.8707]	81.9+0.6s
[12800/32000]	[L1: 38.7725]	80.7+0.6s
[14400/32000]	[L1: 38.6869]	80.7+0.6s
[16000/32000]	[L1: 38.6824]	80.6+0.6s
[17600/32000]	[L1: 38.7670]	78.0+0.6s
[19200/32000]	[L1: 38.8170]	81.4+0.6s
[20800/32000]	[L1: 38.8012]	77.2+0.6s
[22400/32000]	[L1: 38.8035]	81.6+0.6s
[24000/32000]	[L1: 38.8640]	80.9+0.6s
[25600/32000]	[L1: 38.8757]	81.6+0.6s
[27200/32000]	[L1: 38.9234]	81.5+0.6s
[28800/32000]	[L1: 38.9921]	81.7+0.6s
[30400/32000]	[L1: 39.0102]	77.3+0.6s
[32000/32000]	[L1: 39.0236]	81.7+0.6s

Evaluation:
[my_val x8]	PSNR: 21.38 (Best: 22.17 @epoch 41)
Total time: 3.85s

[Epoch 58]	Learning rate: 9.92e-5
[1600/32000]	[L1: 39.0229]	81.5+6.7s
[3200/32000]	[L1: 39.1059]	81.3+0.6s
[4800/32000]	[L1: 38.9796]	82.0+0.6s
[6400/32000]	[L1: 38.7328]	78.9+0.6s
[8000/32000]	[L1: 38.7535]	77.0+0.6s
[9600/32000]	[L1: 38.8683]	80.3+0.6s
[11200/32000]	[L1: 38.8357]	80.1+0.6s
[12800/32000]	[L1: 38.8974]	80.4+0.6s
[14400/32000]	[L1: 39.0321]	78.4+0.6s
[16000/32000]	[L1: 39.0599]	80.1+0.6s
[17600/32000]	[L1: 39.1351]	81.8+0.6s
[19200/32000]	[L1: 39.1294]	81.5+0.6s
[20800/32000]	[L1: 39.2329]	76.8+0.6s
[22400/32000]	[L1: 39.2602]	81.3+0.6s
[24000/32000]	[L1: 39.3146]	81.0+0.6s
[25600/32000]	[L1: 39.3262]	81.4+0.6s
[27200/32000]	[L1: 39.2771]	82.1+0.6s
[28800/32000]	[L1: 39.3514]	82.2+0.6s
[30400/32000]	[L1: 39.3206]	79.3+0.6s
[32000/32000]	[L1: 39.3440]	81.5+0.6s

Evaluation:
[my_val x8]	PSNR: 21.04 (Best: 22.17 @epoch 41)
Total time: 3.80s

[Epoch 59]	Learning rate: 9.91e-5
[1600/32000]	[L1: 39.6615]	82.9+5.6s
[3200/32000]	[L1: 39.9426]	81.9+0.6s
[4800/32000]	[L1: 39.6206]	83.6+0.6s
[6400/32000]	[L1: 39.5076]	81.3+0.6s
[8000/32000]	[L1: 39.2948]	82.2+0.6s
[9600/32000]	[L1: 39.2563]	80.2+0.6s
[11200/32000]	[L1: 39.3438]	79.3+0.6s
[12800/32000]	[L1: 39.3364]	80.0+0.6s
[14400/32000]	[L1: 39.3562]	82.2+0.6s
[16000/32000]	[L1: 39.3282]	81.8+0.6s
[17600/32000]	[L1: 39.2107]	81.8+0.6s
[19200/32000]	[L1: 39.2428]	78.5+0.6s
[20800/32000]	[L1: 39.2109]	79.2+0.6s
[22400/32000]	[L1: 39.2000]	81.7+0.6s
[24000/32000]	[L1: 39.1609]	82.1+0.6s
[25600/32000]	[L1: 39.1410]	81.3+0.6s
[27200/32000]	[L1: 39.1446]	81.8+0.6s
[28800/32000]	[L1: 39.1256]	82.3+0.6s
[30400/32000]	[L1: 39.1345]	82.2+0.6s
[32000/32000]	[L1: 39.1171]	82.2+0.6s

Evaluation:
[my_val x8]	PSNR: 21.43 (Best: 22.17 @epoch 41)
Total time: 3.86s

[Epoch 60]	Learning rate: 9.91e-5
[1600/32000]	[L1: 39.4992]	81.3+6.1s
[3200/32000]	[L1: 39.3296]	81.5+0.6s
[4800/32000]	[L1: 39.1072]	82.5+0.6s
[6400/32000]	[L1: 39.0750]	82.9+0.6s
[8000/32000]	[L1: 38.9545]	82.4+0.6s
[9600/32000]	[L1: 38.9695]	82.2+0.6s
[11200/32000]	[L1: 38.9037]	82.2+0.6s
[12800/32000]	[L1: 38.9868]	83.1+0.6s
[14400/32000]	[L1: 38.9924]	82.3+0.6s
[16000/32000]	[L1: 39.0727]	83.9+0.6s
[17600/32000]	[L1: 39.0395]	82.2+0.6s
[19200/32000]	[L1: 39.0033]	80.8+0.6s
[20800/32000]	[L1: 38.9438]	82.0+0.6s
[22400/32000]	[L1: 39.0170]	81.8+0.6s
[24000/32000]	[L1: 39.0890]	83.2+0.6s
[25600/32000]	[L1: 39.1592]	82.2+0.6s
[27200/32000]	[L1: 39.1754]	82.1+0.6s
[28800/32000]	[L1: 39.1715]	81.5+0.6s
[30400/32000]	[L1: 39.1337]	81.3+0.6s
[32000/32000]	[L1: 39.1445]	82.2+0.6s

Evaluation:
[my_val x8]	PSNR: 21.39 (Best: 22.17 @epoch 41)
Total time: 3.73s

[Epoch 61]	Learning rate: 9.91e-5
[1600/32000]	[L1: 39.2927]	83.1+6.4s
[3200/32000]	[L1: 39.4871]	82.5+0.6s
[4800/32000]	[L1: 39.1906]	82.4+0.6s
[6400/32000]	[L1: 39.0058]	83.3+0.6s
[8000/32000]	[L1: 38.9425]	83.8+0.6s
[9600/32000]	[L1: 39.0626]	82.4+0.6s
[11200/32000]	[L1: 39.0138]	82.2+0.6s
[12800/32000]	[L1: 39.0040]	83.2+0.6s
[14400/32000]	[L1: 38.9667]	83.5+0.6s
[16000/32000]	[L1: 38.8870]	82.5+0.6s
[17600/32000]	[L1: 38.9019]	82.8+0.6s
[19200/32000]	[L1: 38.9159]	83.0+0.6s
[20800/32000]	[L1: 38.8963]	83.7+0.6s
[22400/32000]	[L1: 38.8681]	82.3+0.6s
[24000/32000]	[L1: 38.8313]	82.1+0.6s
[25600/32000]	[L1: 38.7348]	82.2+0.6s
[27200/32000]	[L1: 38.7393]	82.6+0.6s
[28800/32000]	[L1: 38.7900]	82.9+0.6s
[30400/32000]	[L1: 38.8575]	81.8+0.6s
[32000/32000]	[L1: 38.8396]	81.7+0.6s

Evaluation:
[my_val x8]	PSNR: 21.28 (Best: 22.17 @epoch 41)
Total time: 3.81s

[Epoch 62]	Learning rate: 9.91e-5
[1600/32000]	[L1: 39.2734]	82.3+6.2s
[3200/32000]	[L1: 39.5064]	81.2+0.6s
[4800/32000]	[L1: 39.3631]	82.5+0.6s
[6400/32000]	[L1: 39.2547]	82.8+0.6s
[8000/32000]	[L1: 39.1520]	81.6+0.6s
[9600/32000]	[L1: 39.1426]	81.9+0.6s
[11200/32000]	[L1: 38.9478]	81.5+0.6s
[12800/32000]	[L1: 38.9663]	82.0+0.6s
[14400/32000]	[L1: 39.0260]	81.0+0.6s
[16000/32000]	[L1: 39.0234]	78.3+0.6s
[17600/32000]	[L1: 39.0849]	78.1+0.6s
[19200/32000]	[L1: 38.9993]	82.3+0.6s
[20800/32000]	[L1: 38.9805]	81.8+0.6s
[22400/32000]	[L1: 39.0039]	81.2+0.6s
[24000/32000]	[L1: 38.9779]	78.8+0.6s
[25600/32000]	[L1: 38.9597]	82.0+0.6s
[27200/32000]	[L1: 38.9211]	78.4+0.6s
[28800/32000]	[L1: 38.9193]	79.9+0.6s
[30400/32000]	[L1: 38.8802]	81.9+0.6s
[32000/32000]	[L1: 38.8688]	81.6+0.6s

Evaluation:
[my_val x8]	PSNR: 21.41 (Best: 22.17 @epoch 41)
Total time: 3.71s

[Epoch 63]	Learning rate: 9.90e-5
[1600/32000]	[L1: 38.9186]	82.2+5.7s
[3200/32000]	[L1: 38.8054]	80.7+0.6s
[4800/32000]	[L1: 38.4518]	77.8+0.6s
[6400/32000]	[L1: 38.7442]	79.8+0.6s
[8000/32000]	[L1: 38.7382]	79.5+0.6s
[9600/32000]	[L1: 38.6669]	79.0+0.6s
[11200/32000]	[L1: 38.6971]	81.0+0.6s
[12800/32000]	[L1: 38.8825]	81.3+0.6s
[14400/32000]	[L1: 38.8731]	82.2+0.6s
[16000/32000]	[L1: 38.8907]	81.5+0.6s
[17600/32000]	[L1: 38.8894]	82.1+0.6s
[19200/32000]	[L1: 38.8478]	81.3+0.6s
[20800/32000]	[L1: 38.6986]	81.7+0.6s
[22400/32000]	[L1: 38.6910]	81.7+0.6s
[24000/32000]	[L1: 38.6808]	80.1+0.6s
[25600/32000]	[L1: 38.6961]	81.3+0.6s
[27200/32000]	[L1: 38.7526]	80.9+0.6s
[28800/32000]	[L1: 38.8371]	81.0+0.6s
[30400/32000]	[L1: 38.8831]	81.9+0.6s
[32000/32000]	[L1: 38.8935]	81.5+0.6s

Evaluation:
[my_val x8]	PSNR: 21.65 (Best: 22.17 @epoch 41)
Total time: 3.75s

[Epoch 64]	Learning rate: 9.90e-5
[1600/32000]	[L1: 38.7559]	82.2+6.3s
[3200/32000]	[L1: 38.5118]	83.0+0.6s
[4800/32000]	[L1: 39.1540]	82.5+0.6s
[6400/32000]	[L1: 39.2391]	82.9+0.6s
[8000/32000]	[L1: 39.2949]	81.2+0.6s
[9600/32000]	[L1: 39.2366]	81.6+0.6s
[11200/32000]	[L1: 39.1652]	80.7+0.6s
[12800/32000]	[L1: 38.9941]	79.7+0.6s
[14400/32000]	[L1: 39.0082]	80.6+0.6s
[16000/32000]	[L1: 38.9266]	81.5+0.6s
[17600/32000]	[L1: 38.9624]	81.9+0.6s
[19200/32000]	[L1: 38.9847]	80.5+0.6s
[20800/32000]	[L1: 39.0343]	79.5+0.6s
[22400/32000]	[L1: 38.9984]	81.4+0.6s
[24000/32000]	[L1: 38.9229]	82.2+0.6s
[25600/32000]	[L1: 38.9413]	81.9+0.6s
[27200/32000]	[L1: 38.9475]	80.9+0.6s
[28800/32000]	[L1: 38.9247]	82.3+0.6s
[30400/32000]	[L1: 38.9031]	81.8+0.6s
[32000/32000]	[L1: 38.8896]	81.9+0.6s

Evaluation:
[my_val x8]	PSNR: 21.89 (Best: 22.17 @epoch 41)
Total time: 3.83s

[Epoch 65]	Learning rate: 9.90e-5
[1600/32000]	[L1: 41.2119]	81.8+6.0s
[3200/32000]	[L1: 40.4836]	81.9+0.6s
[4800/32000]	[L1: 40.1668]	80.1+0.6s
[6400/32000]	[L1: 40.0772]	82.0+0.6s
[8000/32000]	[L1: 39.8379]	79.8+0.6s
[9600/32000]	[L1: 39.7033]	78.0+0.6s
[11200/32000]	[L1: 39.7353]	81.4+0.6s
[12800/32000]	[L1: 39.8932]	81.8+0.6s
[14400/32000]	[L1: 39.7508]	82.0+0.6s
[16000/32000]	[L1: 39.7590]	82.5+0.6s
[17600/32000]	[L1: 39.7593]	80.9+0.6s
[19200/32000]	[L1: 39.7543]	81.4+0.6s
[20800/32000]	[L1: 39.7449]	80.6+0.6s
[22400/32000]	[L1: 39.6920]	81.3+0.6s
[24000/32000]	[L1: 39.6188]	81.7+0.6s
[25600/32000]	[L1: 39.5685]	81.4+0.6s
[27200/32000]	[L1: 39.4976]	80.2+0.6s
[28800/32000]	[L1: 39.4400]	79.5+0.6s
[30400/32000]	[L1: 39.3741]	81.3+0.6s
[32000/32000]	[L1: 39.3423]	81.1+0.6s

Evaluation:
[my_val x8]	PSNR: 21.17 (Best: 22.17 @epoch 41)
Total time: 3.81s

[Epoch 66]	Learning rate: 9.89e-5
[1600/32000]	[L1: 38.9963]	82.7+5.7s
[3200/32000]	[L1: 38.5060]	81.3+0.6s
[4800/32000]	[L1: 38.6777]	82.3+0.6s
[6400/32000]	[L1: 38.8016]	81.1+0.6s
[8000/32000]	[L1: 38.8004]	81.5+0.6s
[9600/32000]	[L1: 38.6574]	80.4+0.6s
[11200/32000]	[L1: 38.5207]	79.9+0.6s
[12800/32000]	[L1: 38.5477]	80.9+0.6s
[14400/32000]	[L1: 38.6177]	81.9+0.6s
[16000/32000]	[L1: 38.5662]	82.1+0.6s
[17600/32000]	[L1: 38.5262]	82.5+0.6s
[19200/32000]	[L1: 38.4973]	82.3+0.6s
[20800/32000]	[L1: 38.4893]	79.5+0.6s
[22400/32000]	[L1: 38.5121]	78.7+0.6s
[24000/32000]	[L1: 38.5953]	81.2+0.6s
[25600/32000]	[L1: 38.5456]	82.0+0.6s
[27200/32000]	[L1: 38.5984]	81.7+0.6s
[28800/32000]	[L1: 38.5981]	82.0+0.6s
[30400/32000]	[L1: 38.6658]	81.9+0.6s
[32000/32000]	[L1: 38.6632]	82.1+0.6s

Evaluation:
[my_val x8]	PSNR: 21.34 (Best: 22.17 @epoch 41)
Total time: 3.81s

[Epoch 67]	Learning rate: 9.89e-5
[1600/32000]	[L1: 39.7244]	80.7+6.0s
[3200/32000]	[L1: 39.2359]	81.0+0.6s
[4800/32000]	[L1: 39.1449]	80.4+0.6s
[6400/32000]	[L1: 38.8143]	81.6+0.6s
[8000/32000]	[L1: 38.7933]	82.4+0.6s
[9600/32000]	[L1: 38.7170]	82.0+0.6s
[11200/32000]	[L1: 38.7228]	81.8+0.6s
[12800/32000]	[L1: 38.7036]	79.3+0.6s
[14400/32000]	[L1: 38.6537]	80.3+0.6s
[16000/32000]	[L1: 38.6721]	81.9+0.6s
[17600/32000]	[L1: 38.6939]	81.1+0.6s
[19200/32000]	[L1: 38.6597]	81.3+0.6s
[20800/32000]	[L1: 38.6670]	82.0+0.6s
[22400/32000]	[L1: 38.6342]	81.3+0.6s
[24000/32000]	[L1: 38.5845]	80.7+0.6s
[25600/32000]	[L1: 38.5452]	82.1+0.6s
[27200/32000]	[L1: 38.4951]	80.3+0.6s
[28800/32000]	[L1: 38.5086]	80.8+0.6s
[30400/32000]	[L1: 38.5204]	81.6+0.6s
[32000/32000]	[L1: 38.4751]	80.1+0.6s

Evaluation:
[my_val x8]	PSNR: 21.77 (Best: 22.17 @epoch 41)
Total time: 3.73s

[Epoch 68]	Learning rate: 9.89e-5
[1600/32000]	[L1: 38.6911]	82.5+5.2s
[3200/32000]	[L1: 38.9826]	82.9+0.6s
[4800/32000]	[L1: 39.0898]	83.2+0.6s
[6400/32000]	[L1: 39.0893]	83.6+0.6s
[8000/32000]	[L1: 39.0263]	82.5+0.6s
[9600/32000]	[L1: 38.9521]	81.9+0.6s
[11200/32000]	[L1: 38.7368]	82.8+0.6s
[12800/32000]	[L1: 38.9101]	81.9+0.6s
[14400/32000]	[L1: 38.9193]	83.2+0.6s
[16000/32000]	[L1: 38.8973]	81.2+0.6s
[17600/32000]	[L1: 38.9065]	83.2+0.6s
[19200/32000]	[L1: 38.8331]	84.1+0.6s
[20800/32000]	[L1: 38.7853]	82.8+0.6s
[22400/32000]	[L1: 38.8291]	82.6+0.6s
[24000/32000]	[L1: 38.6954]	82.9+0.6s
[25600/32000]	[L1: 38.6710]	82.3+0.6s
[27200/32000]	[L1: 38.6446]	83.5+0.6s
[28800/32000]	[L1: 38.6012]	82.4+0.6s
[30400/32000]	[L1: 38.5668]	83.1+0.6s
[32000/32000]	[L1: 38.5607]	82.4+0.6s

Evaluation:
[my_val x8]	PSNR: 21.61 (Best: 22.17 @epoch 41)
Total time: 3.77s

[Epoch 69]	Learning rate: 9.88e-5
[1600/32000]	[L1: 39.3434]	81.9+5.8s
[3200/32000]	[L1: 39.4501]	82.3+0.6s
[4800/32000]	[L1: 38.6568]	83.3+0.6s
[6400/32000]	[L1: 38.6132]	83.2+0.6s
[8000/32000]	[L1: 38.4993]	83.5+0.6s
[9600/32000]	[L1: 38.5544]	83.6+0.6s
[11200/32000]	[L1: 38.5662]	82.7+0.6s
[12800/32000]	[L1: 38.7097]	82.4+0.6s
[14400/32000]	[L1: 38.7623]	82.3+0.6s
[16000/32000]	[L1: 38.8038]	83.2+0.6s
[17600/32000]	[L1: 38.8026]	82.6+0.6s
[19200/32000]	[L1: 38.8670]	82.0+0.6s
[20800/32000]	[L1: 38.8931]	81.1+0.6s
[22400/32000]	[L1: 38.9155]	82.5+0.6s
[24000/32000]	[L1: 39.0003]	79.5+0.6s
[25600/32000]	[L1: 39.0395]	81.8+0.6s
[27200/32000]	[L1: 39.0841]	80.3+0.6s
[28800/32000]	[L1: 39.0439]	78.1+0.6s
[30400/32000]	[L1: 39.0111]	81.7+0.6s
[32000/32000]	[L1: 39.0466]	81.8+0.6s

Evaluation:
[my_val x8]	PSNR: 21.48 (Best: 22.17 @epoch 41)
Total time: 3.72s

[Epoch 70]	Learning rate: 9.88e-5
[1600/32000]	[L1: 38.1440]	82.5+5.9s
[3200/32000]	[L1: 38.6531]	80.3+0.6s
[4800/32000]	[L1: 38.5740]	82.2+0.6s
[6400/32000]	[L1: 38.5044]	82.8+0.6s
[8000/32000]	[L1: 38.4603]	81.9+0.6s
[9600/32000]	[L1: 38.5260]	82.6+0.6s
[11200/32000]	[L1: 38.5576]	82.3+0.6s
[12800/32000]	[L1: 38.4295]	81.3+0.6s
[14400/32000]	[L1: 38.4193]	81.3+0.6s
[16000/32000]	[L1: 38.4684]	81.4+0.6s
[17600/32000]	[L1: 38.4879]	81.9+0.6s
[19200/32000]	[L1: 38.5463]	82.0+0.6s
[20800/32000]	[L1: 38.5607]	83.0+0.6s
[22400/32000]	[L1: 38.5051]	81.5+0.6s
[24000/32000]	[L1: 38.4266]	80.0+0.6s
[25600/32000]	[L1: 38.4073]	81.8+0.6s
[27200/32000]	[L1: 38.4687]	82.8+0.6s
[28800/32000]	[L1: 38.4932]	82.4+0.6s
[30400/32000]	[L1: 38.5885]	81.9+0.6s
[32000/32000]	[L1: 38.6445]	82.2+0.6s

Evaluation:
[my_val x8]	PSNR: 21.76 (Best: 22.17 @epoch 41)
Total time: 3.86s

[Epoch 71]	Learning rate: 9.88e-5
[1600/32000]	[L1: 38.0377]	82.3+5.8s
[3200/32000]	[L1: 38.3474]	82.2+0.6s
[4800/32000]	[L1: 38.2945]	83.7+0.6s
DataParallel(
  (module): DRN(
    (upsample): Upsample(scale_factor=8.0, mode=bicubic)
    (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
    (head): Conv2d(3, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (down): ModuleList(
      (0): DownBlock(
        (dual_module): Sequential(
          (0): Sequential(
            (0): Conv2d(8, 8, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (1): LeakyReLU(negative_slope=0.2, inplace=True)
          )
          (1): Conv2d(8, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
      )
      (1): DownBlock(
        (dual_module): Sequential(
          (0): Sequential(
            (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (1): LeakyReLU(negative_slope=0.2, inplace=True)
          )
          (1): Conv2d(16, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
      )
      (2): DownBlock(
        (dual_module): Sequential(
          (0): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (1): LeakyReLU(negative_slope=0.2, inplace=True)
          )
          (1): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
      )
    )
    (up_blocks): ModuleList(
      (0): Sequential(
        (0): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (1): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (2): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (3): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (4): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (5): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (6): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (7): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (8): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (9): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (10): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (11): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (12): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (13): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (14): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (15): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (16): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (17): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (18): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (19): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (20): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (21): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (22): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (23): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (24): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (25): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (26): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (27): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (28): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (29): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (30): Upsampler(
          (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): PixelShuffle(upscale_factor=2)
        )
        (31): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): Sequential(
        (0): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (1): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (2): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (3): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (4): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (5): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (6): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (7): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (8): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (9): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (10): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (11): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (12): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (13): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (14): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (15): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (16): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (17): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (18): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (19): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (20): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (21): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (22): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (23): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (24): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (25): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (26): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (27): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (28): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (29): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (30): Upsampler(
          (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): PixelShuffle(upscale_factor=2)
        )
        (31): Conv2d(64, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): Sequential(
        (0): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (1): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (2): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (3): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (4): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (5): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (6): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (7): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (8): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (9): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (10): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (11): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (12): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (13): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (14): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (15): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (16): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (17): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (18): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (19): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (20): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (21): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (22): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (23): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (24): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (25): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (26): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (27): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (28): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (29): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (30): Upsampler(
          (0): Conv2d(32, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): PixelShuffle(upscale_factor=2)
        )
        (31): Conv2d(32, 8, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (tail): ModuleList(
      (0): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (2): Conv2d(32, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  )
)
[DataParallel(
  (module): DownBlock(
    (dual_module): Sequential(
      (0): Sequential(
        (0): Conv2d(3, 8, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (1): Conv2d(8, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
  )
), DataParallel(
  (module): DownBlock(
    (dual_module): Sequential(
      (0): Sequential(
        (0): Conv2d(3, 8, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (1): Conv2d(8, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
  )
), DataParallel(
  (module): DownBlock(
    (dual_module): Sequential(
      (0): Sequential(
        (0): Conv2d(3, 8, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (1): Conv2d(8, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
  )
)]
The number of parameters is 5.40M
[Epoch 1]	Learning rate: 1.00e-4
DataParallel(
  (module): DRN(
    (upsample): Upsample(scale_factor=8.0, mode=bicubic)
    (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
    (head): Conv2d(3, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (down): ModuleList(
      (0): DownBlock(
        (dual_module): Sequential(
          (0): Sequential(
            (0): Conv2d(8, 8, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (1): LeakyReLU(negative_slope=0.2, inplace=True)
          )
          (1): Conv2d(8, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
      )
      (1): DownBlock(
        (dual_module): Sequential(
          (0): Sequential(
            (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (1): LeakyReLU(negative_slope=0.2, inplace=True)
          )
          (1): Conv2d(16, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
      )
      (2): DownBlock(
        (dual_module): Sequential(
          (0): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (1): LeakyReLU(negative_slope=0.2, inplace=True)
          )
          (1): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
      )
    )
    (up_blocks): ModuleList(
      (0): Sequential(
        (0): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (1): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (2): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (3): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (4): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (5): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (6): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (7): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (8): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (9): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (10): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (11): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (12): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (13): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (14): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (15): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (16): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (17): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (18): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (19): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (20): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (21): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (22): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (23): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (24): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (25): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (26): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (27): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (28): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (29): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (30): Upsampler(
          (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): PixelShuffle(upscale_factor=2)
        )
        (31): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): Sequential(
        (0): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (1): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (2): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (3): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (4): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (5): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (6): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (7): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (8): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (9): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (10): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (11): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (12): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (13): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (14): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (15): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (16): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (17): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (18): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (19): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (20): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (21): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (22): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (23): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (24): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (25): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (26): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (27): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (28): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (29): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (30): Upsampler(
          (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): PixelShuffle(upscale_factor=2)
        )
        (31): Conv2d(64, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): Sequential(
        (0): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (1): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (2): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (3): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (4): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (5): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (6): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (7): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (8): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (9): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (10): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (11): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (12): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (13): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (14): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (15): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (16): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (17): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (18): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (19): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (20): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (21): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (22): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (23): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (24): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (25): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (26): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (27): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (28): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (29): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (30): Upsampler(
          (0): Conv2d(32, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): PixelShuffle(upscale_factor=2)
        )
        (31): Conv2d(32, 8, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (tail): ModuleList(
      (0): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (2): Conv2d(32, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  )
)
[DataParallel(
  (module): DownBlock(
    (dual_module): Sequential(
      (0): Sequential(
        (0): Conv2d(3, 8, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (1): Conv2d(8, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
  )
), DataParallel(
  (module): DownBlock(
    (dual_module): Sequential(
      (0): Sequential(
        (0): Conv2d(3, 8, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (1): Conv2d(8, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
  )
), DataParallel(
  (module): DownBlock(
    (dual_module): Sequential(
      (0): Sequential(
        (0): Conv2d(3, 8, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (1): Conv2d(8, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
  )
)]
The number of parameters is 5.40M
[Epoch 1]	Learning rate: 1.00e-4
DataParallel(
  (module): DRN(
    (upsample): Upsample(scale_factor=8.0, mode=bicubic)
    (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
    (head): Conv2d(3, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (down): ModuleList(
      (0): DownBlock(
        (dual_module): Sequential(
          (0): Sequential(
            (0): Conv2d(8, 8, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (1): LeakyReLU(negative_slope=0.2, inplace=True)
          )
          (1): Conv2d(8, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
      )
      (1): DownBlock(
        (dual_module): Sequential(
          (0): Sequential(
            (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (1): LeakyReLU(negative_slope=0.2, inplace=True)
          )
          (1): Conv2d(16, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
      )
      (2): DownBlock(
        (dual_module): Sequential(
          (0): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (1): LeakyReLU(negative_slope=0.2, inplace=True)
          )
          (1): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
      )
    )
    (up_blocks): ModuleList(
      (0): Sequential(
        (0): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (1): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (2): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (3): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (4): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (5): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (6): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (7): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (8): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (9): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (10): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (11): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (12): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (13): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (14): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (15): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (16): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (17): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (18): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (19): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (20): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (21): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (22): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (23): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (24): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (25): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (26): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (27): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (28): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (29): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (30): Upsampler(
          (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): PixelShuffle(upscale_factor=2)
        )
        (31): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): Sequential(
        (0): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (1): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (2): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (3): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (4): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (5): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (6): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (7): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (8): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (9): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (10): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (11): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (12): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (13): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (14): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (15): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (16): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (17): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (18): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (19): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (20): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (21): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (22): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (23): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (24): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (25): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (26): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (27): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (28): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (29): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (30): Upsampler(
          (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): PixelShuffle(upscale_factor=2)
        )
        (31): Conv2d(64, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): Sequential(
        (0): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (1): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (2): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (3): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (4): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (5): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (6): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (7): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (8): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (9): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (10): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (11): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (12): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (13): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (14): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (15): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (16): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (17): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (18): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (19): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (20): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (21): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (22): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (23): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (24): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (25): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (26): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (27): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (28): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (29): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (30): Upsampler(
          (0): Conv2d(32, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): PixelShuffle(upscale_factor=2)
        )
        (31): Conv2d(32, 8, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (tail): ModuleList(
      (0): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (2): Conv2d(32, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  )
)
[DataParallel(
  (module): DownBlock(
    (dual_module): Sequential(
      (0): Sequential(
        (0): Conv2d(3, 8, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (1): Conv2d(8, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
  )
), DataParallel(
  (module): DownBlock(
    (dual_module): Sequential(
      (0): Sequential(
        (0): Conv2d(3, 8, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (1): Conv2d(8, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
  )
), DataParallel(
  (module): DownBlock(
    (dual_module): Sequential(
      (0): Sequential(
        (0): Conv2d(3, 8, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (1): Conv2d(8, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
  )
)]
The number of parameters is 5.40M
[Epoch 1]	Learning rate: 1.00e-4
[1600/3200]	[L1: 490.2238]	100.2+6.1s
DataParallel(
  (module): DRN(
    (upsample): Upsample(scale_factor=8.0, mode=bicubic)
    (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
    (head): Conv2d(3, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (down): ModuleList(
      (0): DownBlock(
        (dual_module): Sequential(
          (0): Sequential(
            (0): Conv2d(8, 8, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (1): LeakyReLU(negative_slope=0.2, inplace=True)
          )
          (1): Conv2d(8, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
      )
      (1): DownBlock(
        (dual_module): Sequential(
          (0): Sequential(
            (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (1): LeakyReLU(negative_slope=0.2, inplace=True)
          )
          (1): Conv2d(16, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
      )
      (2): DownBlock(
        (dual_module): Sequential(
          (0): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (1): LeakyReLU(negative_slope=0.2, inplace=True)
          )
          (1): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
      )
    )
    (up_blocks): ModuleList(
      (0): Sequential(
        (0): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (1): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (2): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (3): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (4): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (5): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (6): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (7): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (8): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (9): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (10): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (11): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (12): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (13): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (14): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (15): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (16): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (17): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (18): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (19): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (20): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (21): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (22): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (23): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (24): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (25): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (26): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (27): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (28): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (29): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (30): Upsampler(
          (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): PixelShuffle(upscale_factor=2)
        )
        (31): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): Sequential(
        (0): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (1): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (2): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (3): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (4): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (5): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (6): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (7): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (8): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (9): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (10): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (11): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (12): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (13): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (14): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (15): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (16): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (17): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (18): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (19): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (20): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (21): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (22): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (23): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (24): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (25): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (26): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (27): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (28): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (29): RCAB(
          (body): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (30): Upsampler(
          (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): PixelShuffle(upscale_factor=2)
        )
        (31): Conv2d(64, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): Sequential(
        (0): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (1): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (2): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (3): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (4): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (5): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (6): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (7): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (8): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (9): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (10): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (11): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (12): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (13): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (14): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (15): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (16): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (17): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (18): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (19): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (20): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (21): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (22): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (23): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (24): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (25): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (26): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (27): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (28): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (29): RCAB(
          (body): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
            (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace=True)
                (2): Conv2d(2, 32, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
          )
        )
        (30): Upsampler(
          (0): Conv2d(32, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): PixelShuffle(upscale_factor=2)
        )
        (31): Conv2d(32, 8, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (tail): ModuleList(
      (0): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (2): Conv2d(32, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  )
)
[DataParallel(
  (module): DownBlock(
    (dual_module): Sequential(
      (0): Sequential(
        (0): Conv2d(3, 8, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (1): Conv2d(8, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
  )
), DataParallel(
  (module): DownBlock(
    (dual_module): Sequential(
      (0): Sequential(
        (0): Conv2d(3, 8, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (1): Conv2d(8, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
  )
), DataParallel(
  (module): DownBlock(
    (dual_module): Sequential(
      (0): Sequential(
        (0): Conv2d(3, 8, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (1): Conv2d(8, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
  )
)]
The number of parameters is 5.40M
[Epoch 1]	Learning rate: 1.00e-4
[1600/1600]	[L1: 493.3842]	102.6+6.2s

Evaluation:
[my_val x8]	PSNR: 17.54 (Best: 17.54 @epoch 1)
Total time: 3.68s

[Epoch 2]	Learning rate: 1.00e-4
[1600/1600]	[L1: 370.1405]	83.2+7.2s

Evaluation:
[my_val x8]	PSNR: 18.37 (Best: 18.37 @epoch 2)
Total time: 3.86s

[Epoch 3]	Learning rate: 1.00e-4
[1600/1600]	[L1: 269.1249]	82.6+7.8s

Evaluation:
[my_val x8]	PSNR: 18.98 (Best: 18.98 @epoch 3)
Total time: 3.69s

[Epoch 4]	Learning rate: 1.00e-4
[1600/1600]	[L1: 212.6335]	81.0+6.5s

Evaluation:
[my_val x8]	PSNR: 19.79 (Best: 19.79 @epoch 4)
Total time: 3.80s

[Epoch 5]	Learning rate: 1.00e-4
[1600/1600]	[L1: 169.7018]	80.0+6.2s

Evaluation:
[my_val x8]	PSNR: 20.20 (Best: 20.20 @epoch 5)
Total time: 3.71s

[Epoch 6]	Learning rate: 1.00e-4
[1600/1600]	[L1: 140.0554]	82.8+6.7s

Evaluation:
[my_val x8]	PSNR: 20.44 (Best: 20.44 @epoch 6)
Total time: 3.75s

[Epoch 7]	Learning rate: 1.00e-4
[1600/1600]	[L1: 128.4505]	81.9+6.4s

Evaluation:
[my_val x8]	PSNR: 20.73 (Best: 20.73 @epoch 7)
Total time: 3.72s

[Epoch 8]	Learning rate: 1.00e-4
[1600/1600]	[L1: 118.7295]	83.3+7.2s

Evaluation:
[my_val x8]	PSNR: 21.11 (Best: 21.11 @epoch 8)
Total time: 3.78s

[Epoch 9]	Learning rate: 1.00e-4
[1600/1600]	[L1: 113.5009]	83.1+6.5s

Evaluation:
[my_val x8]	PSNR: 21.37 (Best: 21.37 @epoch 9)
Total time: 3.77s

[Epoch 10]	Learning rate: 1.00e-4
[1600/1600]	[L1: 109.9651]	82.7+7.2s

Evaluation:
[my_val x8]	PSNR: 21.46 (Best: 21.46 @epoch 10)
Total time: 3.68s

[Epoch 11]	Learning rate: 1.00e-4
[1600/1600]	[L1: 107.9988]	83.2+7.3s

Evaluation:
[my_val x8]	PSNR: 21.55 (Best: 21.55 @epoch 11)
Total time: 3.91s

[Epoch 12]	Learning rate: 1.00e-4
[1600/1600]	[L1: 107.1403]	83.1+7.3s

Evaluation:
[my_val x8]	PSNR: 21.50 (Best: 21.55 @epoch 11)
Total time: 3.80s

[Epoch 13]	Learning rate: 1.00e-4
[1600/1600]	[L1: 102.9843]	82.5+6.3s

Evaluation:
[my_val x8]	PSNR: 21.53 (Best: 21.55 @epoch 11)
Total time: 3.82s

[Epoch 14]	Learning rate: 1.00e-4
[1600/1600]	[L1: 103.2630]	83.3+6.5s

Evaluation:
[my_val x8]	PSNR: 21.55 (Best: 21.55 @epoch 14)
Total time: 3.59s

[Epoch 15]	Learning rate: 9.99e-5
[1600/1600]	[L1: 99.7905]	82.9+7.1s

Evaluation:
[my_val x8]	PSNR: 21.61 (Best: 21.61 @epoch 15)
Total time: 3.71s

[Epoch 16]	Learning rate: 9.99e-5
[1600/1600]	[L1: 96.6038]	81.8+6.7s

Evaluation:
[my_val x8]	PSNR: 21.64 (Best: 21.64 @epoch 16)
Total time: 3.70s

[Epoch 17]	Learning rate: 9.99e-5
[1600/1600]	[L1: 94.7474]	81.7+7.3s

Evaluation:
[my_val x8]	PSNR: 21.57 (Best: 21.64 @epoch 16)
Total time: 3.81s

[Epoch 18]	Learning rate: 9.99e-5
[1600/1600]	[L1: 91.8841]	83.8+7.0s

Evaluation:
[my_val x8]	PSNR: 21.56 (Best: 21.64 @epoch 16)
Total time: 3.76s

[Epoch 19]	Learning rate: 9.99e-5
[1600/1600]	[L1: 90.5927]	83.3+6.7s

Evaluation:
[my_val x8]	PSNR: 21.61 (Best: 21.64 @epoch 16)
Total time: 3.82s

[Epoch 20]	Learning rate: 9.99e-5
[1600/1600]	[L1: 87.3889]	84.3+6.2s

Evaluation:
[my_val x8]	PSNR: 21.58 (Best: 21.64 @epoch 16)
Total time: 3.71s

[Epoch 21]	Learning rate: 9.99e-5
[1600/1600]	[L1: 84.7712]	82.6+7.0s

Evaluation:
[my_val x8]	PSNR: 21.61 (Best: 21.64 @epoch 16)
Total time: 3.84s

[Epoch 22]	Learning rate: 9.99e-5
[1600/1600]	[L1: 81.4749]	82.9+6.5s

Evaluation:
[my_val x8]	PSNR: 21.65 (Best: 21.65 @epoch 22)
Total time: 3.90s

[Epoch 23]	Learning rate: 9.99e-5
[1600/1600]	[L1: 80.1928]	83.2+6.7s

Evaluation:
[my_val x8]	PSNR: 21.61 (Best: 21.65 @epoch 22)
Total time: 3.74s

[Epoch 24]	Learning rate: 9.99e-5
[1600/1600]	[L1: 79.5430]	82.8+7.1s

Evaluation:
[my_val x8]	PSNR: 21.62 (Best: 21.65 @epoch 22)
Total time: 3.69s

[Epoch 25]	Learning rate: 9.98e-5
[1600/1600]	[L1: 76.8743]	83.4+6.8s

Evaluation:
[my_val x8]	PSNR: 21.70 (Best: 21.70 @epoch 25)
Total time: 3.75s

[Epoch 26]	Learning rate: 9.98e-5
[1600/1600]	[L1: 73.2466]	84.2+6.8s

Evaluation:
[my_val x8]	PSNR: 21.68 (Best: 21.70 @epoch 25)
Total time: 3.67s

[Epoch 27]	Learning rate: 9.98e-5
[1600/1600]	[L1: 73.3960]	82.3+7.0s

Evaluation:
[my_val x8]	PSNR: 21.68 (Best: 21.70 @epoch 25)
Total time: 3.69s

[Epoch 28]	Learning rate: 9.98e-5
[1600/1600]	[L1: 71.7184]	82.2+7.1s

Evaluation:
[my_val x8]	PSNR: 21.68 (Best: 21.70 @epoch 25)
Total time: 3.79s

[Epoch 29]	Learning rate: 9.98e-5
[1600/1600]	[L1: 71.5864]	83.6+6.3s

Evaluation:
[my_val x8]	PSNR: 21.65 (Best: 21.70 @epoch 25)
Total time: 3.77s

[Epoch 30]	Learning rate: 9.98e-5
[1600/1600]	[L1: 70.2696]	84.0+6.6s

Evaluation:
[my_val x8]	PSNR: 21.61 (Best: 21.70 @epoch 25)
Total time: 3.63s

[Epoch 31]	Learning rate: 9.98e-5
[1600/1600]	[L1: 68.9142]	84.5+7.1s

Evaluation:
[my_val x8]	PSNR: 21.68 (Best: 21.70 @epoch 25)
Total time: 3.75s

[Epoch 32]	Learning rate: 9.97e-5
[1600/1600]	[L1: 67.9135]	82.5+7.0s

Evaluation:
[my_val x8]	PSNR: 21.62 (Best: 21.70 @epoch 25)
Total time: 3.88s

[Epoch 33]	Learning rate: 9.97e-5
[1600/1600]	[L1: 67.4030]	81.8+6.8s

Evaluation:
[my_val x8]	PSNR: 21.66 (Best: 21.70 @epoch 25)
Total time: 3.85s

[Epoch 34]	Learning rate: 9.97e-5
[1600/1600]	[L1: 66.7210]	83.2+6.4s

Evaluation:
[my_val x8]	PSNR: 21.61 (Best: 21.70 @epoch 25)
Total time: 3.77s

[Epoch 35]	Learning rate: 9.97e-5
[1600/1600]	[L1: 65.7616]	83.9+7.0s

Evaluation:
[my_val x8]	PSNR: 21.65 (Best: 21.70 @epoch 25)
Total time: 3.81s

[Epoch 36]	Learning rate: 9.97e-5
[1600/1600]	[L1: 66.0185]	83.3+6.6s

Evaluation:
[my_val x8]	PSNR: 21.63 (Best: 21.70 @epoch 25)
Total time: 3.79s

[Epoch 37]	Learning rate: 9.97e-5
[1600/1600]	[L1: 66.2726]	83.6+7.5s

Evaluation:
[my_val x8]	PSNR: 21.70 (Best: 21.70 @epoch 37)
Total time: 3.75s

[Epoch 38]	Learning rate: 9.96e-5
[1600/1600]	[L1: 65.7105]	83.6+6.5s

Evaluation:
[my_val x8]	PSNR: 21.66 (Best: 21.70 @epoch 37)
Total time: 3.68s

[Epoch 39]	Learning rate: 9.96e-5
[1600/1600]	[L1: 64.6799]	84.6+6.6s

Evaluation:
[my_val x8]	PSNR: 21.77 (Best: 21.77 @epoch 39)
Total time: 3.73s

[Epoch 40]	Learning rate: 9.96e-5
[1600/1600]	[L1: 63.3546]	82.0+6.7s

Evaluation:
[my_val x8]	PSNR: 21.63 (Best: 21.77 @epoch 39)
Total time: 3.73s

[Epoch 41]	Learning rate: 9.96e-5
[1600/1600]	[L1: 63.0590]	82.9+6.9s

Evaluation:
[my_val x8]	PSNR: 21.61 (Best: 21.77 @epoch 39)
Total time: 3.82s

[Epoch 42]	Learning rate: 9.96e-5
[1600/1600]	[L1: 62.7436]	83.6+7.3s

Evaluation:
[my_val x8]	PSNR: 21.68 (Best: 21.77 @epoch 39)
Total time: 3.84s

[Epoch 43]	Learning rate: 9.95e-5
[1600/1600]	[L1: 61.3227]	83.3+6.7s

Evaluation:
[my_val x8]	PSNR: 21.70 (Best: 21.77 @epoch 39)
Total time: 3.77s

[Epoch 44]	Learning rate: 9.95e-5
[1600/1600]	[L1: 61.0951]	82.2+6.7s

Evaluation:
[my_val x8]	PSNR: 21.63 (Best: 21.77 @epoch 39)
Total time: 3.86s

[Epoch 45]	Learning rate: 9.95e-5
[1600/1600]	[L1: 60.6677]	83.3+6.9s

Evaluation:
[my_val x8]	PSNR: 21.71 (Best: 21.77 @epoch 39)
Total time: 3.89s

[Epoch 46]	Learning rate: 9.95e-5
[1600/1600]	[L1: 61.1616]	82.1+7.2s

Evaluation:
[my_val x8]	PSNR: 21.62 (Best: 21.77 @epoch 39)
Total time: 3.68s

[Epoch 47]	Learning rate: 9.95e-5
[1600/1600]	[L1: 59.7591]	83.4+6.8s

Evaluation:
[my_val x8]	PSNR: 21.66 (Best: 21.77 @epoch 39)
Total time: 3.80s

[Epoch 48]	Learning rate: 9.94e-5
[1600/1600]	[L1: 60.7659]	83.9+6.7s

Evaluation:
[my_val x8]	PSNR: 21.70 (Best: 21.77 @epoch 39)
Total time: 3.72s

[Epoch 49]	Learning rate: 9.94e-5
[1600/1600]	[L1: 59.7875]	85.1+6.9s

Evaluation:
[my_val x8]	PSNR: 21.64 (Best: 21.77 @epoch 39)
Total time: 3.83s

[Epoch 50]	Learning rate: 9.94e-5
[1600/1600]	[L1: 58.7446]	83.0+6.4s

Evaluation:
[my_val x8]	PSNR: 21.68 (Best: 21.77 @epoch 39)
Total time: 3.79s

[Epoch 51]	Learning rate: 9.94e-5
[1600/1600]	[L1: 58.6094]	83.0+7.7s

Evaluation:
[my_val x8]	PSNR: 21.65 (Best: 21.77 @epoch 39)
Total time: 3.77s

[Epoch 52]	Learning rate: 9.93e-5
[1600/1600]	[L1: 58.4786]	83.4+6.9s

Evaluation:
[my_val x8]	PSNR: 21.67 (Best: 21.77 @epoch 39)
Total time: 3.80s

[Epoch 53]	Learning rate: 9.93e-5
[1600/1600]	[L1: 58.4622]	83.8+6.9s

Evaluation:
[my_val x8]	PSNR: 21.73 (Best: 21.77 @epoch 39)
Total time: 3.73s

[Epoch 54]	Learning rate: 9.93e-5
[1600/1600]	[L1: 56.8029]	83.0+6.5s

Evaluation:
[my_val x8]	PSNR: 21.69 (Best: 21.77 @epoch 39)
Total time: 3.77s

[Epoch 55]	Learning rate: 9.93e-5
[1600/1600]	[L1: 58.0121]	82.6+6.2s

Evaluation:
[my_val x8]	PSNR: 21.68 (Best: 21.77 @epoch 39)
Total time: 3.83s

[Epoch 56]	Learning rate: 9.92e-5
[1600/1600]	[L1: 56.9290]	82.6+6.8s

Evaluation:
[my_val x8]	PSNR: 21.67 (Best: 21.77 @epoch 39)
Total time: 3.88s

[Epoch 57]	Learning rate: 9.92e-5
[1600/1600]	[L1: 57.0788]	83.1+6.4s

Evaluation:
[my_val x8]	PSNR: 21.68 (Best: 21.77 @epoch 39)
Total time: 3.84s

[Epoch 58]	Learning rate: 9.92e-5
[1600/1600]	[L1: 56.7792]	82.2+6.9s

Evaluation:
[my_val x8]	PSNR: 21.67 (Best: 21.77 @epoch 39)
Total time: 3.82s

[Epoch 59]	Learning rate: 9.91e-5
[1600/1600]	[L1: 56.7218]	79.0+7.1s

Evaluation:
[my_val x8]	PSNR: 21.66 (Best: 21.77 @epoch 39)
Total time: 3.73s

[Epoch 60]	Learning rate: 9.91e-5
[1600/1600]	[L1: 56.5750]	84.0+6.7s

Evaluation:
[my_val x8]	PSNR: 21.64 (Best: 21.77 @epoch 39)
Total time: 3.64s

[Epoch 61]	Learning rate: 9.91e-5
[1600/1600]	[L1: 55.4934]	82.5+6.8s

Evaluation:
[my_val x8]	PSNR: 21.76 (Best: 21.77 @epoch 39)
Total time: 3.77s

[Epoch 62]	Learning rate: 9.91e-5
[1600/1600]	[L1: 54.5255]	83.4+6.1s

Evaluation:
[my_val x8]	PSNR: 21.67 (Best: 21.77 @epoch 39)
Total time: 3.73s

[Epoch 63]	Learning rate: 9.90e-5
[1600/1600]	[L1: 55.0016]	82.2+6.8s

Evaluation:
[my_val x8]	PSNR: 21.59 (Best: 21.77 @epoch 39)
Total time: 3.76s

[Epoch 64]	Learning rate: 9.90e-5
[1600/1600]	[L1: 54.2568]	83.6+6.8s

Evaluation:
[my_val x8]	PSNR: 21.66 (Best: 21.77 @epoch 39)
Total time: 3.74s

[Epoch 65]	Learning rate: 9.90e-5
[1600/1600]	[L1: 54.3810]	83.0+7.1s

Evaluation:
[my_val x8]	PSNR: 21.66 (Best: 21.77 @epoch 39)
Total time: 3.74s

[Epoch 66]	Learning rate: 9.89e-5
[1600/1600]	[L1: 54.6563]	81.2+6.4s

Evaluation:
[my_val x8]	PSNR: 21.51 (Best: 21.77 @epoch 39)
Total time: 3.76s

[Epoch 67]	Learning rate: 9.89e-5
[1600/1600]	[L1: 54.4323]	82.8+6.4s

Evaluation:
[my_val x8]	PSNR: 21.57 (Best: 21.77 @epoch 39)
Total time: 3.84s

[Epoch 68]	Learning rate: 9.89e-5
[1600/1600]	[L1: 53.9505]	82.7+6.8s

Evaluation:
[my_val x8]	PSNR: 21.72 (Best: 21.77 @epoch 39)
Total time: 3.80s

[Epoch 69]	Learning rate: 9.88e-5
[1600/1600]	[L1: 53.4227]	82.6+6.5s

Evaluation:
[my_val x8]	PSNR: 21.65 (Best: 21.77 @epoch 39)
Total time: 3.79s

[Epoch 70]	Learning rate: 9.88e-5
[1600/1600]	[L1: 54.0690]	83.7+6.5s

Evaluation:
[my_val x8]	PSNR: 21.73 (Best: 21.77 @epoch 39)
Total time: 3.73s

[Epoch 71]	Learning rate: 9.88e-5
[1600/1600]	[L1: 54.0651]	83.7+6.6s

Evaluation:
[my_val x8]	PSNR: 21.72 (Best: 21.77 @epoch 39)
Total time: 3.73s

[Epoch 72]	Learning rate: 9.87e-5
[1600/1600]	[L1: 52.9711]	81.4+6.2s

Evaluation:
[my_val x8]	PSNR: 21.55 (Best: 21.77 @epoch 39)
Total time: 3.81s

[Epoch 73]	Learning rate: 9.87e-5
[1600/1600]	[L1: 52.8037]	83.2+6.4s

Evaluation:
[my_val x8]	PSNR: 21.73 (Best: 21.77 @epoch 39)
Total time: 3.79s

[Epoch 74]	Learning rate: 9.87e-5
[1600/1600]	[L1: 52.8826]	83.3+6.7s

Evaluation:
[my_val x8]	PSNR: 21.67 (Best: 21.77 @epoch 39)
Total time: 3.73s

[Epoch 75]	Learning rate: 9.86e-5
[1600/1600]	[L1: 53.5967]	82.8+6.1s

Evaluation:
[my_val x8]	PSNR: 21.69 (Best: 21.77 @epoch 39)
Total time: 3.78s

[Epoch 76]	Learning rate: 9.86e-5
[1600/1600]	[L1: 53.5597]	82.2+6.4s

Evaluation:
[my_val x8]	PSNR: 21.62 (Best: 21.77 @epoch 39)
Total time: 3.77s

[Epoch 77]	Learning rate: 9.85e-5
[1600/1600]	[L1: 53.7723]	82.8+6.5s

Evaluation:
[my_val x8]	PSNR: 21.64 (Best: 21.77 @epoch 39)
Total time: 3.58s

[Epoch 78]	Learning rate: 9.85e-5
[1600/1600]	[L1: 52.3248]	83.4+6.3s

Evaluation:
[my_val x8]	PSNR: 21.73 (Best: 21.77 @epoch 39)
Total time: 3.79s

[Epoch 79]	Learning rate: 9.85e-5
[1600/1600]	[L1: 53.0853]	83.5+6.6s

Evaluation:
[my_val x8]	PSNR: 21.69 (Best: 21.77 @epoch 39)
Total time: 3.79s

[Epoch 80]	Learning rate: 9.84e-5
[1600/1600]	[L1: 52.9615]	82.9+6.3s

Evaluation:
[my_val x8]	PSNR: 21.72 (Best: 21.77 @epoch 39)
Total time: 3.79s

[Epoch 81]	Learning rate: 9.84e-5
[1600/1600]	[L1: 52.3226]	80.4+7.2s

Evaluation:
[my_val x8]	PSNR: 21.80 (Best: 21.80 @epoch 81)
Total time: 3.76s

[Epoch 82]	Learning rate: 9.84e-5
[1600/1600]	[L1: 52.4980]	81.4+6.7s

Evaluation:
[my_val x8]	PSNR: 21.75 (Best: 21.80 @epoch 81)
Total time: 3.78s

[Epoch 83]	Learning rate: 9.83e-5
[1600/1600]	[L1: 52.6882]	82.7+6.7s

Evaluation:
[my_val x8]	PSNR: 21.73 (Best: 21.80 @epoch 81)
Total time: 3.80s

[Epoch 84]	Learning rate: 9.83e-5
[1600/1600]	[L1: 51.7458]	83.4+6.2s

Evaluation:
[my_val x8]	PSNR: 21.65 (Best: 21.80 @epoch 81)
Total time: 3.86s

[Epoch 85]	Learning rate: 9.82e-5
[1600/1600]	[L1: 52.5260]	83.8+6.3s

Evaluation:
[my_val x8]	PSNR: 21.60 (Best: 21.80 @epoch 81)
Total time: 3.76s

[Epoch 86]	Learning rate: 9.82e-5
[1600/1600]	[L1: 51.6811]	82.7+6.9s

Evaluation:
[my_val x8]	PSNR: 21.77 (Best: 21.80 @epoch 81)
Total time: 3.86s

[Epoch 87]	Learning rate: 9.81e-5
[1600/1600]	[L1: 51.3637]	83.3+6.8s

Evaluation:
[my_val x8]	PSNR: 21.63 (Best: 21.80 @epoch 81)
Total time: 3.78s

[Epoch 88]	Learning rate: 9.81e-5
[1600/1600]	[L1: 52.3774]	83.7+6.7s

Evaluation:
[my_val x8]	PSNR: 21.57 (Best: 21.80 @epoch 81)
Total time: 3.74s

[Epoch 89]	Learning rate: 9.81e-5
[1600/1600]	[L1: 52.4996]	83.4+6.8s

Evaluation:
[my_val x8]	PSNR: 21.66 (Best: 21.80 @epoch 81)
Total time: 3.78s

[Epoch 90]	Learning rate: 9.80e-5
[1600/1600]	[L1: 51.7139]	83.0+7.0s

Evaluation:
[my_val x8]	PSNR: 21.69 (Best: 21.80 @epoch 81)
Total time: 3.81s

[Epoch 91]	Learning rate: 9.80e-5
[1600/1600]	[L1: 50.6043]	82.1+6.2s

Evaluation:
[my_val x8]	PSNR: 21.63 (Best: 21.80 @epoch 81)
Total time: 3.70s

[Epoch 92]	Learning rate: 9.79e-5
[1600/1600]	[L1: 52.0512]	83.0+6.8s

Evaluation:
[my_val x8]	PSNR: 21.76 (Best: 21.80 @epoch 81)
Total time: 3.75s

[Epoch 93]	Learning rate: 9.79e-5
[1600/1600]	[L1: 51.1516]	82.6+7.4s

Evaluation:
[my_val x8]	PSNR: 21.65 (Best: 21.80 @epoch 81)
Total time: 3.78s

[Epoch 94]	Learning rate: 9.78e-5
[1600/1600]	[L1: 51.8418]	84.3+6.6s

Evaluation:
[my_val x8]	PSNR: 21.64 (Best: 21.80 @epoch 81)
Total time: 3.78s

[Epoch 95]	Learning rate: 9.78e-5
[1600/1600]	[L1: 51.3829]	83.2+6.6s

Evaluation:
[my_val x8]	PSNR: 21.81 (Best: 21.81 @epoch 95)
Total time: 3.82s

[Epoch 96]	Learning rate: 9.77e-5
[1600/1600]	[L1: 52.1223]	83.5+6.4s

Evaluation:
[my_val x8]	PSNR: 21.69 (Best: 21.81 @epoch 95)
Total time: 3.86s

[Epoch 97]	Learning rate: 9.77e-5
[1600/1600]	[L1: 51.9255]	82.9+6.7s

Evaluation:
[my_val x8]	PSNR: 21.73 (Best: 21.81 @epoch 95)
Total time: 3.72s

[Epoch 98]	Learning rate: 9.77e-5
[1600/1600]	[L1: 51.5901]	82.6+6.7s

Evaluation:
[my_val x8]	PSNR: 21.70 (Best: 21.81 @epoch 95)
Total time: 3.73s

[Epoch 99]	Learning rate: 9.76e-5
[1600/1600]	[L1: 51.1402]	81.6+6.5s

Evaluation:
[my_val x8]	PSNR: 21.60 (Best: 21.81 @epoch 95)
Total time: 3.77s

[Epoch 100]	Learning rate: 9.76e-5
[1600/1600]	[L1: 50.7789]	80.5+7.0s

Evaluation:
[my_val x8]	PSNR: 21.69 (Best: 21.81 @epoch 95)
Total time: 3.80s

[Epoch 101]	Learning rate: 9.75e-5
[1600/1600]	[L1: 51.0110]	82.6+7.0s

Evaluation:
[my_val x8]	PSNR: 21.64 (Best: 21.81 @epoch 95)
Total time: 3.77s

[Epoch 102]	Learning rate: 9.75e-5
[1600/1600]	[L1: 50.5284]	81.7+7.3s

Evaluation:
[my_val x8]	PSNR: 21.67 (Best: 21.81 @epoch 95)
Total time: 3.71s

[Epoch 103]	Learning rate: 9.74e-5
[1600/1600]	[L1: 50.8455]	83.6+7.0s

Evaluation:
[my_val x8]	PSNR: 21.62 (Best: 21.81 @epoch 95)
Total time: 3.84s

[Epoch 104]	Learning rate: 9.74e-5
[1600/1600]	[L1: 50.5600]	79.9+8.0s

Evaluation:
[my_val x8]	PSNR: 21.60 (Best: 21.81 @epoch 95)
Total time: 3.83s

[Epoch 105]	Learning rate: 9.73e-5
[1600/1600]	[L1: 51.4234]	81.0+6.8s

Evaluation:
[my_val x8]	PSNR: 21.78 (Best: 21.81 @epoch 95)
Total time: 3.80s

[Epoch 106]	Learning rate: 9.73e-5
[1600/1600]	[L1: 50.3868]	81.4+6.9s

Evaluation:
[my_val x8]	PSNR: 21.74 (Best: 21.81 @epoch 95)
Total time: 3.75s

[Epoch 107]	Learning rate: 9.72e-5
[1600/1600]	[L1: 50.5288]	80.8+6.3s

Evaluation:
[my_val x8]	PSNR: 21.76 (Best: 21.81 @epoch 95)
Total time: 3.75s

[Epoch 108]	Learning rate: 9.72e-5
[1600/1600]	[L1: 49.1521]	82.5+6.4s

Evaluation:
[my_val x8]	PSNR: 21.66 (Best: 21.81 @epoch 95)
Total time: 3.82s

[Epoch 109]	Learning rate: 9.71e-5
[1600/1600]	[L1: 49.2696]	82.4+7.1s

Evaluation:
[my_val x8]	PSNR: 21.65 (Best: 21.81 @epoch 95)
Total time: 3.69s

[Epoch 110]	Learning rate: 9.70e-5
[1600/1600]	[L1: 51.3515]	82.6+6.7s

Evaluation:
[my_val x8]	PSNR: 21.73 (Best: 21.81 @epoch 95)
Total time: 3.78s

[Epoch 111]	Learning rate: 9.70e-5
[1600/1600]	[L1: 50.9376]	83.4+6.5s

Evaluation:
[my_val x8]	PSNR: 21.59 (Best: 21.81 @epoch 95)
Total time: 3.97s

[Epoch 112]	Learning rate: 9.69e-5
[1600/1600]	[L1: 50.5128]	82.0+7.2s

Evaluation:
[my_val x8]	PSNR: 21.61 (Best: 21.81 @epoch 95)
Total time: 3.92s

[Epoch 113]	Learning rate: 9.69e-5
[1600/1600]	[L1: 50.1501]	83.0+6.5s

Evaluation:
[my_val x8]	PSNR: 21.65 (Best: 21.81 @epoch 95)
Total time: 3.80s

[Epoch 114]	Learning rate: 9.68e-5
[1600/1600]	[L1: 50.1785]	84.4+6.9s

Evaluation:
[my_val x8]	PSNR: 21.56 (Best: 21.81 @epoch 95)
Total time: 3.72s

[Epoch 115]	Learning rate: 9.68e-5
[1600/1600]	[L1: 50.3672]	82.6+7.1s

Evaluation:
[my_val x8]	PSNR: 21.62 (Best: 21.81 @epoch 95)
Total time: 3.74s

[Epoch 116]	Learning rate: 9.67e-5
[1600/1600]	[L1: 49.4795]	84.1+6.1s

Evaluation:
[my_val x8]	PSNR: 21.67 (Best: 21.81 @epoch 95)
Total time: 3.61s

[Epoch 117]	Learning rate: 9.67e-5
[1600/1600]	[L1: 49.8558]	81.9+6.3s

Evaluation:
[my_val x8]	PSNR: 21.63 (Best: 21.81 @epoch 95)
Total time: 3.64s

[Epoch 118]	Learning rate: 9.66e-5
[1600/1600]	[L1: 50.2038]	82.6+6.5s

Evaluation:
[my_val x8]	PSNR: 21.74 (Best: 21.81 @epoch 95)
Total time: 3.76s

[Epoch 119]	Learning rate: 9.66e-5
[1600/1600]	[L1: 49.0361]	82.1+6.7s

Evaluation:
[my_val x8]	PSNR: 21.63 (Best: 21.81 @epoch 95)
Total time: 3.76s

[Epoch 120]	Learning rate: 9.65e-5
[1600/1600]	[L1: 50.1210]	82.0+7.1s

Evaluation:
[my_val x8]	PSNR: 21.67 (Best: 21.81 @epoch 95)
Total time: 3.79s

[Epoch 121]	Learning rate: 9.64e-5
[1600/1600]	[L1: 49.6836]	82.2+6.2s

Evaluation:
[my_val x8]	PSNR: 21.51 (Best: 21.81 @epoch 95)
Total time: 3.85s

[Epoch 122]	Learning rate: 9.64e-5
[1600/1600]	[L1: 50.4334]	82.4+6.3s

Evaluation:
[my_val x8]	PSNR: 21.66 (Best: 21.81 @epoch 95)
Total time: 3.67s

[Epoch 123]	Learning rate: 9.63e-5
[1600/1600]	[L1: 49.9350]	83.1+6.7s

Evaluation:
[my_val x8]	PSNR: 21.57 (Best: 21.81 @epoch 95)
Total time: 3.96s

[Epoch 124]	Learning rate: 9.63e-5
[1600/1600]	[L1: 49.0304]	84.3+6.6s

Evaluation:
[my_val x8]	PSNR: 21.69 (Best: 21.81 @epoch 95)
Total time: 3.79s

[Epoch 125]	Learning rate: 9.62e-5
[1600/1600]	[L1: 50.0104]	83.3+7.0s

Evaluation:
[my_val x8]	PSNR: 21.69 (Best: 21.81 @epoch 95)
Total time: 3.80s

[Epoch 126]	Learning rate: 9.61e-5
[1600/1600]	[L1: 49.9175]	83.5+6.8s

Evaluation:
[my_val x8]	PSNR: 21.73 (Best: 21.81 @epoch 95)
Total time: 3.76s

[Epoch 127]	Learning rate: 9.61e-5
[1600/1600]	[L1: 49.7049]	83.7+6.4s

Evaluation:
[my_val x8]	PSNR: 21.62 (Best: 21.81 @epoch 95)
Total time: 3.75s

[Epoch 128]	Learning rate: 9.60e-5
[1600/1600]	[L1: 49.9811]	83.1+6.8s

Evaluation:
[my_val x8]	PSNR: 21.68 (Best: 21.81 @epoch 95)
Total time: 3.69s

[Epoch 129]	Learning rate: 9.60e-5
[1600/1600]	[L1: 49.3550]	83.7+6.8s

Evaluation:
[my_val x8]	PSNR: 21.57 (Best: 21.81 @epoch 95)
Total time: 3.61s

[Epoch 130]	Learning rate: 9.59e-5
[1600/1600]	[L1: 49.7476]	82.9+6.9s

Evaluation:
[my_val x8]	PSNR: 21.87 (Best: 21.87 @epoch 130)
Total time: 3.83s

[Epoch 131]	Learning rate: 9.58e-5
[1600/1600]	[L1: 48.5038]	83.6+6.8s

Evaluation:
[my_val x8]	PSNR: 21.66 (Best: 21.87 @epoch 130)
Total time: 3.79s

[Epoch 132]	Learning rate: 9.58e-5
[1600/1600]	[L1: 49.3123]	82.7+6.5s

Evaluation:
[my_val x8]	PSNR: 21.79 (Best: 21.87 @epoch 130)
Total time: 3.74s

[Epoch 133]	Learning rate: 9.57e-5
[1600/1600]	[L1: 49.2402]	82.4+6.8s

Evaluation:
[my_val x8]	PSNR: 21.77 (Best: 21.87 @epoch 130)
Total time: 3.75s

[Epoch 134]	Learning rate: 9.56e-5
[1600/1600]	[L1: 48.5257]	83.4+6.5s

Evaluation:
[my_val x8]	PSNR: 21.72 (Best: 21.87 @epoch 130)
Total time: 3.82s

[Epoch 135]	Learning rate: 9.56e-5
[1600/1600]	[L1: 48.9682]	82.5+7.8s

Evaluation:
[my_val x8]	PSNR: 21.73 (Best: 21.87 @epoch 130)
Total time: 3.71s

[Epoch 136]	Learning rate: 9.55e-5
[1600/1600]	[L1: 49.9719]	83.0+6.5s

Evaluation:
[my_val x8]	PSNR: 21.77 (Best: 21.87 @epoch 130)
Total time: 3.74s

[Epoch 137]	Learning rate: 9.54e-5
[1600/1600]	[L1: 48.3009]	82.7+6.8s

Evaluation:
[my_val x8]	PSNR: 21.75 (Best: 21.87 @epoch 130)
Total time: 3.78s

[Epoch 138]	Learning rate: 9.54e-5
[1600/1600]	[L1: 49.0855]	82.1+6.4s

Evaluation:
[my_val x8]	PSNR: 21.71 (Best: 21.87 @epoch 130)
Total time: 3.77s

[Epoch 139]	Learning rate: 9.53e-5
[1600/1600]	[L1: 48.4233]	84.1+6.6s

Evaluation:
[my_val x8]	PSNR: 21.69 (Best: 21.87 @epoch 130)
Total time: 3.71s

[Epoch 140]	Learning rate: 9.52e-5
[1600/1600]	[L1: 48.7101]	82.9+6.7s

Evaluation:
[my_val x8]	PSNR: 21.70 (Best: 21.87 @epoch 130)
Total time: 3.66s

[Epoch 141]	Learning rate: 9.52e-5
[1600/1600]	[L1: 48.9763]	82.5+6.7s

Evaluation:
[my_val x8]	PSNR: 21.74 (Best: 21.87 @epoch 130)
Total time: 3.75s

[Epoch 142]	Learning rate: 9.51e-5
[1600/1600]	[L1: 49.0958]	82.9+7.0s

Evaluation:
[my_val x8]	PSNR: 21.55 (Best: 21.87 @epoch 130)
Total time: 3.73s

[Epoch 143]	Learning rate: 9.50e-5
[1600/1600]	[L1: 49.1358]	82.6+6.6s

Evaluation:
[my_val x8]	PSNR: 21.59 (Best: 21.87 @epoch 130)
Total time: 3.64s

[Epoch 144]	Learning rate: 9.50e-5
[1600/1600]	[L1: 49.2772]	83.7+6.4s

Evaluation:
[my_val x8]	PSNR: 21.68 (Best: 21.87 @epoch 130)
Total time: 3.66s

[Epoch 145]	Learning rate: 9.49e-5
[1600/1600]	[L1: 49.3915]	83.5+6.3s

Evaluation:
[my_val x8]	PSNR: 21.59 (Best: 21.87 @epoch 130)
Total time: 3.88s

[Epoch 146]	Learning rate: 9.48e-5
[1600/1600]	[L1: 49.2858]	83.9+7.2s

Evaluation:
[my_val x8]	PSNR: 21.64 (Best: 21.87 @epoch 130)
Total time: 3.87s

[Epoch 147]	Learning rate: 9.48e-5
[1600/1600]	[L1: 49.7629]	83.9+6.9s

Evaluation:
[my_val x8]	PSNR: 21.64 (Best: 21.87 @epoch 130)
Total time: 3.59s

[Epoch 148]	Learning rate: 9.47e-5
[1600/1600]	[L1: 48.4445]	82.8+6.7s

Evaluation:
[my_val x8]	PSNR: 21.73 (Best: 21.87 @epoch 130)
Total time: 3.73s

[Epoch 149]	Learning rate: 9.46e-5
[1600/1600]	[L1: 48.9626]	83.2+7.1s

Evaluation:
[my_val x8]	PSNR: 21.66 (Best: 21.87 @epoch 130)
Total time: 3.81s

[Epoch 150]	Learning rate: 9.46e-5
[1600/1600]	[L1: 47.2654]	83.8+6.9s

Evaluation:
[my_val x8]	PSNR: 21.75 (Best: 21.87 @epoch 130)
Total time: 3.74s

[Epoch 151]	Learning rate: 9.45e-5
[1600/1600]	[L1: 48.3381]	82.9+7.2s

Evaluation:
[my_val x8]	PSNR: 21.63 (Best: 21.87 @epoch 130)
Total time: 3.83s

[Epoch 152]	Learning rate: 9.44e-5
[1600/1600]	[L1: 48.8633]	83.5+6.5s

Evaluation:
[my_val x8]	PSNR: 21.65 (Best: 21.87 @epoch 130)
Total time: 3.75s

[Epoch 153]	Learning rate: 9.43e-5
[1600/1600]	[L1: 48.4000]	84.4+6.6s

Evaluation:
[my_val x8]	PSNR: 21.64 (Best: 21.87 @epoch 130)
Total time: 3.78s

[Epoch 154]	Learning rate: 9.43e-5
[1600/1600]	[L1: 47.7230]	83.5+6.8s

Evaluation:
[my_val x8]	PSNR: 21.61 (Best: 21.87 @epoch 130)
Total time: 3.75s

[Epoch 155]	Learning rate: 9.42e-5
[1600/1600]	[L1: 48.1874]	83.7+6.9s

Evaluation:
[my_val x8]	PSNR: 21.67 (Best: 21.87 @epoch 130)
Total time: 3.68s

[Epoch 156]	Learning rate: 9.41e-5
[1600/1600]	[L1: 48.5917]	83.4+6.9s

Evaluation:
[my_val x8]	PSNR: 21.55 (Best: 21.87 @epoch 130)
Total time: 3.76s

[Epoch 157]	Learning rate: 9.40e-5
[1600/1600]	[L1: 48.3803]	83.3+6.6s

Evaluation:
[my_val x8]	PSNR: 21.76 (Best: 21.87 @epoch 130)
Total time: 3.89s

[Epoch 158]	Learning rate: 9.40e-5
[1600/1600]	[L1: 48.0933]	83.7+6.7s

Evaluation:
[my_val x8]	PSNR: 21.66 (Best: 21.87 @epoch 130)
Total time: 3.78s

[Epoch 159]	Learning rate: 9.39e-5
[1600/1600]	[L1: 48.8029]	81.8+6.9s

Evaluation:
[my_val x8]	PSNR: 21.72 (Best: 21.87 @epoch 130)
Total time: 3.76s

[Epoch 160]	Learning rate: 9.38e-5
[1600/1600]	[L1: 48.1649]	82.9+6.3s

Evaluation:
[my_val x8]	PSNR: 21.68 (Best: 21.87 @epoch 130)
Total time: 3.73s

[Epoch 161]	Learning rate: 9.37e-5
[1600/1600]	[L1: 48.2579]	82.6+7.0s

Evaluation:
[my_val x8]	PSNR: 21.82 (Best: 21.87 @epoch 130)
Total time: 3.76s

[Epoch 162]	Learning rate: 9.37e-5
[1600/1600]	[L1: 48.1560]	83.6+6.5s

Evaluation:
[my_val x8]	PSNR: 21.70 (Best: 21.87 @epoch 130)
Total time: 3.76s

[Epoch 163]	Learning rate: 9.36e-5
[1600/1600]	[L1: 48.2226]	82.6+6.9s

Evaluation:
[my_val x8]	PSNR: 21.65 (Best: 21.87 @epoch 130)
Total time: 3.70s

[Epoch 164]	Learning rate: 9.35e-5
[1600/1600]	[L1: 47.5726]	82.6+6.8s

Evaluation:
[my_val x8]	PSNR: 21.67 (Best: 21.87 @epoch 130)
Total time: 3.71s

[Epoch 165]	Learning rate: 9.34e-5
[1600/1600]	[L1: 47.9136]	83.7+6.9s

Evaluation:
[my_val x8]	PSNR: 21.64 (Best: 21.87 @epoch 130)
Total time: 3.56s

[Epoch 166]	Learning rate: 9.34e-5
[1600/1600]	[L1: 47.6544]	84.0+6.1s

Evaluation:
[my_val x8]	PSNR: 21.63 (Best: 21.87 @epoch 130)
Total time: 3.79s

[Epoch 167]	Learning rate: 9.33e-5
[1600/1600]	[L1: 47.6839]	83.3+6.4s

Evaluation:
[my_val x8]	PSNR: 21.65 (Best: 21.87 @epoch 130)
Total time: 3.80s

[Epoch 168]	Learning rate: 9.32e-5
[1600/1600]	[L1: 47.7834]	82.2+6.4s

Evaluation:
[my_val x8]	PSNR: 21.64 (Best: 21.87 @epoch 130)
Total time: 3.71s

[Epoch 169]	Learning rate: 9.31e-5
[1600/1600]	[L1: 47.4286]	83.0+6.9s

Evaluation:
[my_val x8]	PSNR: 21.84 (Best: 21.87 @epoch 130)
Total time: 3.84s

[Epoch 170]	Learning rate: 9.30e-5
[1600/1600]	[L1: 47.9915]	82.7+6.7s

Evaluation:
[my_val x8]	PSNR: 21.72 (Best: 21.87 @epoch 130)
Total time: 3.89s

[Epoch 171]	Learning rate: 9.30e-5
[1600/1600]	[L1: 48.4722]	83.1+6.8s

Evaluation:
[my_val x8]	PSNR: 21.51 (Best: 21.87 @epoch 130)
Total time: 3.72s

[Epoch 172]	Learning rate: 9.29e-5
[1600/1600]	[L1: 47.1422]	83.8+7.2s

Evaluation:
[my_val x8]	PSNR: 21.78 (Best: 21.87 @epoch 130)
Total time: 3.82s

[Epoch 173]	Learning rate: 9.28e-5
[1600/1600]	[L1: 48.0063]	83.5+6.2s

Evaluation:
[my_val x8]	PSNR: 21.67 (Best: 21.87 @epoch 130)
Total time: 3.64s

[Epoch 174]	Learning rate: 9.27e-5
[1600/1600]	[L1: 47.5051]	83.1+6.0s

Evaluation:
[my_val x8]	PSNR: 21.57 (Best: 21.87 @epoch 130)
Total time: 3.77s

[Epoch 175]	Learning rate: 9.26e-5
[1600/1600]	[L1: 48.4139]	82.6+6.6s

Evaluation:
[my_val x8]	PSNR: 21.64 (Best: 21.87 @epoch 130)
Total time: 3.86s

[Epoch 176]	Learning rate: 9.26e-5
[1600/1600]	[L1: 47.6277]	83.6+7.8s

Evaluation:
[my_val x8]	PSNR: 21.70 (Best: 21.87 @epoch 130)
Total time: 3.70s

[Epoch 177]	Learning rate: 9.25e-5
[1600/1600]	[L1: 47.1645]	82.3+6.2s

Evaluation:
[my_val x8]	PSNR: 21.76 (Best: 21.87 @epoch 130)
Total time: 3.74s

[Epoch 178]	Learning rate: 9.24e-5
[1600/1600]	[L1: 47.9559]	82.9+7.1s

Evaluation:
[my_val x8]	PSNR: 21.74 (Best: 21.87 @epoch 130)
Total time: 3.77s

[Epoch 179]	Learning rate: 9.23e-5
[1600/1600]	[L1: 46.8338]	82.7+6.9s

Evaluation:
[my_val x8]	PSNR: 21.77 (Best: 21.87 @epoch 130)
Total time: 3.81s

[Epoch 180]	Learning rate: 9.22e-5
[1600/1600]	[L1: 48.2149]	80.8+7.1s

Evaluation:
[my_val x8]	PSNR: 21.54 (Best: 21.87 @epoch 130)
Total time: 3.65s

[Epoch 181]	Learning rate: 9.21e-5
[1600/1600]	[L1: 46.9329]	83.7+6.8s

Evaluation:
[my_val x8]	PSNR: 21.66 (Best: 21.87 @epoch 130)
Total time: 3.86s

[Epoch 182]	Learning rate: 9.21e-5
[1600/1600]	[L1: 48.4086]	82.7+6.5s

Evaluation:
[my_val x8]	PSNR: 21.57 (Best: 21.87 @epoch 130)
Total time: 3.91s

[Epoch 183]	Learning rate: 9.20e-5
[1600/1600]	[L1: 47.8539]	83.3+6.5s

Evaluation:
[my_val x8]	PSNR: 21.60 (Best: 21.87 @epoch 130)
Total time: 3.71s

[Epoch 184]	Learning rate: 9.19e-5
[1600/1600]	[L1: 47.7988]	83.4+7.1s

Evaluation:
[my_val x8]	PSNR: 21.72 (Best: 21.87 @epoch 130)
Total time: 3.66s

[Epoch 185]	Learning rate: 9.18e-5
[1600/1600]	[L1: 47.5387]	83.3+6.6s

Evaluation:
[my_val x8]	PSNR: 21.63 (Best: 21.87 @epoch 130)
Total time: 3.87s

[Epoch 186]	Learning rate: 9.17e-5
[1600/1600]	[L1: 47.2764]	83.3+6.7s

Evaluation:
[my_val x8]	PSNR: 21.66 (Best: 21.87 @epoch 130)
Total time: 3.73s

[Epoch 187]	Learning rate: 9.16e-5
[1600/1600]	[L1: 46.6732]	82.0+7.4s

Evaluation:
[my_val x8]	PSNR: 21.68 (Best: 21.87 @epoch 130)
Total time: 3.79s

[Epoch 188]	Learning rate: 9.15e-5
[1600/1600]	[L1: 47.3840]	83.1+6.7s

Evaluation:
[my_val x8]	PSNR: 21.79 (Best: 21.87 @epoch 130)
Total time: 3.71s

[Epoch 189]	Learning rate: 9.15e-5
[1600/1600]	[L1: 47.2622]	83.1+6.5s

Evaluation:
[my_val x8]	PSNR: 21.73 (Best: 21.87 @epoch 130)
Total time: 3.75s

[Epoch 190]	Learning rate: 9.14e-5
[1600/1600]	[L1: 48.3651]	82.5+6.7s

Evaluation:
[my_val x8]	PSNR: 21.56 (Best: 21.87 @epoch 130)
Total time: 3.84s

[Epoch 191]	Learning rate: 9.13e-5
[1600/1600]	[L1: 46.7387]	82.6+7.0s

Evaluation:
[my_val x8]	PSNR: 21.70 (Best: 21.87 @epoch 130)
Total time: 3.88s

[Epoch 192]	Learning rate: 9.12e-5
[1600/1600]	[L1: 46.4983]	82.9+6.6s

Evaluation:
[my_val x8]	PSNR: 21.77 (Best: 21.87 @epoch 130)
Total time: 3.99s

[Epoch 193]	Learning rate: 9.11e-5
[1600/1600]	[L1: 47.0398]	82.2+6.7s

Evaluation:
[my_val x8]	PSNR: 21.75 (Best: 21.87 @epoch 130)
Total time: 3.77s

[Epoch 194]	Learning rate: 9.10e-5
[1600/1600]	[L1: 46.3598]	82.7+6.3s

Evaluation:
[my_val x8]	PSNR: 21.85 (Best: 21.87 @epoch 130)
Total time: 3.75s

[Epoch 195]	Learning rate: 9.09e-5
[1600/1600]	[L1: 46.7024]	82.3+7.2s

Evaluation:
[my_val x8]	PSNR: 21.61 (Best: 21.87 @epoch 130)
Total time: 3.77s

[Epoch 196]	Learning rate: 9.08e-5
[1600/1600]	[L1: 47.2073]	83.4+6.4s

Evaluation:
[my_val x8]	PSNR: 21.69 (Best: 21.87 @epoch 130)
Total time: 3.80s

[Epoch 197]	Learning rate: 9.07e-5
[1600/1600]	[L1: 47.7000]	82.3+6.9s

Evaluation:
[my_val x8]	PSNR: 21.62 (Best: 21.87 @epoch 130)
Total time: 3.76s

[Epoch 198]	Learning rate: 9.06e-5
[1600/1600]	[L1: 47.4338]	83.6+7.0s

Evaluation:
[my_val x8]	PSNR: 21.76 (Best: 21.87 @epoch 130)
Total time: 3.68s

[Epoch 199]	Learning rate: 9.06e-5
[1600/1600]	[L1: 46.9999]	83.9+6.8s

Evaluation:
[my_val x8]	PSNR: 21.65 (Best: 21.87 @epoch 130)
Total time: 3.68s

[Epoch 200]	Learning rate: 9.05e-5
[1600/1600]	[L1: 47.0488]	83.7+6.9s

Evaluation:
[my_val x8]	PSNR: 21.73 (Best: 21.87 @epoch 130)
Total time: 3.78s

[Epoch 201]	Learning rate: 9.04e-5
[1600/1600]	[L1: 46.4101]	82.2+6.7s

Evaluation:
[my_val x8]	PSNR: 21.72 (Best: 21.87 @epoch 130)
Total time: 3.83s

[Epoch 202]	Learning rate: 9.03e-5
[1600/1600]	[L1: 46.5406]	83.9+6.9s

Evaluation:
[my_val x8]	PSNR: 21.63 (Best: 21.87 @epoch 130)
Total time: 3.82s

[Epoch 203]	Learning rate: 9.02e-5
[1600/1600]	[L1: 46.9550]	82.6+6.6s

Evaluation:
[my_val x8]	PSNR: 21.70 (Best: 21.87 @epoch 130)
Total time: 3.69s

[Epoch 204]	Learning rate: 9.01e-5
[1600/1600]	[L1: 46.3618]	83.0+7.2s

Evaluation:
[my_val x8]	PSNR: 21.78 (Best: 21.87 @epoch 130)
Total time: 3.76s

[Epoch 205]	Learning rate: 9.00e-5
[1600/1600]	[L1: 46.7220]	83.6+6.4s

Evaluation:
[my_val x8]	PSNR: 21.75 (Best: 21.87 @epoch 130)
Total time: 3.76s

[Epoch 206]	Learning rate: 8.99e-5
[1600/1600]	[L1: 47.7194]	82.6+6.2s

Evaluation:
[my_val x8]	PSNR: 21.64 (Best: 21.87 @epoch 130)
Total time: 3.78s

[Epoch 207]	Learning rate: 8.98e-5
[1600/1600]	[L1: 47.4892]	82.7+6.5s

Evaluation:
[my_val x8]	PSNR: 21.74 (Best: 21.87 @epoch 130)
Total time: 3.70s

[Epoch 208]	Learning rate: 8.97e-5
[1600/1600]	[L1: 46.6865]	83.5+6.6s

Evaluation:
[my_val x8]	PSNR: 21.75 (Best: 21.87 @epoch 130)
Total time: 3.69s

[Epoch 209]	Learning rate: 8.96e-5
[1600/1600]	[L1: 46.9762]	82.3+6.3s

Evaluation:
[my_val x8]	PSNR: 21.78 (Best: 21.87 @epoch 130)
Total time: 3.80s

[Epoch 210]	Learning rate: 8.95e-5
[1600/1600]	[L1: 46.8137]	82.3+6.7s

Evaluation:
[my_val x8]	PSNR: 21.63 (Best: 21.87 @epoch 130)
Total time: 3.77s

[Epoch 211]	Learning rate: 8.94e-5
[1600/1600]	[L1: 46.5666]	83.2+7.1s

Evaluation:
[my_val x8]	PSNR: 21.77 (Best: 21.87 @epoch 130)
Total time: 3.68s

[Epoch 212]	Learning rate: 8.93e-5
[1600/1600]	[L1: 46.9402]	82.7+6.7s

Evaluation:
[my_val x8]	PSNR: 21.59 (Best: 21.87 @epoch 130)
Total time: 3.60s

[Epoch 213]	Learning rate: 8.92e-5
[1600/1600]	[L1: 46.4522]	81.7+6.7s

Evaluation:
[my_val x8]	PSNR: 21.70 (Best: 21.87 @epoch 130)
Total time: 3.83s

[Epoch 214]	Learning rate: 8.91e-5
[1600/1600]	[L1: 47.3467]	81.6+7.4s

Evaluation:
[my_val x8]	PSNR: 21.73 (Best: 21.87 @epoch 130)
Total time: 3.54s

[Epoch 215]	Learning rate: 8.90e-5
[1600/1600]	[L1: 46.0802]	82.2+6.3s

Evaluation:
[my_val x8]	PSNR: 21.69 (Best: 21.87 @epoch 130)
Total time: 3.87s

[Epoch 216]	Learning rate: 8.89e-5
[1600/1600]	[L1: 46.7459]	83.0+6.3s

Evaluation:
[my_val x8]	PSNR: 21.87 (Best: 21.87 @epoch 130)
Total time: 3.75s

[Epoch 217]	Learning rate: 8.88e-5
[1600/1600]	[L1: 46.0335]	82.0+6.9s

Evaluation:
[my_val x8]	PSNR: 21.71 (Best: 21.87 @epoch 130)
Total time: 3.81s

[Epoch 218]	Learning rate: 8.87e-5
[1600/1600]	[L1: 46.3496]	82.1+6.5s

Evaluation:
[my_val x8]	PSNR: 21.68 (Best: 21.87 @epoch 130)
Total time: 3.77s

[Epoch 219]	Learning rate: 8.86e-5
[1600/1600]	[L1: 47.0823]	82.5+6.8s

Evaluation:
[my_val x8]	PSNR: 21.70 (Best: 21.87 @epoch 130)
Total time: 3.75s

[Epoch 220]	Learning rate: 8.85e-5
[1600/1600]	[L1: 46.4312]	82.6+8.2s

Evaluation:
[my_val x8]	PSNR: 21.73 (Best: 21.87 @epoch 130)
Total time: 3.81s

[Epoch 221]	Learning rate: 8.84e-5
[1600/1600]	[L1: 46.9795]	81.9+6.7s

Evaluation:
[my_val x8]	PSNR: 21.58 (Best: 21.87 @epoch 130)
Total time: 3.80s

[Epoch 222]	Learning rate: 8.83e-5
[1600/1600]	[L1: 46.9083]	82.7+6.8s

Evaluation:
[my_val x8]	PSNR: 21.69 (Best: 21.87 @epoch 130)
Total time: 3.79s

[Epoch 223]	Learning rate: 8.82e-5
[1600/1600]	[L1: 46.5182]	82.3+6.8s

Evaluation:
[my_val x8]	PSNR: 21.69 (Best: 21.87 @epoch 130)
Total time: 3.71s

[Epoch 224]	Learning rate: 8.81e-5
[1600/1600]	[L1: 45.5172]	83.3+7.1s

Evaluation:
[my_val x8]	PSNR: 21.70 (Best: 21.87 @epoch 130)
Total time: 3.80s

[Epoch 225]	Learning rate: 8.80e-5
[1600/1600]	[L1: 46.6524]	83.6+6.8s

Evaluation:
[my_val x8]	PSNR: 21.69 (Best: 21.87 @epoch 130)
Total time: 3.69s

[Epoch 226]	Learning rate: 8.79e-5
[1600/1600]	[L1: 46.6199]	83.8+6.6s

Evaluation:
[my_val x8]	PSNR: 21.75 (Best: 21.87 @epoch 130)
Total time: 3.74s

[Epoch 227]	Learning rate: 8.78e-5
[1600/1600]	[L1: 46.0225]	82.5+6.4s

Evaluation:
[my_val x8]	PSNR: 21.64 (Best: 21.87 @epoch 130)
Total time: 3.87s

[Epoch 228]	Learning rate: 8.77e-5
[1600/1600]	[L1: 45.9135]	81.9+6.6s

Evaluation:
[my_val x8]	PSNR: 21.68 (Best: 21.87 @epoch 130)
Total time: 3.77s

[Epoch 229]	Learning rate: 8.76e-5
[1600/1600]	[L1: 46.2839]	82.8+6.7s

Evaluation:
[my_val x8]	PSNR: 21.50 (Best: 21.87 @epoch 130)
Total time: 3.69s

[Epoch 230]	Learning rate: 8.75e-5
[1600/1600]	[L1: 45.6389]	84.0+6.3s

Evaluation:
[my_val x8]	PSNR: 21.76 (Best: 21.87 @epoch 130)
Total time: 3.77s

[Epoch 231]	Learning rate: 8.74e-5
[1600/1600]	[L1: 46.4858]	83.1+7.2s

Evaluation:
[my_val x8]	PSNR: 21.70 (Best: 21.87 @epoch 130)
Total time: 3.82s

[Epoch 232]	Learning rate: 8.73e-5
[1600/1600]	[L1: 46.4980]	84.1+6.9s

Evaluation:
[my_val x8]	PSNR: 21.64 (Best: 21.87 @epoch 130)
Total time: 3.72s

[Epoch 233]	Learning rate: 8.72e-5
[1600/1600]	[L1: 46.7694]	81.7+6.4s

Evaluation:
[my_val x8]	PSNR: 21.68 (Best: 21.87 @epoch 130)
Total time: 3.73s

[Epoch 234]	Learning rate: 8.71e-5
[1600/1600]	[L1: 46.2484]	82.3+6.9s

Evaluation:
[my_val x8]	PSNR: 21.52 (Best: 21.87 @epoch 130)
Total time: 3.80s

[Epoch 235]	Learning rate: 8.70e-5
[1600/1600]	[L1: 45.4885]	83.0+6.9s

Evaluation:
[my_val x8]	PSNR: 21.72 (Best: 21.87 @epoch 130)
Total time: 3.85s

[Epoch 236]	Learning rate: 8.69e-5
[1600/1600]	[L1: 46.8998]	82.6+6.3s

Evaluation:
[my_val x8]	PSNR: 21.69 (Best: 21.87 @epoch 130)
Total time: 3.85s

[Epoch 237]	Learning rate: 8.68e-5
[1600/1600]	[L1: 47.4168]	83.3+6.9s

Evaluation:
[my_val x8]	PSNR: 21.69 (Best: 21.87 @epoch 130)
Total time: 3.87s

[Epoch 238]	Learning rate: 8.67e-5
[1600/1600]	[L1: 45.2433]	82.1+6.6s

Evaluation:
[my_val x8]	PSNR: 21.64 (Best: 21.87 @epoch 130)
Total time: 3.70s

[Epoch 239]	Learning rate: 8.66e-5
[1600/1600]	[L1: 46.2891]	82.5+6.6s

Evaluation:
[my_val x8]	PSNR: 21.67 (Best: 21.87 @epoch 130)
Total time: 3.81s

[Epoch 240]	Learning rate: 8.65e-5
[1600/1600]	[L1: 45.8653]	83.4+6.3s

Evaluation:
[my_val x8]	PSNR: 21.75 (Best: 21.87 @epoch 130)
Total time: 3.74s

[Epoch 241]	Learning rate: 8.64e-5
[1600/1600]	[L1: 46.5589]	82.4+7.1s

Evaluation:
[my_val x8]	PSNR: 21.67 (Best: 21.87 @epoch 130)
Total time: 3.79s

[Epoch 242]	Learning rate: 8.62e-5
[1600/1600]	[L1: 46.3014]	83.1+7.1s

Evaluation:
[my_val x8]	PSNR: 21.66 (Best: 21.87 @epoch 130)
Total time: 3.73s

[Epoch 243]	Learning rate: 8.61e-5
[1600/1600]	[L1: 46.1050]	83.9+6.3s

Evaluation:
[my_val x8]	PSNR: 21.69 (Best: 21.87 @epoch 130)
Total time: 3.71s

[Epoch 244]	Learning rate: 8.60e-5
[1600/1600]	[L1: 46.6652]	83.2+6.9s

Evaluation:
[my_val x8]	PSNR: 21.62 (Best: 21.87 @epoch 130)
Total time: 3.65s

[Epoch 245]	Learning rate: 8.59e-5
[1600/1600]	[L1: 45.6123]	83.0+6.1s

Evaluation:
[my_val x8]	PSNR: 21.66 (Best: 21.87 @epoch 130)
Total time: 3.78s

[Epoch 246]	Learning rate: 8.58e-5
[1600/1600]	[L1: 46.5558]	82.3+6.4s

Evaluation:
[my_val x8]	PSNR: 21.73 (Best: 21.87 @epoch 130)
Total time: 3.80s

[Epoch 247]	Learning rate: 8.57e-5
[1600/1600]	[L1: 46.0614]	81.9+6.4s

Evaluation:
[my_val x8]	PSNR: 21.58 (Best: 21.87 @epoch 130)
Total time: 3.90s

[Epoch 248]	Learning rate: 8.56e-5
[1600/1600]	[L1: 46.1626]	84.2+6.7s

Evaluation:
[my_val x8]	PSNR: 21.63 (Best: 21.87 @epoch 130)
Total time: 3.70s

[Epoch 249]	Learning rate: 8.55e-5
[1600/1600]	[L1: 45.7833]	83.6+6.6s

Evaluation:
[my_val x8]	PSNR: 21.71 (Best: 21.87 @epoch 130)
Total time: 3.94s

[Epoch 250]	Learning rate: 8.54e-5
[1600/1600]	[L1: 46.0701]	82.2+6.6s

Evaluation:
[my_val x8]	PSNR: 21.63 (Best: 21.87 @epoch 130)
Total time: 3.59s

[Epoch 251]	Learning rate: 8.53e-5
[1600/1600]	[L1: 45.2990]	82.8+6.7s

Evaluation:
[my_val x8]	PSNR: 21.76 (Best: 21.87 @epoch 130)
Total time: 3.75s

[Epoch 252]	Learning rate: 8.51e-5
[1600/1600]	[L1: 46.1206]	82.9+6.8s

Evaluation:
[my_val x8]	PSNR: 21.73 (Best: 21.87 @epoch 130)
Total time: 3.75s

[Epoch 253]	Learning rate: 8.50e-5
[1600/1600]	[L1: 45.8518]	84.1+7.0s

Evaluation:
[my_val x8]	PSNR: 21.71 (Best: 21.87 @epoch 130)
Total time: 3.70s

[Epoch 254]	Learning rate: 8.49e-5
[1600/1600]	[L1: 45.7611]	83.5+7.3s

Evaluation:
[my_val x8]	PSNR: 21.71 (Best: 21.87 @epoch 130)
Total time: 3.69s

[Epoch 255]	Learning rate: 8.48e-5
[1600/1600]	[L1: 45.2613]	83.2+6.9s

Evaluation:
[my_val x8]	PSNR: 21.70 (Best: 21.87 @epoch 130)
Total time: 3.82s

[Epoch 256]	Learning rate: 8.47e-5
[1600/1600]	[L1: 46.0237]	83.9+6.7s

Evaluation:
[my_val x8]	PSNR: 21.66 (Best: 21.87 @epoch 130)
Total time: 3.81s

[Epoch 257]	Learning rate: 8.46e-5
[1600/1600]	[L1: 45.8985]	82.8+6.8s

Evaluation:
[my_val x8]	PSNR: 21.67 (Best: 21.87 @epoch 130)
Total time: 3.74s

[Epoch 258]	Learning rate: 8.45e-5
[1600/1600]	[L1: 45.7114]	82.4+6.8s

Evaluation:
[my_val x8]	PSNR: 21.65 (Best: 21.87 @epoch 130)
Total time: 3.86s

[Epoch 259]	Learning rate: 8.44e-5
[1600/1600]	[L1: 46.3369]	83.6+6.7s

Evaluation:
[my_val x8]	PSNR: 21.61 (Best: 21.87 @epoch 130)
Total time: 3.76s

[Epoch 260]	Learning rate: 8.42e-5
[1600/1600]	[L1: 45.6241]	83.5+6.6s

Evaluation:
[my_val x8]	PSNR: 21.76 (Best: 21.87 @epoch 130)
Total time: 3.79s

[Epoch 261]	Learning rate: 8.41e-5
[1600/1600]	[L1: 46.0931]	82.5+7.7s

Evaluation:
[my_val x8]	PSNR: 21.61 (Best: 21.87 @epoch 130)
Total time: 3.75s

[Epoch 262]	Learning rate: 8.40e-5
[1600/1600]	[L1: 46.4071]	82.9+7.0s

Evaluation:
[my_val x8]	PSNR: 21.66 (Best: 21.87 @epoch 130)
Total time: 3.87s

[Epoch 263]	Learning rate: 8.39e-5
[1600/1600]	[L1: 45.4326]	83.1+7.7s

Evaluation:
[my_val x8]	PSNR: 21.73 (Best: 21.87 @epoch 130)
Total time: 3.68s

[Epoch 264]	Learning rate: 8.38e-5
[1600/1600]	[L1: 45.6222]	83.6+7.4s

Evaluation:
[my_val x8]	PSNR: 21.75 (Best: 21.87 @epoch 130)
Total time: 3.81s

[Epoch 265]	Learning rate: 8.37e-5
[1600/1600]	[L1: 46.6604]	82.8+6.9s

Evaluation:
[my_val x8]	PSNR: 21.68 (Best: 21.87 @epoch 130)
Total time: 3.67s

[Epoch 266]	Learning rate: 8.36e-5
[1600/1600]	[L1: 45.1003]	83.3+6.4s

Evaluation:
[my_val x8]	PSNR: 21.61 (Best: 21.87 @epoch 130)
Total time: 3.73s

[Epoch 267]	Learning rate: 8.34e-5
[1600/1600]	[L1: 46.1816]	83.8+6.5s

Evaluation:
[my_val x8]	PSNR: 21.61 (Best: 21.87 @epoch 130)
Total time: 3.80s

[Epoch 268]	Learning rate: 8.33e-5
[1600/1600]	[L1: 46.0770]	84.0+6.5s

Evaluation:
[my_val x8]	PSNR: 21.66 (Best: 21.87 @epoch 130)
Total time: 3.74s

[Epoch 269]	Learning rate: 8.32e-5
[1600/1600]	[L1: 45.0819]	82.8+7.0s

Evaluation:
[my_val x8]	PSNR: 21.69 (Best: 21.87 @epoch 130)
Total time: 3.72s

[Epoch 270]	Learning rate: 8.31e-5
[1600/1600]	[L1: 46.5934]	83.0+6.4s

Evaluation:
[my_val x8]	PSNR: 21.71 (Best: 21.87 @epoch 130)
Total time: 3.89s

[Epoch 271]	Learning rate: 8.30e-5
[1600/1600]	[L1: 46.0673]	84.1+6.5s

Evaluation:
[my_val x8]	PSNR: 21.64 (Best: 21.87 @epoch 130)
Total time: 3.94s

[Epoch 272]	Learning rate: 8.28e-5
[1600/1600]	[L1: 45.5265]	83.4+6.6s

Evaluation:
[my_val x8]	PSNR: 21.70 (Best: 21.87 @epoch 130)
Total time: 3.75s

[Epoch 273]	Learning rate: 8.27e-5
[1600/1600]	[L1: 45.5363]	84.2+6.5s

Evaluation:
[my_val x8]	PSNR: 21.91 (Best: 21.91 @epoch 273)
Total time: 3.78s

[Epoch 274]	Learning rate: 8.26e-5
[1600/1600]	[L1: 46.6481]	83.7+6.6s

Evaluation:
[my_val x8]	PSNR: 21.67 (Best: 21.91 @epoch 273)
Total time: 3.86s

[Epoch 275]	Learning rate: 8.25e-5
[1600/1600]	[L1: 45.6250]	84.0+6.6s

Evaluation:
[my_val x8]	PSNR: 21.71 (Best: 21.91 @epoch 273)
Total time: 3.75s

[Epoch 276]	Learning rate: 8.24e-5
[1600/1600]	[L1: 46.3252]	83.3+6.8s

Evaluation:
[my_val x8]	PSNR: 21.79 (Best: 21.91 @epoch 273)
Total time: 3.81s

[Epoch 277]	Learning rate: 8.23e-5
[1600/1600]	[L1: 46.9675]	83.9+6.7s

Evaluation:
[my_val x8]	PSNR: 21.59 (Best: 21.91 @epoch 273)
Total time: 3.73s

[Epoch 278]	Learning rate: 8.21e-5
[1600/1600]	[L1: 45.6185]	83.0+6.6s

Evaluation:
[my_val x8]	PSNR: 21.56 (Best: 21.91 @epoch 273)
Total time: 3.75s

[Epoch 279]	Learning rate: 8.20e-5
[1600/1600]	[L1: 45.7634]	82.1+6.9s

Evaluation:
[my_val x8]	PSNR: 21.65 (Best: 21.91 @epoch 273)
Total time: 3.78s

[Epoch 280]	Learning rate: 8.19e-5
[1600/1600]	[L1: 46.0683]	82.3+6.2s

Evaluation:
[my_val x8]	PSNR: 21.73 (Best: 21.91 @epoch 273)
Total time: 3.69s

[Epoch 281]	Learning rate: 8.18e-5
[1600/1600]	[L1: 46.0504]	83.3+6.5s

Evaluation:
[my_val x8]	PSNR: 21.72 (Best: 21.91 @epoch 273)
Total time: 3.84s

[Epoch 282]	Learning rate: 8.16e-5
[1600/1600]	[L1: 45.2240]	81.3+6.8s

Evaluation:
[my_val x8]	PSNR: 21.63 (Best: 21.91 @epoch 273)
Total time: 3.73s

[Epoch 283]	Learning rate: 8.15e-5
[1600/1600]	[L1: 44.8937]	84.0+7.3s

Evaluation:
[my_val x8]	PSNR: 21.60 (Best: 21.91 @epoch 273)
Total time: 3.70s

[Epoch 284]	Learning rate: 8.14e-5
[1600/1600]	[L1: 45.5896]	84.2+6.6s

Evaluation:
[my_val x8]	PSNR: 21.64 (Best: 21.91 @epoch 273)
Total time: 3.79s

[Epoch 285]	Learning rate: 8.13e-5
[1600/1600]	[L1: 44.9862]	83.2+6.9s

Evaluation:
[my_val x8]	PSNR: 21.81 (Best: 21.91 @epoch 273)
Total time: 3.80s

[Epoch 286]	Learning rate: 8.12e-5
[1600/1600]	[L1: 45.2495]	84.4+6.8s

Evaluation:
[my_val x8]	PSNR: 21.60 (Best: 21.91 @epoch 273)
Total time: 3.79s

[Epoch 287]	Learning rate: 8.10e-5
[1600/1600]	[L1: 45.8988]	84.0+6.8s

Evaluation:
[my_val x8]	PSNR: 21.53 (Best: 21.91 @epoch 273)
Total time: 3.73s

[Epoch 288]	Learning rate: 8.09e-5
[1600/1600]	[L1: 45.7218]	83.5+6.5s

Evaluation:
[my_val x8]	PSNR: 21.76 (Best: 21.91 @epoch 273)
Total time: 3.80s

[Epoch 289]	Learning rate: 8.08e-5
[1600/1600]	[L1: 44.4101]	83.0+6.9s

Evaluation:
[my_val x8]	PSNR: 21.75 (Best: 21.91 @epoch 273)
Total time: 3.80s

[Epoch 290]	Learning rate: 8.07e-5
[1600/1600]	[L1: 46.2646]	82.7+6.5s

Evaluation:
[my_val x8]	PSNR: 21.78 (Best: 21.91 @epoch 273)
Total time: 3.70s

[Epoch 291]	Learning rate: 8.05e-5
[1600/1600]	[L1: 45.4742]	84.3+6.2s

Evaluation:
[my_val x8]	PSNR: 21.67 (Best: 21.91 @epoch 273)
Total time: 3.63s

[Epoch 292]	Learning rate: 8.04e-5
[1600/1600]	[L1: 45.9851]	81.7+6.6s

Evaluation:
[my_val x8]	PSNR: 21.57 (Best: 21.91 @epoch 273)
Total time: 3.72s

[Epoch 293]	Learning rate: 8.03e-5
[1600/1600]	[L1: 44.9067]	83.4+7.5s

Evaluation:
[my_val x8]	PSNR: 21.73 (Best: 21.91 @epoch 273)
Total time: 3.68s

[Epoch 294]	Learning rate: 8.02e-5
[1600/1600]	[L1: 44.9081]	83.7+6.6s

Evaluation:
[my_val x8]	PSNR: 21.62 (Best: 21.91 @epoch 273)
Total time: 3.73s

[Epoch 295]	Learning rate: 8.00e-5
[1600/1600]	[L1: 45.6965]	84.1+6.3s

Evaluation:
[my_val x8]	PSNR: 21.71 (Best: 21.91 @epoch 273)
Total time: 3.81s

[Epoch 296]	Learning rate: 7.99e-5
[1600/1600]	[L1: 45.5552]	83.4+6.5s

Evaluation:
[my_val x8]	PSNR: 21.81 (Best: 21.91 @epoch 273)
Total time: 3.81s

[Epoch 297]	Learning rate: 7.98e-5
[1600/1600]	[L1: 44.7808]	81.9+6.4s

Evaluation:
[my_val x8]	PSNR: 21.68 (Best: 21.91 @epoch 273)
Total time: 3.73s

[Epoch 298]	Learning rate: 7.97e-5
[1600/1600]	[L1: 46.1956]	83.4+7.4s

Evaluation:
[my_val x8]	PSNR: 21.69 (Best: 21.91 @epoch 273)
Total time: 3.79s

[Epoch 299]	Learning rate: 7.95e-5
[1600/1600]	[L1: 45.3807]	81.8+7.7s

Evaluation:
[my_val x8]	PSNR: 21.77 (Best: 21.91 @epoch 273)
Total time: 3.79s

[Epoch 300]	Learning rate: 7.94e-5
[1600/1600]	[L1: 45.3833]	82.5+6.5s

Evaluation:
[my_val x8]	PSNR: 21.54 (Best: 21.91 @epoch 273)
Total time: 3.76s

[Epoch 301]	Learning rate: 7.93e-5
[1600/1600]	[L1: 45.1577]	83.1+6.7s

Evaluation:
[my_val x8]	PSNR: 21.80 (Best: 21.91 @epoch 273)
Total time: 3.74s

[Epoch 302]	Learning rate: 7.92e-5
[1600/1600]	[L1: 44.8972]	82.2+6.3s

Evaluation:
[my_val x8]	PSNR: 21.58 (Best: 21.91 @epoch 273)
Total time: 3.70s

[Epoch 303]	Learning rate: 7.90e-5
[1600/1600]	[L1: 45.4120]	82.6+6.5s

Evaluation:
[my_val x8]	PSNR: 21.77 (Best: 21.91 @epoch 273)
Total time: 3.94s

[Epoch 304]	Learning rate: 7.89e-5
[1600/1600]	[L1: 45.3026]	83.1+6.6s

Evaluation:
[my_val x8]	PSNR: 21.71 (Best: 21.91 @epoch 273)
Total time: 3.83s

[Epoch 305]	Learning rate: 7.88e-5
[1600/1600]	[L1: 44.9646]	82.3+6.5s

Evaluation:
[my_val x8]	PSNR: 21.54 (Best: 21.91 @epoch 273)
Total time: 3.75s

[Epoch 306]	Learning rate: 7.86e-5
[1600/1600]	[L1: 45.4005]	83.3+6.2s

Evaluation:
[my_val x8]	PSNR: 21.54 (Best: 21.91 @epoch 273)
Total time: 3.73s

[Epoch 307]	Learning rate: 7.85e-5
[1600/1600]	[L1: 44.6025]	81.1+7.3s

Evaluation:
[my_val x8]	PSNR: 21.67 (Best: 21.91 @epoch 273)
Total time: 3.81s

[Epoch 308]	Learning rate: 7.84e-5
[1600/1600]	[L1: 45.0376]	80.4+6.5s

Evaluation:
[my_val x8]	PSNR: 21.68 (Best: 21.91 @epoch 273)
Total time: 3.77s

[Epoch 309]	Learning rate: 7.83e-5
[1600/1600]	[L1: 44.7791]	81.2+6.4s

Evaluation:
[my_val x8]	PSNR: 21.73 (Best: 21.91 @epoch 273)
Total time: 3.75s

[Epoch 310]	Learning rate: 7.81e-5
[1600/1600]	[L1: 46.3860]	82.8+6.4s

Evaluation:
[my_val x8]	PSNR: 21.64 (Best: 21.91 @epoch 273)
Total time: 3.72s

[Epoch 311]	Learning rate: 7.80e-5
[1600/1600]	[L1: 45.4005]	82.3+6.5s

Evaluation:
[my_val x8]	PSNR: 21.66 (Best: 21.91 @epoch 273)
Total time: 3.74s

[Epoch 312]	Learning rate: 7.79e-5
[1600/1600]	[L1: 44.9033]	82.0+6.2s

Evaluation:
[my_val x8]	PSNR: 21.66 (Best: 21.91 @epoch 273)
Total time: 3.80s

[Epoch 313]	Learning rate: 7.77e-5
[1600/1600]	[L1: 45.6658]	82.9+6.5s

Evaluation:
[my_val x8]	PSNR: 21.81 (Best: 21.91 @epoch 273)
Total time: 3.72s

[Epoch 314]	Learning rate: 7.76e-5
[1600/1600]	[L1: 45.1017]	84.4+6.1s

Evaluation:
[my_val x8]	PSNR: 21.71 (Best: 21.91 @epoch 273)
Total time: 3.85s

[Epoch 315]	Learning rate: 7.75e-5
[1600/1600]	[L1: 45.4821]	83.4+7.0s

Evaluation:
[my_val x8]	PSNR: 21.75 (Best: 21.91 @epoch 273)
Total time: 3.85s

[Epoch 316]	Learning rate: 7.73e-5
[1600/1600]	[L1: 44.6809]	83.1+6.4s

Evaluation:
[my_val x8]	PSNR: 21.66 (Best: 21.91 @epoch 273)
Total time: 3.91s

[Epoch 317]	Learning rate: 7.72e-5
[1600/1600]	[L1: 45.7443]	82.1+6.9s

Evaluation:
[my_val x8]	PSNR: 21.65 (Best: 21.91 @epoch 273)
Total time: 3.76s

[Epoch 318]	Learning rate: 7.71e-5
[1600/1600]	[L1: 44.3067]	83.5+6.5s

Evaluation:
[my_val x8]	PSNR: 21.66 (Best: 21.91 @epoch 273)
Total time: 3.71s

[Epoch 319]	Learning rate: 7.69e-5
[1600/1600]	[L1: 44.5248]	83.4+6.2s

Evaluation:
[my_val x8]	PSNR: 21.55 (Best: 21.91 @epoch 273)
Total time: 3.78s

[Epoch 320]	Learning rate: 7.68e-5
[1600/1600]	[L1: 44.9860]	83.7+6.6s

Evaluation:
[my_val x8]	PSNR: 21.72 (Best: 21.91 @epoch 273)
Total time: 3.79s

[Epoch 321]	Learning rate: 7.67e-5
[1600/1600]	[L1: 44.5977]	82.4+7.0s

Evaluation:
[my_val x8]	PSNR: 21.61 (Best: 21.91 @epoch 273)
Total time: 3.76s

[Epoch 322]	Learning rate: 7.65e-5
[1600/1600]	[L1: 45.8026]	82.6+6.7s

Evaluation:
[my_val x8]	PSNR: 21.74 (Best: 21.91 @epoch 273)
Total time: 3.80s

[Epoch 323]	Learning rate: 7.64e-5
[1600/1600]	[L1: 45.7805]	81.6+6.5s

Evaluation:
[my_val x8]	PSNR: 21.47 (Best: 21.91 @epoch 273)
Total time: 3.80s

[Epoch 324]	Learning rate: 7.63e-5
[1600/1600]	[L1: 45.3316]	82.8+6.2s

Evaluation:
[my_val x8]	PSNR: 21.67 (Best: 21.91 @epoch 273)
Total time: 3.57s

[Epoch 325]	Learning rate: 7.61e-5
[1600/1600]	[L1: 45.6304]	82.7+6.4s

Evaluation:
[my_val x8]	PSNR: 21.53 (Best: 21.91 @epoch 273)
Total time: 3.82s

[Epoch 326]	Learning rate: 7.60e-5
[1600/1600]	[L1: 44.4811]	82.0+7.1s

Evaluation:
[my_val x8]	PSNR: 21.76 (Best: 21.91 @epoch 273)
Total time: 3.81s

[Epoch 327]	Learning rate: 7.59e-5
[1600/1600]	[L1: 45.1344]	83.5+7.3s

Evaluation:
[my_val x8]	PSNR: 21.78 (Best: 21.91 @epoch 273)
Total time: 3.71s

[Epoch 328]	Learning rate: 7.57e-5
[1600/1600]	[L1: 44.4471]	84.5+7.3s

Evaluation:
[my_val x8]	PSNR: 21.70 (Best: 21.91 @epoch 273)
Total time: 3.68s

[Epoch 329]	Learning rate: 7.56e-5
[1600/1600]	[L1: 45.1998]	83.5+6.4s

Evaluation:
[my_val x8]	PSNR: 21.72 (Best: 21.91 @epoch 273)
Total time: 3.71s

[Epoch 330]	Learning rate: 7.55e-5
[1600/1600]	[L1: 43.7762]	81.6+6.6s

Evaluation:
[my_val x8]	PSNR: 21.44 (Best: 21.91 @epoch 273)
Total time: 3.80s

[Epoch 331]	Learning rate: 7.53e-5
[1600/1600]	[L1: 45.3486]	83.9+6.8s

Evaluation:
[my_val x8]	PSNR: 21.62 (Best: 21.91 @epoch 273)
Total time: 3.70s

[Epoch 332]	Learning rate: 7.52e-5
[1600/1600]	[L1: 44.3187]	83.0+6.6s

Evaluation:
[my_val x8]	PSNR: 21.68 (Best: 21.91 @epoch 273)
Total time: 3.78s

[Epoch 333]	Learning rate: 7.51e-5
[1600/1600]	[L1: 44.7985]	82.5+6.7s

Evaluation:
[my_val x8]	PSNR: 21.68 (Best: 21.91 @epoch 273)
Total time: 3.69s

[Epoch 334]	Learning rate: 7.49e-5
[1600/1600]	[L1: 44.6204]	84.0+6.9s

Evaluation:
[my_val x8]	PSNR: 21.57 (Best: 21.91 @epoch 273)
Total time: 3.75s

[Epoch 335]	Learning rate: 7.48e-5
[1600/1600]	[L1: 44.3738]	81.2+6.9s

Evaluation:
[my_val x8]	PSNR: 21.73 (Best: 21.91 @epoch 273)
Total time: 3.71s

[Epoch 336]	Learning rate: 7.47e-5
[1600/1600]	[L1: 44.9657]	82.8+6.6s

Evaluation:
[my_val x8]	PSNR: 21.58 (Best: 21.91 @epoch 273)
Total time: 3.73s

[Epoch 337]	Learning rate: 7.45e-5
[1600/1600]	[L1: 44.7786]	83.3+7.2s

Evaluation:
[my_val x8]	PSNR: 21.53 (Best: 21.91 @epoch 273)
Total time: 3.78s

[Epoch 338]	Learning rate: 7.44e-5
[1600/1600]	[L1: 44.6624]	82.8+6.2s

Evaluation:
[my_val x8]	PSNR: 21.63 (Best: 21.91 @epoch 273)
Total time: 3.83s

[Epoch 339]	Learning rate: 7.43e-5
[1600/1600]	[L1: 44.8033]	82.7+7.0s

Evaluation:
[my_val x8]	PSNR: 21.67 (Best: 21.91 @epoch 273)
Total time: 3.77s

[Epoch 340]	Learning rate: 7.41e-5
[1600/1600]	[L1: 44.9793]	83.4+6.5s

Evaluation:
[my_val x8]	PSNR: 21.65 (Best: 21.91 @epoch 273)
Total time: 3.78s

[Epoch 341]	Learning rate: 7.40e-5
[1600/1600]	[L1: 45.1339]	82.6+6.6s

Evaluation:
[my_val x8]	PSNR: 21.75 (Best: 21.91 @epoch 273)
Total time: 3.76s

[Epoch 342]	Learning rate: 7.38e-5
[1600/1600]	[L1: 44.3106]	83.5+6.5s

Evaluation:
[my_val x8]	PSNR: 21.64 (Best: 21.91 @epoch 273)
Total time: 3.79s

[Epoch 343]	Learning rate: 7.37e-5
[1600/1600]	[L1: 44.3188]	83.3+7.0s

Evaluation:
[my_val x8]	PSNR: 21.67 (Best: 21.91 @epoch 273)
Total time: 3.74s

[Epoch 344]	Learning rate: 7.36e-5
[1600/1600]	[L1: 44.9890]	83.8+7.0s

Evaluation:
[my_val x8]	PSNR: 21.80 (Best: 21.91 @epoch 273)
Total time: 3.78s

[Epoch 345]	Learning rate: 7.34e-5
[1600/1600]	[L1: 44.8020]	83.1+6.3s

Evaluation:
[my_val x8]	PSNR: 21.73 (Best: 21.91 @epoch 273)
Total time: 3.70s

[Epoch 346]	Learning rate: 7.33e-5
[1600/1600]	[L1: 44.2433]	83.4+6.1s

Evaluation:
[my_val x8]	PSNR: 21.54 (Best: 21.91 @epoch 273)
Total time: 3.78s

[Epoch 347]	Learning rate: 7.31e-5
[1600/1600]	[L1: 44.6665]	82.4+6.6s

Evaluation:
[my_val x8]	PSNR: 21.70 (Best: 21.91 @epoch 273)
Total time: 3.78s

[Epoch 348]	Learning rate: 7.30e-5
[1600/1600]	[L1: 45.5155]	83.0+6.9s

Evaluation:
[my_val x8]	PSNR: 21.54 (Best: 21.91 @epoch 273)
Total time: 3.79s

[Epoch 349]	Learning rate: 7.29e-5
[1600/1600]	[L1: 45.3357]	82.9+6.6s

Evaluation:
[my_val x8]	PSNR: 21.51 (Best: 21.91 @epoch 273)
Total time: 3.77s

[Epoch 350]	Learning rate: 7.27e-5
[1600/1600]	[L1: 44.8846]	83.4+6.3s

Evaluation:
[my_val x8]	PSNR: 21.75 (Best: 21.91 @epoch 273)
Total time: 3.85s

[Epoch 351]	Learning rate: 7.26e-5
[1600/1600]	[L1: 44.4938]	84.4+6.9s

Evaluation:
[my_val x8]	PSNR: 21.55 (Best: 21.91 @epoch 273)
Total time: 3.99s

[Epoch 352]	Learning rate: 7.24e-5
[1600/1600]	[L1: 44.6531]	83.6+7.0s

Evaluation:
[my_val x8]	PSNR: 21.52 (Best: 21.91 @epoch 273)
Total time: 3.82s

[Epoch 353]	Learning rate: 7.23e-5
[1600/1600]	[L1: 44.4999]	83.4+6.3s

Evaluation:
[my_val x8]	PSNR: 21.42 (Best: 21.91 @epoch 273)
Total time: 3.83s

[Epoch 354]	Learning rate: 7.22e-5
[1600/1600]	[L1: 44.2647]	83.7+7.7s

Evaluation:
[my_val x8]	PSNR: 21.49 (Best: 21.91 @epoch 273)
Total time: 3.87s

[Epoch 355]	Learning rate: 7.20e-5
[1600/1600]	[L1: 44.3827]	83.0+6.8s

Evaluation:
[my_val x8]	PSNR: 21.76 (Best: 21.91 @epoch 273)
Total time: 3.74s

[Epoch 356]	Learning rate: 7.19e-5
[1600/1600]	[L1: 44.5846]	82.1+6.9s

Evaluation:
[my_val x8]	PSNR: 21.64 (Best: 21.91 @epoch 273)
Total time: 3.72s

[Epoch 357]	Learning rate: 7.17e-5
[1600/1600]	[L1: 44.5171]	83.0+6.2s

Evaluation:
[my_val x8]	PSNR: 21.55 (Best: 21.91 @epoch 273)
Total time: 3.78s

[Epoch 358]	Learning rate: 7.16e-5
[1600/1600]	[L1: 44.6311]	83.2+6.9s

Evaluation:
[my_val x8]	PSNR: 21.62 (Best: 21.91 @epoch 273)
Total time: 3.76s

[Epoch 359]	Learning rate: 7.15e-5
[1600/1600]	[L1: 43.8155]	83.0+6.9s

Evaluation:
[my_val x8]	PSNR: 21.76 (Best: 21.91 @epoch 273)
Total time: 3.80s

[Epoch 360]	Learning rate: 7.13e-5
[1600/1600]	[L1: 44.7770]	83.3+6.3s

Evaluation:
[my_val x8]	PSNR: 21.79 (Best: 21.91 @epoch 273)
Total time: 3.86s

[Epoch 361]	Learning rate: 7.12e-5
[1600/1600]	[L1: 44.7150]	83.2+6.0s

Evaluation:
[my_val x8]	PSNR: 21.33 (Best: 21.91 @epoch 273)
Total time: 3.72s

[Epoch 362]	Learning rate: 7.10e-5
[1600/1600]	[L1: 44.1465]	83.9+6.5s

Evaluation:
[my_val x8]	PSNR: 21.39 (Best: 21.91 @epoch 273)
Total time: 3.81s

[Epoch 363]	Learning rate: 7.09e-5
[1600/1600]	[L1: 44.4525]	84.1+6.6s

Evaluation:
[my_val x8]	PSNR: 21.91 (Best: 21.91 @epoch 273)
Total time: 3.74s

[Epoch 364]	Learning rate: 7.07e-5
[1600/1600]	[L1: 44.7037]	84.1+6.7s

Evaluation:
[my_val x8]	PSNR: 21.53 (Best: 21.91 @epoch 273)
Total time: 3.78s

[Epoch 365]	Learning rate: 7.06e-5
[1600/1600]	[L1: 43.9756]	83.0+6.3s

Evaluation:
[my_val x8]	PSNR: 21.65 (Best: 21.91 @epoch 273)
Total time: 3.79s

[Epoch 366]	Learning rate: 7.05e-5
[1600/1600]	[L1: 45.1637]	84.2+6.4s

Evaluation:
[my_val x8]	PSNR: 21.57 (Best: 21.91 @epoch 273)
Total time: 3.75s

[Epoch 367]	Learning rate: 7.03e-5
[1600/1600]	[L1: 44.1563]	82.8+6.8s

Evaluation:
[my_val x8]	PSNR: 21.62 (Best: 21.91 @epoch 273)
Total time: 3.81s

[Epoch 368]	Learning rate: 7.02e-5
[1600/1600]	[L1: 43.9757]	83.0+6.4s

Evaluation:
[my_val x8]	PSNR: 22.00 (Best: 22.00 @epoch 368)
Total time: 3.69s

[Epoch 369]	Learning rate: 7.00e-5
[1600/1600]	[L1: 44.2444]	83.2+6.5s

Evaluation:
[my_val x8]	PSNR: 21.64 (Best: 22.00 @epoch 368)
Total time: 3.79s

[Epoch 370]	Learning rate: 6.99e-5
[1600/1600]	[L1: 44.4021]	83.2+7.0s

Evaluation:
[my_val x8]	PSNR: 21.75 (Best: 22.00 @epoch 368)
Total time: 3.54s

[Epoch 371]	Learning rate: 6.97e-5
[1600/1600]	[L1: 44.7561]	82.4+6.9s

Evaluation:
[my_val x8]	PSNR: 21.57 (Best: 22.00 @epoch 368)
Total time: 3.84s

[Epoch 372]	Learning rate: 6.96e-5
[1600/1600]	[L1: 43.8378]	83.3+6.2s

Evaluation:
[my_val x8]	PSNR: 21.82 (Best: 22.00 @epoch 368)
Total time: 3.88s

[Epoch 373]	Learning rate: 6.95e-5
[1600/1600]	[L1: 44.4144]	83.0+7.1s

Evaluation:
[my_val x8]	PSNR: 21.43 (Best: 22.00 @epoch 368)
Total time: 3.66s

[Epoch 374]	Learning rate: 6.93e-5
[1600/1600]	[L1: 44.2821]	82.0+7.0s

Evaluation:
[my_val x8]	PSNR: 21.59 (Best: 22.00 @epoch 368)
Total time: 3.77s

[Epoch 375]	Learning rate: 6.92e-5
[1600/1600]	[L1: 44.0971]	82.7+6.4s

Evaluation:
[my_val x8]	PSNR: 21.61 (Best: 22.00 @epoch 368)
Total time: 3.85s

[Epoch 376]	Learning rate: 6.90e-5
[1600/1600]	[L1: 44.7570]	83.6+7.7s

Evaluation:
[my_val x8]	PSNR: 21.55 (Best: 22.00 @epoch 368)
Total time: 3.77s

[Epoch 377]	Learning rate: 6.89e-5
[1600/1600]	[L1: 44.5356]	84.4+6.4s

Evaluation:
[my_val x8]	PSNR: 21.63 (Best: 22.00 @epoch 368)
Total time: 3.69s

[Epoch 378]	Learning rate: 6.87e-5
[1600/1600]	[L1: 44.5820]	82.0+7.0s

Evaluation:
[my_val x8]	PSNR: 21.66 (Best: 22.00 @epoch 368)
Total time: 3.88s

[Epoch 379]	Learning rate: 6.86e-5
[1600/1600]	[L1: 44.2791]	82.3+6.8s

Evaluation:
[my_val x8]	PSNR: 21.76 (Best: 22.00 @epoch 368)
Total time: 3.83s

[Epoch 380]	Learning rate: 6.84e-5
[1600/1600]	[L1: 44.5385]	84.8+6.5s

Evaluation:
[my_val x8]	PSNR: 21.64 (Best: 22.00 @epoch 368)
Total time: 3.63s

[Epoch 381]	Learning rate: 6.83e-5
[1600/1600]	[L1: 44.2547]	82.9+7.2s

Evaluation:
[my_val x8]	PSNR: 21.65 (Best: 22.00 @epoch 368)
Total time: 3.68s

[Epoch 382]	Learning rate: 6.81e-5
[1600/1600]	[L1: 44.2782]	84.1+6.5s

Evaluation:
[my_val x8]	PSNR: 21.68 (Best: 22.00 @epoch 368)
Total time: 3.81s

[Epoch 383]	Learning rate: 6.80e-5
[1600/1600]	[L1: 43.4858]	81.3+6.2s

Evaluation:
[my_val x8]	PSNR: 21.70 (Best: 22.00 @epoch 368)
Total time: 3.83s

[Epoch 384]	Learning rate: 6.79e-5
[1600/1600]	[L1: 44.3123]	82.9+6.1s

Evaluation:
[my_val x8]	PSNR: 21.65 (Best: 22.00 @epoch 368)
Total time: 3.57s

[Epoch 385]	Learning rate: 6.77e-5
[1600/1600]	[L1: 44.7778]	82.8+6.5s

Evaluation:
[my_val x8]	PSNR: 21.43 (Best: 22.00 @epoch 368)
Total time: 3.84s

[Epoch 386]	Learning rate: 6.76e-5
[1600/1600]	[L1: 43.8781]	83.5+6.1s

Evaluation:
[my_val x8]	PSNR: 21.69 (Best: 22.00 @epoch 368)
Total time: 3.82s

[Epoch 387]	Learning rate: 6.74e-5
[1600/1600]	[L1: 44.6428]	83.8+7.2s

Evaluation:
[my_val x8]	PSNR: 21.85 (Best: 22.00 @epoch 368)
Total time: 3.79s

[Epoch 388]	Learning rate: 6.73e-5
[1600/1600]	[L1: 43.0006]	83.5+6.7s

Evaluation:
[my_val x8]	PSNR: 21.57 (Best: 22.00 @epoch 368)
Total time: 3.72s

[Epoch 389]	Learning rate: 6.71e-5
[1600/1600]	[L1: 44.2518]	82.1+7.0s

Evaluation:
[my_val x8]	PSNR: 21.63 (Best: 22.00 @epoch 368)
Total time: 3.71s

[Epoch 390]	Learning rate: 6.70e-5
[1600/1600]	[L1: 44.0478]	82.2+6.4s

Evaluation:
[my_val x8]	PSNR: 21.45 (Best: 22.00 @epoch 368)
Total time: 3.79s

[Epoch 391]	Learning rate: 6.68e-5
[1600/1600]	[L1: 43.5683]	82.5+6.9s

Evaluation:
[my_val x8]	PSNR: 21.48 (Best: 22.00 @epoch 368)
Total time: 3.77s

[Epoch 392]	Learning rate: 6.67e-5
[1600/1600]	[L1: 43.5828]	83.0+6.5s

Evaluation:
[my_val x8]	PSNR: 21.55 (Best: 22.00 @epoch 368)
Total time: 3.63s

[Epoch 393]	Learning rate: 6.65e-5
[1600/1600]	[L1: 44.1698]	83.0+6.4s

Evaluation:
[my_val x8]	PSNR: 21.17 (Best: 22.00 @epoch 368)
Total time: 3.81s

[Epoch 394]	Learning rate: 6.64e-5
[1600/1600]	[L1: 44.5593]	84.1+7.0s

Evaluation:
[my_val x8]	PSNR: 21.81 (Best: 22.00 @epoch 368)
Total time: 3.76s

[Epoch 395]	Learning rate: 6.62e-5
[1600/1600]	[L1: 44.2307]	83.3+6.5s

Evaluation:
[my_val x8]	PSNR: 21.71 (Best: 22.00 @epoch 368)
Total time: 3.90s

[Epoch 396]	Learning rate: 6.61e-5
[1600/1600]	[L1: 43.9562]	83.2+7.0s

Evaluation:
[my_val x8]	PSNR: 21.88 (Best: 22.00 @epoch 368)
Total time: 3.75s

[Epoch 397]	Learning rate: 6.59e-5
[1600/1600]	[L1: 44.0720]	83.6+5.8s

Evaluation:
[my_val x8]	PSNR: 21.59 (Best: 22.00 @epoch 368)
Total time: 3.81s

[Epoch 398]	Learning rate: 6.58e-5
[1600/1600]	[L1: 44.1905]	83.4+6.4s

Evaluation:
[my_val x8]	PSNR: 21.56 (Best: 22.00 @epoch 368)
Total time: 3.64s

[Epoch 399]	Learning rate: 6.56e-5
[1600/1600]	[L1: 43.6800]	83.3+7.0s

Evaluation:
[my_val x8]	PSNR: 21.72 (Best: 22.00 @epoch 368)
Total time: 3.71s

[Epoch 400]	Learning rate: 6.55e-5
[1600/1600]	[L1: 43.6512]	83.4+6.7s

Evaluation:
[my_val x8]	PSNR: 21.39 (Best: 22.00 @epoch 368)
Total time: 3.75s

[Epoch 401]	Learning rate: 6.53e-5
[1600/1600]	[L1: 44.1312]	83.0+6.5s

Evaluation:
[my_val x8]	PSNR: 21.66 (Best: 22.00 @epoch 368)
Total time: 3.65s

[Epoch 402]	Learning rate: 6.52e-5
[1600/1600]	[L1: 44.1486]	83.1+6.7s

Evaluation:
[my_val x8]	PSNR: 21.79 (Best: 22.00 @epoch 368)
Total time: 3.70s

[Epoch 403]	Learning rate: 6.50e-5
[1600/1600]	[L1: 44.1646]	83.0+6.6s

Evaluation:
[my_val x8]	PSNR: 21.75 (Best: 22.00 @epoch 368)
Total time: 3.76s

[Epoch 404]	Learning rate: 6.49e-5
[1600/1600]	[L1: 44.1485]	81.9+6.5s

Evaluation:
[my_val x8]	PSNR: 21.75 (Best: 22.00 @epoch 368)
Total time: 3.89s

[Epoch 405]	Learning rate: 6.47e-5
[1600/1600]	[L1: 43.7896]	83.4+7.7s

Evaluation:
[my_val x8]	PSNR: 21.50 (Best: 22.00 @epoch 368)
Total time: 3.79s

[Epoch 406]	Learning rate: 6.46e-5
[1600/1600]	[L1: 43.5270]	83.1+7.5s

Evaluation:
[my_val x8]	PSNR: 21.21 (Best: 22.00 @epoch 368)
Total time: 3.90s

[Epoch 407]	Learning rate: 6.44e-5
[1600/1600]	[L1: 43.4540]	83.4+6.9s

Evaluation:
[my_val x8]	PSNR: 21.90 (Best: 22.00 @epoch 368)
Total time: 3.79s

[Epoch 408]	Learning rate: 6.43e-5
[1600/1600]	[L1: 43.3558]	81.4+6.7s

Evaluation:
[my_val x8]	PSNR: 21.93 (Best: 22.00 @epoch 368)
Total time: 3.69s

[Epoch 409]	Learning rate: 6.41e-5
[1600/1600]	[L1: 43.8708]	82.8+6.9s

Evaluation:
[my_val x8]	PSNR: 21.67 (Best: 22.00 @epoch 368)
Total time: 3.88s

[Epoch 410]	Learning rate: 6.40e-5
[1600/1600]	[L1: 43.7344]	83.4+6.3s

Evaluation:
[my_val x8]	PSNR: 21.05 (Best: 22.00 @epoch 368)
Total time: 3.75s

[Epoch 411]	Learning rate: 6.38e-5
[1600/1600]	[L1: 43.5536]	82.2+6.7s

Evaluation:
[my_val x8]	PSNR: 21.73 (Best: 22.00 @epoch 368)
Total time: 3.68s

[Epoch 412]	Learning rate: 6.37e-5
[1600/1600]	[L1: 43.6142]	83.9+6.5s

Evaluation:
[my_val x8]	PSNR: 21.76 (Best: 22.00 @epoch 368)
Total time: 3.67s

[Epoch 413]	Learning rate: 6.35e-5
[1600/1600]	[L1: 43.9989]	82.9+6.6s

Evaluation:
[my_val x8]	PSNR: 21.71 (Best: 22.00 @epoch 368)
Total time: 3.62s

[Epoch 414]	Learning rate: 6.34e-5
[1600/1600]	[L1: 43.2166]	82.3+6.7s

Evaluation:
[my_val x8]	PSNR: 21.59 (Best: 22.00 @epoch 368)
Total time: 3.85s

[Epoch 415]	Learning rate: 6.32e-5
[1600/1600]	[L1: 43.2498]	81.1+6.7s

Evaluation:
[my_val x8]	PSNR: 21.68 (Best: 22.00 @epoch 368)
Total time: 3.83s

[Epoch 416]	Learning rate: 6.31e-5
[1600/1600]	[L1: 43.6886]	84.0+6.9s

Evaluation:
[my_val x8]	PSNR: 21.51 (Best: 22.00 @epoch 368)
Total time: 4.01s

[Epoch 417]	Learning rate: 6.29e-5
[1600/1600]	[L1: 43.7687]	83.0+6.8s

Evaluation:
[my_val x8]	PSNR: 21.58 (Best: 22.00 @epoch 368)
Total time: 4.00s

[Epoch 418]	Learning rate: 6.28e-5
[1600/1600]	[L1: 43.5984]	84.6+6.5s

Evaluation:
[my_val x8]	PSNR: 21.12 (Best: 22.00 @epoch 368)
Total time: 3.80s

[Epoch 419]	Learning rate: 6.26e-5
[1600/1600]	[L1: 43.3085]	82.8+7.1s

Evaluation:
[my_val x8]	PSNR: 21.64 (Best: 22.00 @epoch 368)
Total time: 3.77s

[Epoch 420]	Learning rate: 6.25e-5
[1600/1600]	[L1: 43.3300]	83.9+6.3s

Evaluation:
[my_val x8]	PSNR: 21.77 (Best: 22.00 @epoch 368)
Total time: 3.71s

[Epoch 421]	Learning rate: 6.23e-5
[1600/1600]	[L1: 43.3503]	83.8+6.2s

Evaluation:
[my_val x8]	PSNR: 21.89 (Best: 22.00 @epoch 368)
Total time: 3.82s

[Epoch 422]	Learning rate: 6.22e-5
[1600/1600]	[L1: 42.8404]	83.7+6.6s

Evaluation:
[my_val x8]	PSNR: 21.50 (Best: 22.00 @epoch 368)
Total time: 3.79s

[Epoch 423]	Learning rate: 6.20e-5
[1600/1600]	[L1: 44.4846]	81.3+7.1s

Evaluation:
[my_val x8]	PSNR: 21.86 (Best: 22.00 @epoch 368)
Total time: 3.73s

[Epoch 424]	Learning rate: 6.19e-5
[1600/1600]	[L1: 43.2851]	84.1+6.4s

Evaluation:
[my_val x8]	PSNR: 21.67 (Best: 22.00 @epoch 368)
Total time: 3.76s

[Epoch 425]	Learning rate: 6.17e-5
[1600/1600]	[L1: 43.2087]	83.0+6.4s

Evaluation:
[my_val x8]	PSNR: 21.85 (Best: 22.00 @epoch 368)
Total time: 3.79s

[Epoch 426]	Learning rate: 6.16e-5
[1600/1600]	[L1: 43.2983]	83.2+7.0s

Evaluation:
[my_val x8]	PSNR: 21.57 (Best: 22.00 @epoch 368)
Total time: 3.86s

[Epoch 427]	Learning rate: 6.14e-5
[1600/1600]	[L1: 43.3847]	83.8+6.7s

Evaluation:
[my_val x8]	PSNR: 21.21 (Best: 22.00 @epoch 368)
Total time: 3.86s

[Epoch 428]	Learning rate: 6.13e-5
[1600/1600]	[L1: 43.7398]	82.0+6.7s

Evaluation:
[my_val x8]	PSNR: 21.55 (Best: 22.00 @epoch 368)
Total time: 3.81s

[Epoch 429]	Learning rate: 6.11e-5
[1600/1600]	[L1: 44.4209]	83.5+6.0s

Evaluation:
[my_val x8]	PSNR: 21.32 (Best: 22.00 @epoch 368)
Total time: 3.77s

[Epoch 430]	Learning rate: 6.09e-5
[1600/1600]	[L1: 43.4648]	83.5+6.8s

Evaluation:
[my_val x8]	PSNR: 21.53 (Best: 22.00 @epoch 368)
Total time: 3.75s

[Epoch 431]	Learning rate: 6.08e-5
[1600/1600]	[L1: 44.0071]	82.5+6.4s

Evaluation:
[my_val x8]	PSNR: 21.71 (Best: 22.00 @epoch 368)
Total time: 3.75s

[Epoch 432]	Learning rate: 6.06e-5
[1600/1600]	[L1: 44.2430]	81.9+6.1s

Evaluation:
[my_val x8]	PSNR: 21.66 (Best: 22.00 @epoch 368)
Total time: 3.78s

[Epoch 433]	Learning rate: 6.05e-5
[1600/1600]	[L1: 43.1176]	83.1+7.0s

Evaluation:
[my_val x8]	PSNR: 21.51 (Best: 22.00 @epoch 368)
Total time: 3.67s

[Epoch 434]	Learning rate: 6.03e-5
[1600/1600]	[L1: 42.9842]	83.8+6.8s

Evaluation:
[my_val x8]	PSNR: 21.50 (Best: 22.00 @epoch 368)
Total time: 3.65s

[Epoch 435]	Learning rate: 6.02e-5
[1600/1600]	[L1: 43.2644]	82.4+6.8s

Evaluation:
[my_val x8]	PSNR: 21.72 (Best: 22.00 @epoch 368)
Total time: 3.75s

[Epoch 436]	Learning rate: 6.00e-5
[1600/1600]	[L1: 43.0821]	83.9+6.3s

Evaluation:
[my_val x8]	PSNR: 21.55 (Best: 22.00 @epoch 368)
Total time: 3.71s

[Epoch 437]	Learning rate: 5.99e-5
[1600/1600]	[L1: 43.2158]	82.3+6.6s

Evaluation:
[my_val x8]	PSNR: 21.65 (Best: 22.00 @epoch 368)
Total time: 3.71s

[Epoch 438]	Learning rate: 5.97e-5
[1600/1600]	[L1: 43.6640]	81.5+7.1s

Evaluation:
[my_val x8]	PSNR: 21.98 (Best: 22.00 @epoch 368)
Total time: 3.77s

[Epoch 439]	Learning rate: 5.96e-5
[1600/1600]	[L1: 43.6746]	82.1+7.0s

Evaluation:
[my_val x8]	PSNR: 21.65 (Best: 22.00 @epoch 368)
Total time: 3.75s

[Epoch 440]	Learning rate: 5.94e-5
[1600/1600]	[L1: 43.3581]	82.9+7.0s

Evaluation:
[my_val x8]	PSNR: 21.47 (Best: 22.00 @epoch 368)
Total time: 3.83s

[Epoch 441]	Learning rate: 5.93e-5
[1600/1600]	[L1: 43.0292]	84.3+6.4s

Evaluation:
[my_val x8]	PSNR: 21.44 (Best: 22.00 @epoch 368)
Total time: 3.72s

[Epoch 442]	Learning rate: 5.91e-5
[1600/1600]	[L1: 43.0009]	82.4+7.3s

Evaluation:
[my_val x8]	PSNR: 21.42 (Best: 22.00 @epoch 368)
Total time: 3.76s

[Epoch 443]	Learning rate: 5.89e-5
[1600/1600]	[L1: 43.5584]	84.5+6.2s

Evaluation:
[my_val x8]	PSNR: 21.88 (Best: 22.00 @epoch 368)
Total time: 3.94s

[Epoch 444]	Learning rate: 5.88e-5
[1600/1600]	[L1: 43.3083]	82.5+6.6s

Evaluation:
[my_val x8]	PSNR: 21.60 (Best: 22.00 @epoch 368)
Total time: 3.84s

[Epoch 445]	Learning rate: 5.86e-5
[1600/1600]	[L1: 43.7633]	84.0+6.3s

Evaluation:
[my_val x8]	PSNR: 21.87 (Best: 22.00 @epoch 368)
Total time: 3.68s

[Epoch 446]	Learning rate: 5.85e-5
[1600/1600]	[L1: 44.1311]	82.9+7.3s

Evaluation:
[my_val x8]	PSNR: 21.65 (Best: 22.00 @epoch 368)
Total time: 3.78s

[Epoch 447]	Learning rate: 5.83e-5
[1600/1600]	[L1: 44.0219]	82.8+6.8s

Evaluation:
[my_val x8]	PSNR: 21.40 (Best: 22.00 @epoch 368)
Total time: 3.89s

[Epoch 448]	Learning rate: 5.82e-5
[1600/1600]	[L1: 44.2628]	83.3+6.6s

Evaluation:
[my_val x8]	PSNR: 21.83 (Best: 22.00 @epoch 368)
Total time: 3.76s

[Epoch 449]	Learning rate: 5.80e-5
[1600/1600]	[L1: 42.6315]	82.3+6.2s

Evaluation:
[my_val x8]	PSNR: 21.80 (Best: 22.00 @epoch 368)
Total time: 3.68s

[Epoch 450]	Learning rate: 5.79e-5
[1600/1600]	[L1: 42.7392]	82.7+7.0s

Evaluation:
[my_val x8]	PSNR: 21.82 (Best: 22.00 @epoch 368)
Total time: 3.83s

[Epoch 451]	Learning rate: 5.77e-5
[1600/1600]	[L1: 42.9967]	83.7+6.3s

Evaluation:
[my_val x8]	PSNR: 22.05 (Best: 22.05 @epoch 451)
Total time: 3.77s

[Epoch 452]	Learning rate: 5.76e-5
[1600/1600]	[L1: 43.1066]	81.5+6.3s

Evaluation:
[my_val x8]	PSNR: 21.83 (Best: 22.05 @epoch 451)
Total time: 3.80s

[Epoch 453]	Learning rate: 5.74e-5
[1600/1600]	[L1: 43.6125]	83.8+6.9s

Evaluation:
[my_val x8]	PSNR: 21.95 (Best: 22.05 @epoch 451)
Total time: 3.80s

[Epoch 454]	Learning rate: 5.72e-5
[1600/1600]	[L1: 43.0544]	82.9+6.5s

Evaluation:
[my_val x8]	PSNR: 22.23 (Best: 22.23 @epoch 454)
Total time: 3.85s

[Epoch 455]	Learning rate: 5.71e-5
[1600/1600]	[L1: 43.5973]	83.7+6.5s

Evaluation:
[my_val x8]	PSNR: 21.94 (Best: 22.23 @epoch 454)
Total time: 3.84s

[Epoch 456]	Learning rate: 5.69e-5
[1600/1600]	[L1: 42.4097]	83.3+6.4s

Evaluation:
[my_val x8]	PSNR: 21.08 (Best: 22.23 @epoch 454)
Total time: 3.64s

[Epoch 457]	Learning rate: 5.68e-5
[1600/1600]	[L1: 43.8766]	83.1+7.2s

Evaluation:
[my_val x8]	PSNR: 21.77 (Best: 22.23 @epoch 454)
Total time: 3.79s

[Epoch 458]	Learning rate: 5.66e-5
[1600/1600]	[L1: 44.3072]	83.9+6.3s

Evaluation:
[my_val x8]	PSNR: 21.69 (Best: 22.23 @epoch 454)
Total time: 3.66s

[Epoch 459]	Learning rate: 5.65e-5
[1600/1600]	[L1: 43.4000]	82.0+7.0s

Evaluation:
[my_val x8]	PSNR: 21.55 (Best: 22.23 @epoch 454)
Total time: 3.82s

[Epoch 460]	Learning rate: 5.63e-5
[1600/1600]	[L1: 42.5880]	82.5+6.6s

Evaluation:
[my_val x8]	PSNR: 21.90 (Best: 22.23 @epoch 454)
Total time: 3.71s

[Epoch 461]	Learning rate: 5.62e-5
[1600/1600]	[L1: 43.2717]	83.0+6.3s

Evaluation:
[my_val x8]	PSNR: 21.08 (Best: 22.23 @epoch 454)
Total time: 3.78s

[Epoch 462]	Learning rate: 5.60e-5
[1600/1600]	[L1: 42.9441]	82.6+7.3s

Evaluation:
[my_val x8]	PSNR: 21.02 (Best: 22.23 @epoch 454)
Total time: 3.70s

[Epoch 463]	Learning rate: 5.58e-5
[1600/1600]	[L1: 43.6162]	84.2+6.3s

Evaluation:
[my_val x8]	PSNR: 21.67 (Best: 22.23 @epoch 454)
Total time: 3.84s

[Epoch 464]	Learning rate: 5.57e-5
[1600/1600]	[L1: 42.9746]	83.7+6.7s

Evaluation:
[my_val x8]	PSNR: 21.49 (Best: 22.23 @epoch 454)
Total time: 3.80s

[Epoch 465]	Learning rate: 5.55e-5
[1600/1600]	[L1: 42.9573]	82.9+6.5s

Evaluation:
[my_val x8]	PSNR: 21.75 (Best: 22.23 @epoch 454)
Total time: 3.83s

[Epoch 466]	Learning rate: 5.54e-5
[1600/1600]	[L1: 43.0911]	84.0+6.1s

Evaluation:
[my_val x8]	PSNR: 22.04 (Best: 22.23 @epoch 454)
Total time: 3.94s

[Epoch 467]	Learning rate: 5.52e-5
[1600/1600]	[L1: 43.2790]	83.3+6.3s

Evaluation:
[my_val x8]	PSNR: 21.90 (Best: 22.23 @epoch 454)
Total time: 3.83s

[Epoch 468]	Learning rate: 5.51e-5
[1600/1600]	[L1: 43.2311]	83.6+6.0s

Evaluation:
[my_val x8]	PSNR: 21.34 (Best: 22.23 @epoch 454)
Total time: 3.75s

[Epoch 469]	Learning rate: 5.49e-5
[1600/1600]	[L1: 42.5994]	83.8+6.7s

Evaluation:
[my_val x8]	PSNR: 21.67 (Best: 22.23 @epoch 454)
Total time: 3.78s

[Epoch 470]	Learning rate: 5.48e-5
[1600/1600]	[L1: 42.7639]	83.3+7.1s

Evaluation:
[my_val x8]	PSNR: 21.55 (Best: 22.23 @epoch 454)
Total time: 3.76s

[Epoch 471]	Learning rate: 5.46e-5
[1600/1600]	[L1: 42.4552]	84.4+6.3s

Evaluation:
[my_val x8]	PSNR: 21.42 (Best: 22.23 @epoch 454)
Total time: 3.80s

[Epoch 472]	Learning rate: 5.44e-5
[1600/1600]	[L1: 43.7216]	81.7+6.5s

Evaluation:
[my_val x8]	PSNR: 21.75 (Best: 22.23 @epoch 454)
Total time: 3.70s

[Epoch 473]	Learning rate: 5.43e-5
[1600/1600]	[L1: 42.7932]	82.4+6.5s

Evaluation:
[my_val x8]	PSNR: 21.58 (Best: 22.23 @epoch 454)
Total time: 3.68s

[Epoch 474]	Learning rate: 5.41e-5
[1600/1600]	[L1: 43.3669]	82.7+6.4s

Evaluation:
[my_val x8]	PSNR: 21.61 (Best: 22.23 @epoch 454)
Total time: 3.82s

[Epoch 475]	Learning rate: 5.40e-5
[1600/1600]	[L1: 42.3901]	83.2+6.7s

Evaluation:
[my_val x8]	PSNR: 21.09 (Best: 22.23 @epoch 454)
Total time: 3.83s

[Epoch 476]	Learning rate: 5.38e-5
[1600/1600]	[L1: 42.9457]	83.1+6.7s

Evaluation:
[my_val x8]	PSNR: 21.97 (Best: 22.23 @epoch 454)
Total time: 3.78s

[Epoch 477]	Learning rate: 5.37e-5
[1600/1600]	[L1: 42.5816]	83.4+6.7s

Evaluation:
[my_val x8]	PSNR: 21.49 (Best: 22.23 @epoch 454)
Total time: 3.70s

[Epoch 478]	Learning rate: 5.35e-5
[1600/1600]	[L1: 43.3977]	83.6+6.4s

Evaluation:
[my_val x8]	PSNR: 21.66 (Best: 22.23 @epoch 454)
Total time: 3.88s

[Epoch 479]	Learning rate: 5.33e-5
[1600/1600]	[L1: 42.7281]	83.8+6.9s

Evaluation:
[my_val x8]	PSNR: 21.49 (Best: 22.23 @epoch 454)
Total time: 3.84s

[Epoch 480]	Learning rate: 5.32e-5
[1600/1600]	[L1: 43.3499]	82.1+6.4s

Evaluation:
[my_val x8]	PSNR: 21.33 (Best: 22.23 @epoch 454)
Total time: 3.91s

[Epoch 481]	Learning rate: 5.30e-5
[1600/1600]	[L1: 43.8311]	83.1+7.3s

Evaluation:
[my_val x8]	PSNR: 21.53 (Best: 22.23 @epoch 454)
Total time: 3.59s

[Epoch 482]	Learning rate: 5.29e-5
[1600/1600]	[L1: 42.6241]	82.9+6.2s

Evaluation:
[my_val x8]	PSNR: 21.66 (Best: 22.23 @epoch 454)
Total time: 3.78s

[Epoch 483]	Learning rate: 5.27e-5
[1600/1600]	[L1: 43.0951]	83.5+6.5s

Evaluation:
[my_val x8]	PSNR: 21.62 (Best: 22.23 @epoch 454)
Total time: 3.82s

[Epoch 484]	Learning rate: 5.26e-5
[1600/1600]	[L1: 42.5456]	83.4+6.3s

Evaluation:
[my_val x8]	PSNR: 21.94 (Best: 22.23 @epoch 454)
Total time: 3.82s

[Epoch 485]	Learning rate: 5.24e-5
[1600/1600]	[L1: 42.3180]	83.6+6.5s

Evaluation:
[my_val x8]	PSNR: 21.81 (Best: 22.23 @epoch 454)
Total time: 3.72s

[Epoch 486]	Learning rate: 5.22e-5
[1600/1600]	[L1: 41.9821]	83.2+6.5s

Evaluation:
[my_val x8]	PSNR: 21.33 (Best: 22.23 @epoch 454)
Total time: 3.68s

[Epoch 487]	Learning rate: 5.21e-5
[1600/1600]	[L1: 42.7055]	81.7+6.4s

Evaluation:
[my_val x8]	PSNR: 21.82 (Best: 22.23 @epoch 454)
Total time: 3.63s

[Epoch 488]	Learning rate: 5.19e-5
[1600/1600]	[L1: 43.1866]	82.5+6.8s

Evaluation:
[my_val x8]	PSNR: 21.34 (Best: 22.23 @epoch 454)
Total time: 3.79s

[Epoch 489]	Learning rate: 5.18e-5
[1600/1600]	[L1: 42.8495]	82.0+6.8s

Evaluation:
[my_val x8]	PSNR: 21.61 (Best: 22.23 @epoch 454)
Total time: 3.81s

[Epoch 490]	Learning rate: 5.16e-5
[1600/1600]	[L1: 42.7600]	82.8+6.9s

Evaluation:
[my_val x8]	PSNR: 21.01 (Best: 22.23 @epoch 454)
Total time: 3.71s

[Epoch 491]	Learning rate: 5.15e-5
[1600/1600]	[L1: 42.6710]	82.2+6.4s

Evaluation:
[my_val x8]	PSNR: 21.39 (Best: 22.23 @epoch 454)
Total time: 3.76s

[Epoch 492]	Learning rate: 5.13e-5
[1600/1600]	[L1: 42.8828]	82.9+6.7s

Evaluation:
[my_val x8]	PSNR: 21.61 (Best: 22.23 @epoch 454)
Total time: 3.80s

[Epoch 493]	Learning rate: 5.11e-5
[1600/1600]	[L1: 43.1369]	83.6+6.5s

Evaluation:
[my_val x8]	PSNR: 21.20 (Best: 22.23 @epoch 454)
Total time: 3.76s

[Epoch 494]	Learning rate: 5.10e-5
[1600/1600]	[L1: 43.5260]	82.2+6.6s

Evaluation:
[my_val x8]	PSNR: 21.54 (Best: 22.23 @epoch 454)
Total time: 3.77s

[Epoch 495]	Learning rate: 5.08e-5
[1600/1600]	[L1: 42.1778]	83.2+6.8s

Evaluation:
[my_val x8]	PSNR: 21.65 (Best: 22.23 @epoch 454)
Total time: 3.79s

[Epoch 496]	Learning rate: 5.07e-5
[1600/1600]	[L1: 43.0407]	80.8+6.9s

Evaluation:
[my_val x8]	PSNR: 21.62 (Best: 22.23 @epoch 454)
Total time: 3.80s

[Epoch 497]	Learning rate: 5.05e-5
[1600/1600]	[L1: 41.9063]	82.4+6.2s

Evaluation:
[my_val x8]	PSNR: 21.08 (Best: 22.23 @epoch 454)
Total time: 3.77s

[Epoch 498]	Learning rate: 5.04e-5
[1600/1600]	[L1: 42.1448]	82.6+6.6s

Evaluation:
[my_val x8]	PSNR: 21.17 (Best: 22.23 @epoch 454)
Total time: 3.70s

[Epoch 499]	Learning rate: 5.02e-5
[1600/1600]	[L1: 42.7923]	83.3+6.8s

Evaluation:
[my_val x8]	PSNR: 21.50 (Best: 22.23 @epoch 454)
Total time: 3.71s

[Epoch 500]	Learning rate: 5.01e-5
[1600/1600]	[L1: 42.9852]	82.7+6.8s

Evaluation:
[my_val x8]	PSNR: 21.87 (Best: 22.23 @epoch 454)
Total time: 3.67s

[Epoch 501]	Learning rate: 4.99e-5
[1600/1600]	[L1: 42.8107]	81.5+6.7s

Evaluation:
[my_val x8]	PSNR: 21.74 (Best: 22.23 @epoch 454)
Total time: 3.77s

[Epoch 502]	Learning rate: 4.97e-5
[1600/1600]	[L1: 43.2055]	80.8+7.3s

Evaluation:
[my_val x8]	PSNR: 21.35 (Best: 22.23 @epoch 454)
Total time: 3.79s

[Epoch 503]	Learning rate: 4.96e-5
[1600/1600]	[L1: 42.9055]	82.9+6.4s

Evaluation:
[my_val x8]	PSNR: 21.32 (Best: 22.23 @epoch 454)
Total time: 3.89s

[Epoch 504]	Learning rate: 4.94e-5
[1600/1600]	[L1: 42.3664]	82.7+6.6s

Evaluation:
[my_val x8]	PSNR: 21.70 (Best: 22.23 @epoch 454)
Total time: 3.65s

[Epoch 505]	Learning rate: 4.93e-5
[1600/1600]	[L1: 42.8095]	83.4+6.7s

Evaluation:
[my_val x8]	PSNR: 21.45 (Best: 22.23 @epoch 454)
Total time: 3.87s

[Epoch 506]	Learning rate: 4.91e-5
[1600/1600]	[L1: 41.9024]	83.4+7.2s

Evaluation:
[my_val x8]	PSNR: 21.44 (Best: 22.23 @epoch 454)
Total time: 3.60s

[Epoch 507]	Learning rate: 4.90e-5
[1600/1600]	[L1: 42.9372]	84.0+7.3s

Evaluation:
[my_val x8]	PSNR: 21.94 (Best: 22.23 @epoch 454)
Total time: 3.70s

[Epoch 508]	Learning rate: 4.88e-5
[1600/1600]	[L1: 42.8539]	83.7+6.9s

Evaluation:
[my_val x8]	PSNR: 21.60 (Best: 22.23 @epoch 454)
Total time: 3.75s

[Epoch 509]	Learning rate: 4.86e-5
[1600/1600]	[L1: 42.6147]	82.3+6.5s

Evaluation:
[my_val x8]	PSNR: 21.01 (Best: 22.23 @epoch 454)
Total time: 3.78s

[Epoch 510]	Learning rate: 4.85e-5
[1600/1600]	[L1: 42.5327]	83.0+6.7s

Evaluation:
[my_val x8]	PSNR: 21.78 (Best: 22.23 @epoch 454)
Total time: 3.79s

[Epoch 511]	Learning rate: 4.83e-5
[1600/1600]	[L1: 42.5910]	82.9+6.2s

Evaluation:
[my_val x8]	PSNR: 21.61 (Best: 22.23 @epoch 454)
Total time: 3.71s

[Epoch 512]	Learning rate: 4.82e-5
[1600/1600]	[L1: 42.7377]	83.4+6.4s

Evaluation:
[my_val x8]	PSNR: 21.73 (Best: 22.23 @epoch 454)
Total time: 3.72s

[Epoch 513]	Learning rate: 4.80e-5
[1600/1600]	[L1: 41.9273]	81.1+6.2s

Evaluation:
[my_val x8]	PSNR: 21.81 (Best: 22.23 @epoch 454)
Total time: 3.78s

[Epoch 514]	Learning rate: 4.79e-5
[1600/1600]	[L1: 42.3201]	83.5+6.4s

Evaluation:
[my_val x8]	PSNR: 21.35 (Best: 22.23 @epoch 454)
Total time: 3.84s

[Epoch 515]	Learning rate: 4.77e-5
[1600/1600]	[L1: 41.7562]	82.9+6.2s

Evaluation:
[my_val x8]	PSNR: 21.16 (Best: 22.23 @epoch 454)
Total time: 3.76s

[Epoch 516]	Learning rate: 4.75e-5
[1600/1600]	[L1: 41.3877]	83.3+6.6s

Evaluation:
[my_val x8]	PSNR: 21.32 (Best: 22.23 @epoch 454)
Total time: 3.77s

[Epoch 517]	Learning rate: 4.74e-5
[1600/1600]	[L1: 42.6945]	83.0+7.0s

Evaluation:
[my_val x8]	PSNR: 21.40 (Best: 22.23 @epoch 454)
Total time: 3.69s

[Epoch 518]	Learning rate: 4.72e-5
[1600/1600]	[L1: 42.9380]	82.2+6.5s

Evaluation:
[my_val x8]	PSNR: 20.94 (Best: 22.23 @epoch 454)
Total time: 3.70s

[Epoch 519]	Learning rate: 4.71e-5
[1600/1600]	[L1: 43.6224]	84.0+7.0s

Evaluation:
[my_val x8]	PSNR: 21.41 (Best: 22.23 @epoch 454)
Total time: 3.75s

[Epoch 520]	Learning rate: 4.69e-5
[1600/1600]	[L1: 41.8548]	81.6+6.9s

Evaluation:
[my_val x8]	PSNR: 21.38 (Best: 22.23 @epoch 454)
Total time: 3.65s

[Epoch 521]	Learning rate: 4.68e-5
[1600/1600]	[L1: 42.2289]	83.7+6.4s

Evaluation:
[my_val x8]	PSNR: 21.78 (Best: 22.23 @epoch 454)
Total time: 3.82s

[Epoch 522]	Learning rate: 4.66e-5
[1600/1600]	[L1: 43.1237]	83.2+6.4s

Evaluation:
[my_val x8]	PSNR: 21.78 (Best: 22.23 @epoch 454)
Total time: 3.64s

[Epoch 523]	Learning rate: 4.64e-5
[1600/1600]	[L1: 41.9995]	83.0+6.9s

Evaluation:
[my_val x8]	PSNR: 21.47 (Best: 22.23 @epoch 454)
Total time: 3.79s

[Epoch 524]	Learning rate: 4.63e-5
[1600/1600]	[L1: 42.1111]	82.4+6.2s

Evaluation:
[my_val x8]	PSNR: 21.35 (Best: 22.23 @epoch 454)
Total time: 3.69s

[Epoch 525]	Learning rate: 4.61e-5
[1600/1600]	[L1: 42.2043]	83.7+6.4s

Evaluation:
[my_val x8]	PSNR: 21.69 (Best: 22.23 @epoch 454)
Total time: 3.78s

[Epoch 526]	Learning rate: 4.60e-5
[1600/1600]	[L1: 42.3949]	84.3+6.8s

Evaluation:
[my_val x8]	PSNR: 21.55 (Best: 22.23 @epoch 454)
Total time: 3.88s

[Epoch 527]	Learning rate: 4.58e-5
[1600/1600]	[L1: 42.6438]	83.3+6.4s

Evaluation:
[my_val x8]	PSNR: 21.66 (Best: 22.23 @epoch 454)
Total time: 3.77s

[Epoch 528]	Learning rate: 4.57e-5
[1600/1600]	[L1: 42.7170]	83.1+6.7s

Evaluation:
[my_val x8]	PSNR: 21.67 (Best: 22.23 @epoch 454)
Total time: 3.76s

[Epoch 529]	Learning rate: 4.55e-5
[1600/1600]	[L1: 43.2403]	82.8+6.5s

Evaluation:
[my_val x8]	PSNR: 22.16 (Best: 22.23 @epoch 454)
Total time: 3.70s

[Epoch 530]	Learning rate: 4.53e-5
[1600/1600]	[L1: 42.9681]	83.5+7.4s

Evaluation:
[my_val x8]	PSNR: 21.07 (Best: 22.23 @epoch 454)
Total time: 3.66s

[Epoch 531]	Learning rate: 4.52e-5
[1600/1600]	[L1: 42.4718]	82.8+6.4s

Evaluation:
[my_val x8]	PSNR: 21.30 (Best: 22.23 @epoch 454)
Total time: 3.58s

[Epoch 532]	Learning rate: 4.50e-5
[1600/1600]	[L1: 42.8121]	83.4+6.1s

Evaluation:
[my_val x8]	PSNR: 21.96 (Best: 22.23 @epoch 454)
Total time: 3.77s

[Epoch 533]	Learning rate: 4.49e-5
[1600/1600]	[L1: 42.0994]	82.8+6.4s

Evaluation:
[my_val x8]	PSNR: 21.46 (Best: 22.23 @epoch 454)
Total time: 3.72s

[Epoch 534]	Learning rate: 4.47e-5
[1600/1600]	[L1: 42.7935]	82.2+6.8s

Evaluation:
[my_val x8]	PSNR: 21.43 (Best: 22.23 @epoch 454)
Total time: 3.78s

[Epoch 535]	Learning rate: 4.46e-5
[1600/1600]	[L1: 42.0116]	80.8+6.5s

Evaluation:
[my_val x8]	PSNR: 21.40 (Best: 22.23 @epoch 454)
Total time: 3.70s

[Epoch 536]	Learning rate: 4.44e-5
[1600/1600]	[L1: 42.2008]	82.0+6.5s

Evaluation:
[my_val x8]	PSNR: 21.69 (Best: 22.23 @epoch 454)
Total time: 3.77s

[Epoch 537]	Learning rate: 4.43e-5
[1600/1600]	[L1: 42.6258]	82.8+7.1s

Evaluation:
[my_val x8]	PSNR: 21.68 (Best: 22.23 @epoch 454)
Total time: 3.77s

[Epoch 538]	Learning rate: 4.41e-5
[1600/1600]	[L1: 42.0921]	81.6+6.9s

Evaluation:
[my_val x8]	PSNR: 21.57 (Best: 22.23 @epoch 454)
Total time: 3.86s

[Epoch 539]	Learning rate: 4.39e-5
[1600/1600]	[L1: 42.0616]	83.6+6.8s

Evaluation:
[my_val x8]	PSNR: 20.71 (Best: 22.23 @epoch 454)
Total time: 3.73s

[Epoch 540]	Learning rate: 4.38e-5
[1600/1600]	[L1: 41.4939]	83.6+6.4s

Evaluation:
[my_val x8]	PSNR: 21.26 (Best: 22.23 @epoch 454)
Total time: 3.78s

[Epoch 541]	Learning rate: 4.36e-5
[1600/1600]	[L1: 42.4076]	84.1+7.2s

Evaluation:
[my_val x8]	PSNR: 21.53 (Best: 22.23 @epoch 454)
Total time: 3.77s

[Epoch 542]	Learning rate: 4.35e-5
[1600/1600]	[L1: 42.2762]	82.4+7.1s

Evaluation:
[my_val x8]	PSNR: 21.52 (Best: 22.23 @epoch 454)
Total time: 3.71s

[Epoch 543]	Learning rate: 4.33e-5
[1600/1600]	[L1: 41.8586]	83.3+6.4s

Evaluation:
[my_val x8]	PSNR: 21.57 (Best: 22.23 @epoch 454)
Total time: 3.70s

[Epoch 544]	Learning rate: 4.32e-5
[1600/1600]	[L1: 42.1115]	82.8+6.5s

Evaluation:
[my_val x8]	PSNR: 20.90 (Best: 22.23 @epoch 454)
Total time: 3.70s

[Epoch 545]	Learning rate: 4.30e-5
[1600/1600]	[L1: 42.3613]	83.1+6.8s

Evaluation:
[my_val x8]	PSNR: 21.06 (Best: 22.23 @epoch 454)
Total time: 3.62s

[Epoch 546]	Learning rate: 4.29e-5
[1600/1600]	[L1: 42.9083]	83.3+6.1s

Evaluation:
[my_val x8]	PSNR: 21.55 (Best: 22.23 @epoch 454)
Total time: 3.81s

[Epoch 547]	Learning rate: 4.27e-5
[1600/1600]	[L1: 42.3518]	81.9+6.7s

Evaluation:
[my_val x8]	PSNR: 21.76 (Best: 22.23 @epoch 454)
Total time: 3.77s

[Epoch 548]	Learning rate: 4.25e-5
[1600/1600]	[L1: 41.5488]	83.7+6.5s

Evaluation:
[my_val x8]	PSNR: 20.88 (Best: 22.23 @epoch 454)
Total time: 3.86s

[Epoch 549]	Learning rate: 4.24e-5
[1600/1600]	[L1: 41.0577]	82.8+6.4s

Evaluation:
[my_val x8]	PSNR: 21.65 (Best: 22.23 @epoch 454)
Total time: 3.77s

[Epoch 550]	Learning rate: 4.22e-5
[1600/1600]	[L1: 42.1744]	82.5+6.6s

Evaluation:
[my_val x8]	PSNR: 21.59 (Best: 22.23 @epoch 454)
Total time: 3.90s

[Epoch 551]	Learning rate: 4.21e-5
[1600/1600]	[L1: 42.2668]	84.3+6.8s

Evaluation:
[my_val x8]	PSNR: 21.98 (Best: 22.23 @epoch 454)
Total time: 3.87s

[Epoch 552]	Learning rate: 4.19e-5
[1600/1600]	[L1: 41.8888]	82.2+6.6s

Evaluation:
[my_val x8]	PSNR: 21.50 (Best: 22.23 @epoch 454)
Total time: 3.71s

[Epoch 553]	Learning rate: 4.18e-5
[1600/1600]	[L1: 42.2799]	84.0+7.6s

Evaluation:
[my_val x8]	PSNR: 21.68 (Best: 22.23 @epoch 454)
Total time: 3.81s

[Epoch 554]	Learning rate: 4.16e-5
[1600/1600]	[L1: 41.7411]	83.3+6.4s

Evaluation:
[my_val x8]	PSNR: 22.07 (Best: 22.23 @epoch 454)
Total time: 3.74s

[Epoch 555]	Learning rate: 4.15e-5
[1600/1600]	[L1: 42.2244]	83.1+6.4s

Evaluation:
[my_val x8]	PSNR: 21.38 (Best: 22.23 @epoch 454)
Total time: 3.57s

[Epoch 556]	Learning rate: 4.13e-5
[1600/1600]	[L1: 41.7883]	83.3+6.5s

Evaluation:
[my_val x8]	PSNR: 22.22 (Best: 22.23 @epoch 454)
Total time: 3.78s

[Epoch 557]	Learning rate: 4.12e-5
[1600/1600]	[L1: 42.2567]	83.6+6.2s

Evaluation:
[my_val x8]	PSNR: 22.08 (Best: 22.23 @epoch 454)
Total time: 3.69s

[Epoch 558]	Learning rate: 4.10e-5
[1600/1600]	[L1: 41.9450]	83.3+6.6s

Evaluation:
[my_val x8]	PSNR: 21.56 (Best: 22.23 @epoch 454)
Total time: 3.79s

[Epoch 559]	Learning rate: 4.08e-5
[1600/1600]	[L1: 42.1178]	82.8+6.5s

Evaluation:
[my_val x8]	PSNR: 21.81 (Best: 22.23 @epoch 454)
Total time: 3.82s

[Epoch 560]	Learning rate: 4.07e-5
[1600/1600]	[L1: 41.9675]	83.0+7.0s

Evaluation:
[my_val x8]	PSNR: 21.43 (Best: 22.23 @epoch 454)
Total time: 3.80s

[Epoch 561]	Learning rate: 4.05e-5
[1600/1600]	[L1: 41.9134]	82.6+6.6s

Evaluation:
[my_val x8]	PSNR: 22.01 (Best: 22.23 @epoch 454)
Total time: 3.78s

[Epoch 562]	Learning rate: 4.04e-5
[1600/1600]	[L1: 41.8533]	83.7+6.3s

Evaluation:
[my_val x8]	PSNR: 21.62 (Best: 22.23 @epoch 454)
Total time: 3.89s

[Epoch 563]	Learning rate: 4.02e-5
[1600/1600]	[L1: 41.7592]	83.3+7.0s

Evaluation:
[my_val x8]	PSNR: 21.75 (Best: 22.23 @epoch 454)
Total time: 3.85s

[Epoch 564]	Learning rate: 4.01e-5
[1600/1600]	[L1: 42.3356]	84.1+6.3s

Evaluation:
[my_val x8]	PSNR: 21.41 (Best: 22.23 @epoch 454)
Total time: 3.77s

[Epoch 565]	Learning rate: 3.99e-5
[1600/1600]	[L1: 41.7906]	83.3+6.3s

Evaluation:
[my_val x8]	PSNR: 21.45 (Best: 22.23 @epoch 454)
Total time: 3.55s

[Epoch 566]	Learning rate: 3.98e-5
[1600/1600]	[L1: 41.8049]	83.6+6.6s

Evaluation:
[my_val x8]	PSNR: 22.09 (Best: 22.23 @epoch 454)
Total time: 3.86s

[Epoch 567]	Learning rate: 3.96e-5
[1600/1600]	[L1: 42.6253]	83.1+6.8s

Evaluation:
[my_val x8]	PSNR: 21.41 (Best: 22.23 @epoch 454)
Total time: 3.66s

[Epoch 568]	Learning rate: 3.95e-5
[1600/1600]	[L1: 41.8540]	84.1+6.9s

Evaluation:
[my_val x8]	PSNR: 21.92 (Best: 22.23 @epoch 454)
Total time: 3.69s

[Epoch 569]	Learning rate: 3.93e-5
[1600/1600]	[L1: 42.6973]	83.8+7.1s

Evaluation:
[my_val x8]	PSNR: 22.45 (Best: 22.45 @epoch 569)
Total time: 3.87s

[Epoch 570]	Learning rate: 3.92e-5
[1600/1600]	[L1: 41.4001]	84.1+6.9s

Evaluation:
[my_val x8]	PSNR: 21.14 (Best: 22.45 @epoch 569)
Total time: 3.71s

[Epoch 571]	Learning rate: 3.90e-5
[1600/1600]	[L1: 41.5558]	84.5+6.6s

Evaluation:
[my_val x8]	PSNR: 21.92 (Best: 22.45 @epoch 569)
Total time: 3.74s

[Epoch 572]	Learning rate: 3.88e-5
[1600/1600]	[L1: 42.1369]	83.1+6.6s

Evaluation:
[my_val x8]	PSNR: 21.48 (Best: 22.45 @epoch 569)
Total time: 3.87s

[Epoch 573]	Learning rate: 3.87e-5
[1600/1600]	[L1: 41.0391]	82.7+6.6s

Evaluation:
[my_val x8]	PSNR: 21.56 (Best: 22.45 @epoch 569)
Total time: 3.79s

[Epoch 574]	Learning rate: 3.85e-5
[1600/1600]	[L1: 41.1199]	83.0+6.8s

Evaluation:
[my_val x8]	PSNR: 21.42 (Best: 22.45 @epoch 569)
Total time: 3.80s

[Epoch 575]	Learning rate: 3.84e-5
[1600/1600]	[L1: 41.2650]	82.3+6.2s

Evaluation:
[my_val x8]	PSNR: 21.46 (Best: 22.45 @epoch 569)
Total time: 3.72s

[Epoch 576]	Learning rate: 3.82e-5
[1600/1600]	[L1: 41.8492]	83.2+6.7s

Evaluation:
[my_val x8]	PSNR: 21.76 (Best: 22.45 @epoch 569)
Total time: 3.62s

[Epoch 577]	Learning rate: 3.81e-5
[1600/1600]	[L1: 42.4919]	82.5+6.6s

Evaluation:
[my_val x8]	PSNR: 22.15 (Best: 22.45 @epoch 569)
Total time: 3.74s

[Epoch 578]	Learning rate: 3.79e-5
[1600/1600]	[L1: 41.3766]	82.2+7.0s

Evaluation:
[my_val x8]	PSNR: 22.04 (Best: 22.45 @epoch 569)
Total time: 4.03s

[Epoch 579]	Learning rate: 3.78e-5
[1600/1600]	[L1: 41.9267]	80.5+6.5s

Evaluation:
[my_val x8]	PSNR: 21.30 (Best: 22.45 @epoch 569)
Total time: 3.82s

[Epoch 580]	Learning rate: 3.76e-5
[1600/1600]	[L1: 42.4169]	83.6+6.4s

Evaluation:
[my_val x8]	PSNR: 21.46 (Best: 22.45 @epoch 569)
Total time: 3.76s

[Epoch 581]	Learning rate: 3.75e-5
[1600/1600]	[L1: 41.7723]	80.2+6.6s

Evaluation:
[my_val x8]	PSNR: 21.43 (Best: 22.45 @epoch 569)
Total time: 3.75s

[Epoch 582]	Learning rate: 3.73e-5
[1600/1600]	[L1: 41.8973]	82.3+6.2s

Evaluation:
[my_val x8]	PSNR: 21.02 (Best: 22.45 @epoch 569)
Total time: 3.83s

[Epoch 583]	Learning rate: 3.72e-5
[1600/1600]	[L1: 40.9657]	83.4+6.1s

Evaluation:
[my_val x8]	PSNR: 22.01 (Best: 22.45 @epoch 569)
Total time: 3.78s

[Epoch 584]	Learning rate: 3.70e-5
[1600/1600]	[L1: 41.8594]	83.7+6.9s

Evaluation:
[my_val x8]	PSNR: 21.45 (Best: 22.45 @epoch 569)
Total time: 3.63s

[Epoch 585]	Learning rate: 3.69e-5
[1600/1600]	[L1: 41.1717]	81.7+6.3s

Evaluation:
[my_val x8]	PSNR: 21.38 (Best: 22.45 @epoch 569)
Total time: 3.78s

[Epoch 586]	Learning rate: 3.67e-5
[1600/1600]	[L1: 41.4113]	83.6+7.0s

Evaluation:
[my_val x8]	PSNR: 21.68 (Best: 22.45 @epoch 569)
Total time: 3.78s

[Epoch 587]	Learning rate: 3.66e-5
[1600/1600]	[L1: 41.1497]	83.4+6.8s

Evaluation:
[my_val x8]	PSNR: 21.03 (Best: 22.45 @epoch 569)
Total time: 3.72s

[Epoch 588]	Learning rate: 3.64e-5
[1600/1600]	[L1: 40.9552]	82.8+7.1s

Evaluation:
[my_val x8]	PSNR: 22.17 (Best: 22.45 @epoch 569)
Total time: 3.79s

[Epoch 589]	Learning rate: 3.63e-5
[1600/1600]	[L1: 42.0700]	84.4+7.4s

Evaluation:
[my_val x8]	PSNR: 21.45 (Best: 22.45 @epoch 569)
Total time: 3.63s

[Epoch 590]	Learning rate: 3.61e-5
[1600/1600]	[L1: 41.5583]	83.6+6.9s

Evaluation:
[my_val x8]	PSNR: 21.48 (Best: 22.45 @epoch 569)
Total time: 3.79s

[Epoch 591]	Learning rate: 3.60e-5
[1600/1600]	[L1: 41.2499]	83.5+6.4s

Evaluation:
[my_val x8]	PSNR: 21.73 (Best: 22.45 @epoch 569)
Total time: 3.92s

[Epoch 592]	Learning rate: 3.58e-5
[1600/1600]	[L1: 41.9207]	84.0+6.8s

Evaluation:
[my_val x8]	PSNR: 21.45 (Best: 22.45 @epoch 569)
Total time: 3.90s

[Epoch 593]	Learning rate: 3.57e-5
[1600/1600]	[L1: 41.8494]	82.4+6.6s

Evaluation:
[my_val x8]	PSNR: 21.61 (Best: 22.45 @epoch 569)
Total time: 3.89s

[Epoch 594]	Learning rate: 3.55e-5
[1600/1600]	[L1: 41.4952]	82.3+6.6s

Evaluation:
[my_val x8]	PSNR: 21.93 (Best: 22.45 @epoch 569)
Total time: 3.81s

[Epoch 595]	Learning rate: 3.54e-5
[1600/1600]	[L1: 40.9062]	80.8+6.6s

Evaluation:
[my_val x8]	PSNR: 21.89 (Best: 22.45 @epoch 569)
Total time: 3.81s

[Epoch 596]	Learning rate: 3.52e-5
[1600/1600]	[L1: 42.4274]	81.9+6.9s

Evaluation:
[my_val x8]	PSNR: 21.76 (Best: 22.45 @epoch 569)
Total time: 3.80s

[Epoch 597]	Learning rate: 3.51e-5
[1600/1600]	[L1: 41.7988]	83.8+6.4s

Evaluation:
[my_val x8]	PSNR: 22.20 (Best: 22.45 @epoch 569)
Total time: 3.81s

[Epoch 598]	Learning rate: 3.49e-5
[1600/1600]	[L1: 42.1829]	83.2+6.3s

Evaluation:
[my_val x8]	PSNR: 21.44 (Best: 22.45 @epoch 569)
Total time: 3.77s

[Epoch 599]	Learning rate: 3.48e-5
[1600/1600]	[L1: 41.3947]	82.4+6.6s

Evaluation:
[my_val x8]	PSNR: 21.95 (Best: 22.45 @epoch 569)
Total time: 3.67s

[Epoch 600]	Learning rate: 3.46e-5
[1600/1600]	[L1: 41.7979]	83.4+6.8s

Evaluation:
[my_val x8]	PSNR: 21.64 (Best: 22.45 @epoch 569)
Total time: 3.72s

[Epoch 601]	Learning rate: 3.45e-5
[1600/1600]	[L1: 40.7165]	82.5+6.3s

Evaluation:
[my_val x8]	PSNR: 21.89 (Best: 22.45 @epoch 569)
Total time: 3.88s

[Epoch 602]	Learning rate: 3.43e-5
[1600/1600]	[L1: 40.9242]	82.3+6.7s

Evaluation:
[my_val x8]	PSNR: 21.99 (Best: 22.45 @epoch 569)
Total time: 3.90s

[Epoch 603]	Learning rate: 3.42e-5
[1600/1600]	[L1: 41.7570]	81.4+6.9s

Evaluation:
[my_val x8]	PSNR: 21.43 (Best: 22.45 @epoch 569)
Total time: 3.77s

[Epoch 604]	Learning rate: 3.40e-5
[1600/1600]	[L1: 41.5705]	83.3+6.4s

Evaluation:
[my_val x8]	PSNR: 21.45 (Best: 22.45 @epoch 569)
Total time: 3.87s

[Epoch 605]	Learning rate: 3.39e-5
[1600/1600]	[L1: 41.1186]	83.5+6.7s

Evaluation:
[my_val x8]	PSNR: 21.78 (Best: 22.45 @epoch 569)
Total time: 3.74s

[Epoch 606]	Learning rate: 3.37e-5
[1600/1600]	[L1: 42.5507]	84.5+6.2s

Evaluation:
[my_val x8]	PSNR: 21.64 (Best: 22.45 @epoch 569)
Total time: 3.80s

[Epoch 607]	Learning rate: 3.36e-5
[1600/1600]	[L1: 41.0553]	81.4+6.5s

Evaluation:
[my_val x8]	PSNR: 21.68 (Best: 22.45 @epoch 569)
Total time: 3.72s

[Epoch 608]	Learning rate: 3.34e-5
[1600/1600]	[L1: 42.1320]	83.2+6.3s

Evaluation:
[my_val x8]	PSNR: 22.31 (Best: 22.45 @epoch 569)
Total time: 3.82s

[Epoch 609]	Learning rate: 3.33e-5
[1600/1600]	[L1: 41.9661]	82.5+6.8s

Evaluation:
[my_val x8]	PSNR: 21.67 (Best: 22.45 @epoch 569)
Total time: 3.76s

[Epoch 610]	Learning rate: 3.31e-5
[1600/1600]	[L1: 41.9597]	83.3+6.6s

Evaluation:
[my_val x8]	PSNR: 21.41 (Best: 22.45 @epoch 569)
Total time: 3.66s

[Epoch 611]	Learning rate: 3.30e-5
[1600/1600]	[L1: 41.7434]	83.0+6.5s

Evaluation:
[my_val x8]	PSNR: 21.60 (Best: 22.45 @epoch 569)
Total time: 3.81s

[Epoch 612]	Learning rate: 3.28e-5
[1600/1600]	[L1: 42.0993]	82.8+6.3s

Evaluation:
[my_val x8]	PSNR: 21.40 (Best: 22.45 @epoch 569)
Total time: 3.82s

[Epoch 613]	Learning rate: 3.27e-5
[1600/1600]	[L1: 41.5062]	82.9+7.3s

Evaluation:
[my_val x8]	PSNR: 21.63 (Best: 22.45 @epoch 569)
Total time: 3.84s

[Epoch 614]	Learning rate: 3.25e-5
[1600/1600]	[L1: 42.0619]	83.6+6.7s

Evaluation:
[my_val x8]	PSNR: 21.42 (Best: 22.45 @epoch 569)
Total time: 3.96s

[Epoch 615]	Learning rate: 3.24e-5
[1600/1600]	[L1: 40.8630]	83.9+6.7s

Evaluation:
[my_val x8]	PSNR: 21.33 (Best: 22.45 @epoch 569)
Total time: 3.91s

[Epoch 616]	Learning rate: 3.22e-5
[1600/1600]	[L1: 42.3563]	83.6+6.7s

Evaluation:
[my_val x8]	PSNR: 22.08 (Best: 22.45 @epoch 569)
Total time: 3.83s

[Epoch 617]	Learning rate: 3.21e-5
[1600/1600]	[L1: 41.7109]	82.8+6.6s

Evaluation:
[my_val x8]	PSNR: 21.78 (Best: 22.45 @epoch 569)
Total time: 3.73s

[Epoch 618]	Learning rate: 3.20e-5
[1600/1600]	[L1: 41.5743]	83.7+6.6s

Evaluation:
[my_val x8]	PSNR: 21.78 (Best: 22.45 @epoch 569)
Total time: 3.87s

[Epoch 619]	Learning rate: 3.18e-5
[1600/1600]	[L1: 41.6564]	84.1+6.3s

Evaluation:
[my_val x8]	PSNR: 21.45 (Best: 22.45 @epoch 569)
Total time: 3.77s

[Epoch 620]	Learning rate: 3.17e-5
[1600/1600]	[L1: 41.8058]	83.9+6.7s

Evaluation:
[my_val x8]	PSNR: 21.78 (Best: 22.45 @epoch 569)
Total time: 3.88s

[Epoch 621]	Learning rate: 3.15e-5
[1600/1600]	[L1: 41.0871]	83.2+6.6s

Evaluation:
[my_val x8]	PSNR: 21.42 (Best: 22.45 @epoch 569)
Total time: 3.73s

[Epoch 622]	Learning rate: 3.14e-5
[1600/1600]	[L1: 40.9598]	81.6+7.0s

Evaluation:
[my_val x8]	PSNR: 21.88 (Best: 22.45 @epoch 569)
Total time: 3.79s

[Epoch 623]	Learning rate: 3.12e-5
[1600/1600]	[L1: 41.5497]	83.5+6.5s

Evaluation:
[my_val x8]	PSNR: 21.75 (Best: 22.45 @epoch 569)
Total time: 3.79s

[Epoch 624]	Learning rate: 3.11e-5
[1600/1600]	[L1: 41.7061]	82.8+6.5s

Evaluation:
[my_val x8]	PSNR: 21.36 (Best: 22.45 @epoch 569)
Total time: 3.84s

[Epoch 625]	Learning rate: 3.09e-5
[1600/1600]	[L1: 40.9872]	82.1+6.3s

Evaluation:
[my_val x8]	PSNR: 21.19 (Best: 22.45 @epoch 569)
Total time: 3.93s

[Epoch 626]	Learning rate: 3.08e-5
[1600/1600]	[L1: 40.0301]	83.0+6.8s

Evaluation:
[my_val x8]	PSNR: 21.56 (Best: 22.45 @epoch 569)
Total time: 3.92s

[Epoch 627]	Learning rate: 3.06e-5
[1600/1600]	[L1: 41.0038]	82.3+7.3s

Evaluation:
[my_val x8]	PSNR: 21.01 (Best: 22.45 @epoch 569)
Total time: 3.73s

[Epoch 628]	Learning rate: 3.05e-5
[1600/1600]	[L1: 41.1778]	79.7+7.2s

Evaluation:
[my_val x8]	PSNR: 22.03 (Best: 22.45 @epoch 569)
Total time: 3.78s

[Epoch 629]	Learning rate: 3.04e-5
[1600/1600]	[L1: 40.6427]	81.2+6.7s

Evaluation:
[my_val x8]	PSNR: 21.25 (Best: 22.45 @epoch 569)
Total time: 3.79s

[Epoch 630]	Learning rate: 3.02e-5
[1600/1600]	[L1: 41.6512]	83.4+6.2s

Evaluation:
[my_val x8]	PSNR: 21.27 (Best: 22.45 @epoch 569)
Total time: 3.75s

[Epoch 631]	Learning rate: 3.01e-5
[1600/1600]	[L1: 41.9574]	80.5+7.0s

Evaluation:
[my_val x8]	PSNR: 21.63 (Best: 22.45 @epoch 569)
Total time: 3.82s

[Epoch 632]	Learning rate: 2.99e-5
[1600/1600]	[L1: 41.4354]	82.5+6.8s

Evaluation:
[my_val x8]	PSNR: 21.97 (Best: 22.45 @epoch 569)
Total time: 3.78s

[Epoch 633]	Learning rate: 2.98e-5
[1600/1600]	[L1: 41.3308]	83.2+7.2s

Evaluation:
[my_val x8]	PSNR: 22.17 (Best: 22.45 @epoch 569)
Total time: 3.77s

[Epoch 634]	Learning rate: 2.96e-5
[1600/1600]	[L1: 40.8204]	82.5+6.2s

Evaluation:
[my_val x8]	PSNR: 21.18 (Best: 22.45 @epoch 569)
Total time: 3.78s

[Epoch 635]	Learning rate: 2.95e-5
[1600/1600]	[L1: 40.9917]	83.6+6.2s

Evaluation:
[my_val x8]	PSNR: 21.90 (Best: 22.45 @epoch 569)
Total time: 3.82s

[Epoch 636]	Learning rate: 2.94e-5
[1600/1600]	[L1: 40.6715]	83.9+7.1s

Evaluation:
[my_val x8]	PSNR: 21.86 (Best: 22.45 @epoch 569)
Total time: 3.91s

[Epoch 637]	Learning rate: 2.92e-5
[1600/1600]	[L1: 41.9524]	84.6+6.7s

Evaluation:
[my_val x8]	PSNR: 21.88 (Best: 22.45 @epoch 569)
Total time: 3.80s

[Epoch 638]	Learning rate: 2.91e-5
[1600/1600]	[L1: 42.0143]	82.4+7.0s

Evaluation:
[my_val x8]	PSNR: 21.56 (Best: 22.45 @epoch 569)
Total time: 3.84s

[Epoch 639]	Learning rate: 2.89e-5
[1600/1600]	[L1: 41.8480]	83.7+6.7s

Evaluation:
[my_val x8]	PSNR: 21.77 (Best: 22.45 @epoch 569)
Total time: 3.85s

[Epoch 640]	Learning rate: 2.88e-5
[1600/1600]	[L1: 41.1752]	82.3+7.0s

Evaluation:
[my_val x8]	PSNR: 22.24 (Best: 22.45 @epoch 569)
Total time: 3.86s

[Epoch 641]	Learning rate: 2.86e-5
[1600/1600]	[L1: 40.8275]	83.7+7.1s

Evaluation:
[my_val x8]	PSNR: 21.77 (Best: 22.45 @epoch 569)
Total time: 3.90s

[Epoch 642]	Learning rate: 2.85e-5
[1600/1600]	[L1: 40.9911]	83.1+6.5s

Evaluation:
[my_val x8]	PSNR: 21.60 (Best: 22.45 @epoch 569)
Total time: 3.90s

[Epoch 643]	Learning rate: 2.84e-5
[1600/1600]	[L1: 40.9663]	83.1+6.8s

Evaluation:
[my_val x8]	PSNR: 21.57 (Best: 22.45 @epoch 569)
Total time: 3.76s

[Epoch 644]	Learning rate: 2.82e-5
[1600/1600]	[L1: 40.9807]	83.3+7.1s

Evaluation:
[my_val x8]	PSNR: 21.64 (Best: 22.45 @epoch 569)
Total time: 3.80s

[Epoch 645]	Learning rate: 2.81e-5
[1600/1600]	[L1: 40.7533]	84.2+6.7s

Evaluation:
[my_val x8]	PSNR: 22.18 (Best: 22.45 @epoch 569)
Total time: 3.73s

[Epoch 646]	Learning rate: 2.79e-5
[1600/1600]	[L1: 41.5448]	83.9+7.2s

Evaluation:
[my_val x8]	PSNR: 22.11 (Best: 22.45 @epoch 569)
Total time: 3.80s

[Epoch 647]	Learning rate: 2.78e-5
[1600/1600]	[L1: 41.2657]	83.4+7.6s

Evaluation:
[my_val x8]	PSNR: 21.60 (Best: 22.45 @epoch 569)
Total time: 3.67s

[Epoch 648]	Learning rate: 2.77e-5
[1600/1600]	[L1: 40.7346]	83.9+6.4s

Evaluation:
[my_val x8]	PSNR: 22.10 (Best: 22.45 @epoch 569)
Total time: 3.85s

[Epoch 649]	Learning rate: 2.75e-5
[1600/1600]	[L1: 41.5405]	82.7+7.5s

Evaluation:
[my_val x8]	PSNR: 21.38 (Best: 22.45 @epoch 569)
Total time: 3.84s

[Epoch 650]	Learning rate: 2.74e-5
[1600/1600]	[L1: 41.1314]	83.6+6.3s

Evaluation:
[my_val x8]	PSNR: 21.97 (Best: 22.45 @epoch 569)
Total time: 3.80s

[Epoch 651]	Learning rate: 2.72e-5
[1600/1600]	[L1: 41.6804]	84.4+6.7s

Evaluation:
[my_val x8]	PSNR: 21.99 (Best: 22.45 @epoch 569)
Total time: 3.93s

[Epoch 652]	Learning rate: 2.71e-5
[1600/1600]	[L1: 41.1831]	83.7+6.6s

Evaluation:
[my_val x8]	PSNR: 21.91 (Best: 22.45 @epoch 569)
Total time: 3.90s

[Epoch 653]	Learning rate: 2.70e-5
[1600/1600]	[L1: 40.6937]	84.3+7.1s

Evaluation:
[my_val x8]	PSNR: 21.67 (Best: 22.45 @epoch 569)
Total time: 3.84s

[Epoch 654]	Learning rate: 2.68e-5
[1600/1600]	[L1: 41.2911]	82.7+6.7s

Evaluation:
[my_val x8]	PSNR: 21.52 (Best: 22.45 @epoch 569)
Total time: 3.82s

[Epoch 655]	Learning rate: 2.67e-5
[1600/1600]	[L1: 40.7734]	82.8+7.3s

Evaluation:
[my_val x8]	PSNR: 21.88 (Best: 22.45 @epoch 569)
Total time: 3.73s

[Epoch 656]	Learning rate: 2.65e-5
[1600/1600]	[L1: 41.4173]	83.2+7.0s

Evaluation:
[my_val x8]	PSNR: 22.00 (Best: 22.45 @epoch 569)
Total time: 3.80s

[Epoch 657]	Learning rate: 2.64e-5
[1600/1600]	[L1: 40.3356]	82.1+6.4s

Evaluation:
[my_val x8]	PSNR: 21.91 (Best: 22.45 @epoch 569)
Total time: 3.71s

[Epoch 658]	Learning rate: 2.63e-5
[1600/1600]	[L1: 40.3021]	83.7+6.6s

Evaluation:
[my_val x8]	PSNR: 21.66 (Best: 22.45 @epoch 569)
Total time: 3.78s

[Epoch 659]	Learning rate: 2.61e-5
[1600/1600]	[L1: 41.2651]	83.4+6.7s

Evaluation:
[my_val x8]	PSNR: 21.98 (Best: 22.45 @epoch 569)
Total time: 3.66s

[Epoch 660]	Learning rate: 2.60e-5
[1600/1600]	[L1: 40.8937]	82.5+7.0s

Evaluation:
[my_val x8]	PSNR: 21.47 (Best: 22.45 @epoch 569)
Total time: 3.79s

[Epoch 661]	Learning rate: 2.58e-5
[1600/1600]	[L1: 41.4697]	83.8+7.2s

Evaluation:
[my_val x8]	PSNR: 21.30 (Best: 22.45 @epoch 569)
Total time: 3.67s

[Epoch 662]	Learning rate: 2.57e-5
[1600/1600]	[L1: 40.7581]	83.8+6.3s

Evaluation:
[my_val x8]	PSNR: 22.05 (Best: 22.45 @epoch 569)
Total time: 3.70s

[Epoch 663]	Learning rate: 2.56e-5
[1600/1600]	[L1: 41.2740]	84.1+7.0s

Evaluation:
[my_val x8]	PSNR: 21.85 (Best: 22.45 @epoch 569)
Total time: 3.95s

[Epoch 664]	Learning rate: 2.54e-5
[1600/1600]	[L1: 40.9169]	83.7+7.0s

Evaluation:
[my_val x8]	PSNR: 22.00 (Best: 22.45 @epoch 569)
Total time: 3.84s

[Epoch 665]	Learning rate: 2.53e-5
[1600/1600]	[L1: 41.1694]	83.9+6.4s

Evaluation:
[my_val x8]	PSNR: 21.92 (Best: 22.45 @epoch 569)
Total time: 3.80s

[Epoch 666]	Learning rate: 2.52e-5
[1600/1600]	[L1: 40.5759]	84.3+7.5s

Evaluation:
[my_val x8]	PSNR: 22.31 (Best: 22.45 @epoch 569)
Total time: 3.85s

[Epoch 667]	Learning rate: 2.50e-5
[1600/1600]	[L1: 40.9793]	83.7+6.8s

Evaluation:
[my_val x8]	PSNR: 21.75 (Best: 22.45 @epoch 569)
Total time: 3.83s

[Epoch 668]	Learning rate: 2.49e-5
[1600/1600]	[L1: 41.0396]	84.6+6.8s

Evaluation:
[my_val x8]	PSNR: 21.14 (Best: 22.45 @epoch 569)
Total time: 3.95s

[Epoch 669]	Learning rate: 2.48e-5
[1600/1600]	[L1: 41.1388]	81.3+6.7s

Evaluation:
[my_val x8]	PSNR: 21.32 (Best: 22.45 @epoch 569)
Total time: 3.81s

[Epoch 670]	Learning rate: 2.46e-5
[1600/1600]	[L1: 40.5350]	83.8+7.3s

Evaluation:
[my_val x8]	PSNR: 21.67 (Best: 22.45 @epoch 569)
Total time: 3.72s

[Epoch 671]	Learning rate: 2.45e-5
[1600/1600]	[L1: 40.6456]	81.8+6.6s

Evaluation:
[my_val x8]	PSNR: 21.76 (Best: 22.45 @epoch 569)
Total time: 3.59s

[Epoch 672]	Learning rate: 2.44e-5
[1600/1600]	[L1: 40.4961]	83.7+6.2s

Evaluation:
[my_val x8]	PSNR: 22.00 (Best: 22.45 @epoch 569)
Total time: 3.87s

[Epoch 673]	Learning rate: 2.42e-5
[1600/1600]	[L1: 41.4113]	82.5+7.0s

Evaluation:
[my_val x8]	PSNR: 21.07 (Best: 22.45 @epoch 569)
Total time: 3.78s

[Epoch 674]	Learning rate: 2.41e-5
[1600/1600]	[L1: 41.3752]	84.2+6.8s

Evaluation:
[my_val x8]	PSNR: 21.76 (Best: 22.45 @epoch 569)
Total time: 3.94s

[Epoch 675]	Learning rate: 2.40e-5
[1600/1600]	[L1: 40.5793]	83.1+7.4s

Evaluation:
[my_val x8]	PSNR: 21.32 (Best: 22.45 @epoch 569)
Total time: 4.03s

[Epoch 676]	Learning rate: 2.38e-5
[1600/1600]	[L1: 40.8038]	84.7+6.5s

Evaluation:
[my_val x8]	PSNR: 21.88 (Best: 22.45 @epoch 569)
Total time: 3.89s

[Epoch 677]	Learning rate: 2.37e-5
[1600/1600]	[L1: 41.4551]	83.2+7.4s

Evaluation:
[my_val x8]	PSNR: 21.40 (Best: 22.45 @epoch 569)
Total time: 3.70s

[Epoch 678]	Learning rate: 2.36e-5
[1600/1600]	[L1: 40.8867]	82.7+6.6s

Evaluation:
[my_val x8]	PSNR: 21.90 (Best: 22.45 @epoch 569)
Total time: 3.90s

[Epoch 679]	Learning rate: 2.34e-5
[1600/1600]	[L1: 42.2909]	82.8+6.5s

Evaluation:
[my_val x8]	PSNR: 21.96 (Best: 22.45 @epoch 569)
Total time: 3.77s

[Epoch 680]	Learning rate: 2.33e-5
[1600/1600]	[L1: 41.2925]	85.3+7.3s

Evaluation:
[my_val x8]	PSNR: 21.57 (Best: 22.45 @epoch 569)
Total time: 3.82s

[Epoch 681]	Learning rate: 2.32e-5
[1600/1600]	[L1: 40.8627]	83.9+6.6s

Evaluation:
[my_val x8]	PSNR: 21.10 (Best: 22.45 @epoch 569)
Total time: 3.74s

[Epoch 682]	Learning rate: 2.30e-5
[1600/1600]	[L1: 41.2069]	83.2+7.0s

Evaluation:
[my_val x8]	PSNR: 21.97 (Best: 22.45 @epoch 569)
Total time: 3.80s

[Epoch 683]	Learning rate: 2.29e-5
[1600/1600]	[L1: 41.0286]	83.6+6.7s

Evaluation:
[my_val x8]	PSNR: 21.24 (Best: 22.45 @epoch 569)
Total time: 3.83s

[Epoch 684]	Learning rate: 2.28e-5
[1600/1600]	[L1: 40.8845]	83.9+7.8s

Evaluation:
[my_val x8]	PSNR: 22.00 (Best: 22.45 @epoch 569)
Total time: 3.91s

[Epoch 685]	Learning rate: 2.26e-5
[1600/1600]	[L1: 40.8407]	82.0+7.3s

Evaluation:
[my_val x8]	PSNR: 22.12 (Best: 22.45 @epoch 569)
Total time: 3.72s

[Epoch 686]	Learning rate: 2.25e-5
[1600/1600]	[L1: 40.9136]	83.1+7.3s

Evaluation:
[my_val x8]	PSNR: 21.95 (Best: 22.45 @epoch 569)
Total time: 3.85s

[Epoch 687]	Learning rate: 2.24e-5
[1600/1600]	[L1: 40.0140]	84.7+7.1s

Evaluation:
[my_val x8]	PSNR: 22.06 (Best: 22.45 @epoch 569)
Total time: 3.73s

[Epoch 688]	Learning rate: 2.22e-5
[1600/1600]	[L1: 41.2463]	84.7+6.9s

Evaluation:
[my_val x8]	PSNR: 22.21 (Best: 22.45 @epoch 569)
Total time: 3.81s

[Epoch 689]	Learning rate: 2.21e-5
[1600/1600]	[L1: 41.1150]	84.5+7.1s

Evaluation:
[my_val x8]	PSNR: 22.05 (Best: 22.45 @epoch 569)
Total time: 3.88s

[Epoch 690]	Learning rate: 2.20e-5
[1600/1600]	[L1: 40.7905]	84.3+7.3s

Evaluation:
[my_val x8]	PSNR: 21.56 (Best: 22.45 @epoch 569)
Total time: 3.76s

[Epoch 691]	Learning rate: 2.18e-5
[1600/1600]	[L1: 40.7195]	83.8+6.9s

Evaluation:
[my_val x8]	PSNR: 21.99 (Best: 22.45 @epoch 569)
Total time: 3.81s

[Epoch 692]	Learning rate: 2.17e-5
[1600/1600]	[L1: 40.3532]	84.1+6.5s

Evaluation:
[my_val x8]	PSNR: 21.87 (Best: 22.45 @epoch 569)
Total time: 3.81s

[Epoch 693]	Learning rate: 2.16e-5
[1600/1600]	[L1: 41.2808]	82.6+6.8s

Evaluation:
[my_val x8]	PSNR: 21.67 (Best: 22.45 @epoch 569)
Total time: 3.86s

[Epoch 694]	Learning rate: 2.15e-5
[1600/1600]	[L1: 40.7798]	83.1+6.4s

Evaluation:
[my_val x8]	PSNR: 21.29 (Best: 22.45 @epoch 569)
Total time: 3.63s

[Epoch 695]	Learning rate: 2.13e-5
[1600/1600]	[L1: 40.9204]	82.7+6.3s

Evaluation:
[my_val x8]	PSNR: 21.99 (Best: 22.45 @epoch 569)
Total time: 3.69s

[Epoch 696]	Learning rate: 2.12e-5
[1600/1600]	[L1: 40.9424]	83.3+6.3s

Evaluation:
[my_val x8]	PSNR: 21.96 (Best: 22.45 @epoch 569)
Total time: 3.81s

[Epoch 697]	Learning rate: 2.11e-5
[1600/1600]	[L1: 40.3985]	83.5+6.3s

Evaluation:
[my_val x8]	PSNR: 21.93 (Best: 22.45 @epoch 569)
Total time: 3.97s

[Epoch 698]	Learning rate: 2.09e-5
[1600/1600]	[L1: 40.6561]	84.8+7.0s

Evaluation:
[my_val x8]	PSNR: 21.54 (Best: 22.45 @epoch 569)
Total time: 3.86s

[Epoch 699]	Learning rate: 2.08e-5
[1600/1600]	[L1: 41.3826]	84.6+7.7s

Evaluation:
[my_val x8]	PSNR: 21.95 (Best: 22.45 @epoch 569)
Total time: 3.87s

[Epoch 700]	Learning rate: 2.07e-5
[1600/1600]	[L1: 40.9860]	84.2+7.1s

Evaluation:
[my_val x8]	PSNR: 21.81 (Best: 22.45 @epoch 569)
Total time: 3.84s

[Epoch 701]	Learning rate: 2.06e-5
[1600/1600]	[L1: 41.2291]	83.4+7.3s

Evaluation:
[my_val x8]	PSNR: 22.06 (Best: 22.45 @epoch 569)
Total time: 3.78s

[Epoch 702]	Learning rate: 2.04e-5
[1600/1600]	[L1: 41.4826]	84.4+7.9s

Evaluation:
[my_val x8]	PSNR: 21.47 (Best: 22.45 @epoch 569)
Total time: 3.80s

[Epoch 703]	Learning rate: 2.03e-5
[1600/1600]	[L1: 40.0105]	83.9+7.7s

Evaluation:
[my_val x8]	PSNR: 21.44 (Best: 22.45 @epoch 569)
Total time: 3.81s

[Epoch 704]	Learning rate: 2.02e-5
[1600/1600]	[L1: 40.7393]	83.1+7.9s

Evaluation:
[my_val x8]	PSNR: 21.56 (Best: 22.45 @epoch 569)
Total time: 3.83s

[Epoch 705]	Learning rate: 2.01e-5
[1600/1600]	[L1: 41.1560]	83.5+7.1s

Evaluation:
[my_val x8]	PSNR: 21.32 (Best: 22.45 @epoch 569)
Total time: 3.84s

[Epoch 706]	Learning rate: 1.99e-5
[1600/1600]	[L1: 40.1265]	83.7+6.9s

Evaluation:
[my_val x8]	PSNR: 21.43 (Best: 22.45 @epoch 569)
Total time: 3.66s

[Epoch 707]	Learning rate: 1.98e-5
[1600/1600]	[L1: 40.8294]	84.2+6.6s

Evaluation:
[my_val x8]	PSNR: 21.36 (Best: 22.45 @epoch 569)
Total time: 3.91s

[Epoch 708]	Learning rate: 1.97e-5
[1600/1600]	[L1: 40.9455]	82.8+7.0s

Evaluation:
[my_val x8]	PSNR: 21.38 (Best: 22.45 @epoch 569)
Total time: 4.02s

[Epoch 709]	Learning rate: 1.96e-5
[1600/1600]	[L1: 40.5110]	83.6+7.9s

Evaluation:
[my_val x8]	PSNR: 22.11 (Best: 22.45 @epoch 569)
Total time: 3.77s

[Epoch 710]	Learning rate: 1.94e-5
[1600/1600]	[L1: 40.2871]	82.6+6.7s

Evaluation:
[my_val x8]	PSNR: 21.96 (Best: 22.45 @epoch 569)
Total time: 3.84s

[Epoch 711]	Learning rate: 1.93e-5
[1600/1600]	[L1: 40.3799]	83.2+6.6s

Evaluation:
[my_val x8]	PSNR: 22.01 (Best: 22.45 @epoch 569)
Total time: 3.82s

[Epoch 712]	Learning rate: 1.92e-5
[1600/1600]	[L1: 40.9372]	82.3+7.0s

Evaluation:
[my_val x8]	PSNR: 22.10 (Best: 22.45 @epoch 569)
Total time: 3.79s

[Epoch 713]	Learning rate: 1.91e-5
[1600/1600]	[L1: 40.6188]	84.0+6.4s

Evaluation:
[my_val x8]	PSNR: 21.69 (Best: 22.45 @epoch 569)
Total time: 3.92s

[Epoch 714]	Learning rate: 1.89e-5
[1600/1600]	[L1: 39.6347]	83.2+6.6s

Evaluation:
[my_val x8]	PSNR: 21.62 (Best: 22.45 @epoch 569)
Total time: 3.78s

[Epoch 715]	Learning rate: 1.88e-5
[1600/1600]	[L1: 40.9479]	83.3+8.0s

Evaluation:
[my_val x8]	PSNR: 21.97 (Best: 22.45 @epoch 569)
Total time: 3.71s

[Epoch 716]	Learning rate: 1.87e-5
[1600/1600]	[L1: 40.9246]	82.8+6.8s

Evaluation:
[my_val x8]	PSNR: 22.04 (Best: 22.45 @epoch 569)
Total time: 3.85s

[Epoch 717]	Learning rate: 1.86e-5
[1600/1600]	[L1: 41.1140]	83.1+7.6s

Evaluation:
[my_val x8]	PSNR: 22.06 (Best: 22.45 @epoch 569)
Total time: 3.82s

[Epoch 718]	Learning rate: 1.85e-5
[1600/1600]	[L1: 41.3134]	82.2+6.4s

Evaluation:
[my_val x8]	PSNR: 21.88 (Best: 22.45 @epoch 569)
Total time: 3.85s

[Epoch 719]	Learning rate: 1.83e-5
[1600/1600]	[L1: 40.1441]	82.3+6.5s

Evaluation:
[my_val x8]	PSNR: 21.62 (Best: 22.45 @epoch 569)
Total time: 3.87s

[Epoch 720]	Learning rate: 1.82e-5
[1600/1600]	[L1: 41.3975]	83.5+6.8s

Evaluation:
[my_val x8]	PSNR: 21.23 (Best: 22.45 @epoch 569)
Total time: 4.00s

[Epoch 721]	Learning rate: 1.81e-5
[1600/1600]	[L1: 41.5816]	83.9+6.8s

Evaluation:
[my_val x8]	PSNR: 21.27 (Best: 22.45 @epoch 569)
Total time: 3.80s

[Epoch 722]	Learning rate: 1.80e-5
[1600/1600]	[L1: 40.6356]	84.5+6.8s

Evaluation:
[my_val x8]	PSNR: 22.08 (Best: 22.45 @epoch 569)
Total time: 3.79s

[Epoch 723]	Learning rate: 1.78e-5
[1600/1600]	[L1: 40.5777]	82.4+7.0s

Evaluation:
[my_val x8]	PSNR: 22.09 (Best: 22.45 @epoch 569)
Total time: 3.79s

[Epoch 724]	Learning rate: 1.77e-5
[1600/1600]	[L1: 41.1191]	83.1+7.3s

Evaluation:
[my_val x8]	PSNR: 21.74 (Best: 22.45 @epoch 569)
Total time: 3.72s

[Epoch 725]	Learning rate: 1.76e-5
[1600/1600]	[L1: 41.1629]	84.2+6.8s

Evaluation:
[my_val x8]	PSNR: 22.08 (Best: 22.45 @epoch 569)
Total time: 3.85s

[Epoch 726]	Learning rate: 1.75e-5
[1600/1600]	[L1: 40.8841]	84.9+7.1s

Evaluation:
[my_val x8]	PSNR: 21.83 (Best: 22.45 @epoch 569)
Total time: 3.92s

[Epoch 727]	Learning rate: 1.74e-5
[1600/1600]	[L1: 40.3384]	83.0+7.4s

Evaluation:
[my_val x8]	PSNR: 21.66 (Best: 22.45 @epoch 569)
Total time: 3.77s

[Epoch 728]	Learning rate: 1.73e-5
[1600/1600]	[L1: 40.6937]	83.3+7.7s

Evaluation:
[my_val x8]	PSNR: 21.04 (Best: 22.45 @epoch 569)
Total time: 3.84s

[Epoch 729]	Learning rate: 1.71e-5
[1600/1600]	[L1: 40.9840]	82.4+7.7s

Evaluation:
[my_val x8]	PSNR: 21.24 (Best: 22.45 @epoch 569)
Total time: 3.74s

[Epoch 730]	Learning rate: 1.70e-5
[1600/1600]	[L1: 40.8278]	83.9+7.3s

Evaluation:
[my_val x8]	PSNR: 21.96 (Best: 22.45 @epoch 569)
Total time: 3.85s

[Epoch 731]	Learning rate: 1.69e-5
[1600/1600]	[L1: 40.9488]	83.2+7.0s

Evaluation:
[my_val x8]	PSNR: 21.60 (Best: 22.45 @epoch 569)
Total time: 3.93s

[Epoch 732]	Learning rate: 1.68e-5
[1600/1600]	[L1: 40.6847]	82.3+6.8s

Evaluation:
[my_val x8]	PSNR: 21.61 (Best: 22.45 @epoch 569)
Total time: 3.64s

[Epoch 733]	Learning rate: 1.67e-5
[1600/1600]	[L1: 40.5044]	81.8+6.8s

Evaluation:
[my_val x8]	PSNR: 22.10 (Best: 22.45 @epoch 569)
Total time: 3.81s

[Epoch 734]	Learning rate: 1.65e-5
[1600/1600]	[L1: 39.3998]	80.5+7.0s

Evaluation:
[my_val x8]	PSNR: 22.15 (Best: 22.45 @epoch 569)
Total time: 3.74s

[Epoch 735]	Learning rate: 1.64e-5
[1600/1600]	[L1: 40.8389]	82.2+7.2s

Evaluation:
[my_val x8]	PSNR: 22.13 (Best: 22.45 @epoch 569)
Total time: 3.87s

[Epoch 736]	Learning rate: 1.63e-5
[1600/1600]	[L1: 40.3759]	83.0+6.9s

Evaluation:
[my_val x8]	PSNR: 21.78 (Best: 22.45 @epoch 569)
Total time: 3.84s

[Epoch 737]	Learning rate: 1.62e-5
[1600/1600]	[L1: 40.0070]	82.8+7.4s

Evaluation:
[my_val x8]	PSNR: 21.49 (Best: 22.45 @epoch 569)
Total time: 3.72s

[Epoch 738]	Learning rate: 1.61e-5
[1600/1600]	[L1: 40.3953]	82.8+6.3s

Evaluation:
[my_val x8]	PSNR: 21.79 (Best: 22.45 @epoch 569)
Total time: 3.59s

[Epoch 739]	Learning rate: 1.60e-5
[1600/1600]	[L1: 40.0544]	82.8+6.9s

Evaluation:
[my_val x8]	PSNR: 21.12 (Best: 22.45 @epoch 569)
Total time: 3.76s

[Epoch 740]	Learning rate: 1.59e-5
[1600/1600]	[L1: 40.8022]	82.6+6.7s

Evaluation:
[my_val x8]	PSNR: 22.16 (Best: 22.45 @epoch 569)
Total time: 3.72s

[Epoch 741]	Learning rate: 1.57e-5
[1600/1600]	[L1: 40.3071]	82.4+7.1s

Evaluation:
[my_val x8]	PSNR: 22.31 (Best: 22.45 @epoch 569)
Total time: 3.77s

[Epoch 742]	Learning rate: 1.56e-5
[1600/1600]	[L1: 39.8997]	82.6+6.8s

Evaluation:
[my_val x8]	PSNR: 22.08 (Best: 22.45 @epoch 569)
Total time: 3.87s

[Epoch 743]	Learning rate: 1.55e-5
[1600/1600]	[L1: 40.2163]	83.8+6.5s

Evaluation:
[my_val x8]	PSNR: 21.99 (Best: 22.45 @epoch 569)
Total time: 3.74s

[Epoch 744]	Learning rate: 1.54e-5
[1600/1600]	[L1: 40.5947]	82.0+6.6s

Evaluation:
[my_val x8]	PSNR: 22.12 (Best: 22.45 @epoch 569)
Total time: 3.85s

[Epoch 745]	Learning rate: 1.53e-5
[1600/1600]	[L1: 40.3841]	83.2+6.8s

Evaluation:
[my_val x8]	PSNR: 21.70 (Best: 22.45 @epoch 569)
Total time: 3.89s

[Epoch 746]	Learning rate: 1.52e-5
[1600/1600]	[L1: 40.6767]	80.2+6.3s

Evaluation:
[my_val x8]	PSNR: 22.26 (Best: 22.45 @epoch 569)
Total time: 3.77s

[Epoch 747]	Learning rate: 1.51e-5
[1600/1600]	[L1: 40.5410]	84.3+6.7s

Evaluation:
[my_val x8]	PSNR: 21.88 (Best: 22.45 @epoch 569)
Total time: 3.83s

[Epoch 748]	Learning rate: 1.50e-5
[1600/1600]	[L1: 39.9972]	82.6+6.4s

Evaluation:
[my_val x8]	PSNR: 21.65 (Best: 22.45 @epoch 569)
Total time: 3.79s

[Epoch 749]	Learning rate: 1.48e-5
[1600/1600]	[L1: 40.7908]	82.7+7.2s

Evaluation:
[my_val x8]	PSNR: 21.62 (Best: 22.45 @epoch 569)
Total time: 3.70s

[Epoch 750]	Learning rate: 1.47e-5
[1600/1600]	[L1: 40.2047]	82.7+6.7s

Evaluation:
[my_val x8]	PSNR: 21.76 (Best: 22.45 @epoch 569)
Total time: 3.77s

[Epoch 751]	Learning rate: 1.46e-5
[1600/1600]	[L1: 40.0213]	83.3+7.1s

Evaluation:
[my_val x8]	PSNR: 21.45 (Best: 22.45 @epoch 569)
Total time: 3.65s

[Epoch 752]	Learning rate: 1.45e-5
[1600/1600]	[L1: 40.3401]	82.8+7.2s

Evaluation:
[my_val x8]	PSNR: 21.53 (Best: 22.45 @epoch 569)
Total time: 3.79s

[Epoch 753]	Learning rate: 1.44e-5
[1600/1600]	[L1: 40.4335]	82.2+7.2s

Evaluation:
[my_val x8]	PSNR: 21.21 (Best: 22.45 @epoch 569)
Total time: 3.81s

[Epoch 754]	Learning rate: 1.43e-5
[1600/1600]	[L1: 40.2594]	82.5+6.5s

Evaluation:
[my_val x8]	PSNR: 22.09 (Best: 22.45 @epoch 569)
Total time: 3.68s

[Epoch 755]	Learning rate: 1.42e-5
[1600/1600]	[L1: 40.1330]	82.8+7.2s

Evaluation:
[my_val x8]	PSNR: 22.11 (Best: 22.45 @epoch 569)
Total time: 3.79s

[Epoch 756]	Learning rate: 1.41e-5
[1600/1600]	[L1: 40.8942]	81.6+6.6s

Evaluation:
[my_val x8]	PSNR: 22.19 (Best: 22.45 @epoch 569)
Total time: 3.77s

[Epoch 757]	Learning rate: 1.40e-5
[1600/1600]	[L1: 40.5080]	83.4+7.0s

Evaluation:
[my_val x8]	PSNR: 21.47 (Best: 22.45 @epoch 569)
Total time: 3.83s

[Epoch 758]	Learning rate: 1.39e-5
[1600/1600]	[L1: 40.8677]	83.5+7.0s

Evaluation:
[my_val x8]	PSNR: 21.92 (Best: 22.45 @epoch 569)
Total time: 3.79s

[Epoch 759]	Learning rate: 1.37e-5
[1600/1600]	[L1: 40.5892]	84.6+6.3s

Evaluation:
[my_val x8]	PSNR: 21.40 (Best: 22.45 @epoch 569)
Total time: 3.80s

[Epoch 760]	Learning rate: 1.36e-5
[1600/1600]	[L1: 40.7284]	83.4+6.7s

Evaluation:
[my_val x8]	PSNR: 22.12 (Best: 22.45 @epoch 569)
Total time: 3.77s

[Epoch 761]	Learning rate: 1.35e-5
[1600/1600]	[L1: 40.9417]	81.4+7.1s

Evaluation:
[my_val x8]	PSNR: 21.98 (Best: 22.45 @epoch 569)
Total time: 3.78s

[Epoch 762]	Learning rate: 1.34e-5
[1600/1600]	[L1: 40.7058]	82.6+7.7s

Evaluation:
[my_val x8]	PSNR: 22.20 (Best: 22.45 @epoch 569)
Total time: 3.76s

[Epoch 763]	Learning rate: 1.33e-5
[1600/1600]	[L1: 40.3338]	82.6+6.9s

Evaluation:
[my_val x8]	PSNR: 22.20 (Best: 22.45 @epoch 569)
Total time: 3.87s

[Epoch 764]	Learning rate: 1.32e-5
[1600/1600]	[L1: 40.8363]	80.5+6.7s

Evaluation:
[my_val x8]	PSNR: 21.31 (Best: 22.45 @epoch 569)
Total time: 3.84s

[Epoch 765]	Learning rate: 1.31e-5
[1600/1600]	[L1: 39.6994]	81.6+6.7s

Evaluation:
[my_val x8]	PSNR: 21.96 (Best: 22.45 @epoch 569)
Total time: 3.78s

[Epoch 766]	Learning rate: 1.30e-5
[1600/1600]	[L1: 39.6157]	82.9+6.9s

Evaluation:
[my_val x8]	PSNR: 22.10 (Best: 22.45 @epoch 569)
Total time: 3.83s

[Epoch 767]	Learning rate: 1.29e-5
[1600/1600]	[L1: 40.0684]	82.7+6.3s

Evaluation:
[my_val x8]	PSNR: 21.93 (Best: 22.45 @epoch 569)
Total time: 3.85s

[Epoch 768]	Learning rate: 1.28e-5
[1600/1600]	[L1: 40.2529]	83.0+6.9s

Evaluation:
[my_val x8]	PSNR: 21.50 (Best: 22.45 @epoch 569)
Total time: 3.81s

[Epoch 769]	Learning rate: 1.27e-5
[1600/1600]	[L1: 39.6333]	82.3+7.1s

Evaluation:
[my_val x8]	PSNR: 22.23 (Best: 22.45 @epoch 569)
Total time: 3.83s

[Epoch 770]	Learning rate: 1.26e-5
[1600/1600]	[L1: 40.0576]	83.4+6.9s

Evaluation:
[my_val x8]	PSNR: 22.16 (Best: 22.45 @epoch 569)
Total time: 3.82s

[Epoch 771]	Learning rate: 1.25e-5
[1600/1600]	[L1: 39.9609]	83.7+6.9s

Evaluation:
[my_val x8]	PSNR: 22.05 (Best: 22.45 @epoch 569)
Total time: 3.91s

[Epoch 772]	Learning rate: 1.24e-5
[1600/1600]	[L1: 40.4005]	83.7+7.0s

Evaluation:
[my_val x8]	PSNR: 21.25 (Best: 22.45 @epoch 569)
Total time: 3.86s

[Epoch 773]	Learning rate: 1.23e-5
[1600/1600]	[L1: 40.7715]	84.0+6.8s

Evaluation:
[my_val x8]	PSNR: 22.04 (Best: 22.45 @epoch 569)
Total time: 3.80s

[Epoch 774]	Learning rate: 1.22e-5
[1600/1600]	[L1: 40.4115]	83.2+7.6s

Evaluation:
[my_val x8]	PSNR: 21.47 (Best: 22.45 @epoch 569)
Total time: 3.74s

[Epoch 775]	Learning rate: 1.21e-5
[1600/1600]	[L1: 41.2531]	82.9+6.7s

Evaluation:
[my_val x8]	PSNR: 22.31 (Best: 22.45 @epoch 569)
Total time: 3.66s

[Epoch 776]	Learning rate: 1.20e-5
[1600/1600]	[L1: 40.4302]	81.9+6.8s

Evaluation:
[my_val x8]	PSNR: 21.80 (Best: 22.45 @epoch 569)
Total time: 3.76s

[Epoch 777]	Learning rate: 1.19e-5
[1600/1600]	[L1: 40.5561]	83.7+6.6s

Evaluation:
[my_val x8]	PSNR: 21.52 (Best: 22.45 @epoch 569)
Total time: 3.78s

[Epoch 778]	Learning rate: 1.18e-5
[1600/1600]	[L1: 39.4311]	82.8+7.0s

Evaluation:
[my_val x8]	PSNR: 21.67 (Best: 22.45 @epoch 569)
Total time: 3.83s

[Epoch 779]	Learning rate: 1.17e-5
[1600/1600]	[L1: 39.6916]	81.9+7.0s

Evaluation:
[my_val x8]	PSNR: 21.53 (Best: 22.45 @epoch 569)
Total time: 3.92s

[Epoch 780]	Learning rate: 1.16e-5
[1600/1600]	[L1: 40.5325]	82.2+7.0s

Evaluation:
[my_val x8]	PSNR: 22.19 (Best: 22.45 @epoch 569)
Total time: 3.90s

[Epoch 781]	Learning rate: 1.15e-5
[1600/1600]	[L1: 40.8650]	82.0+6.3s

Evaluation:
[my_val x8]	PSNR: 21.86 (Best: 22.45 @epoch 569)
Total time: 3.76s

[Epoch 782]	Learning rate: 1.14e-5
[1600/1600]	[L1: 40.6899]	81.5+6.6s

Evaluation:
[my_val x8]	PSNR: 21.88 (Best: 22.45 @epoch 569)
Total time: 3.69s

[Epoch 783]	Learning rate: 1.13e-5
[1600/1600]	[L1: 40.1527]	81.9+6.7s

Evaluation:
[my_val x8]	PSNR: 22.18 (Best: 22.45 @epoch 569)
Total time: 3.70s

[Epoch 784]	Learning rate: 1.12e-5
[1600/1600]	[L1: 40.1843]	82.5+6.6s

Evaluation:
[my_val x8]	PSNR: 22.06 (Best: 22.45 @epoch 569)
Total time: 3.68s

[Epoch 785]	Learning rate: 1.11e-5
[1600/1600]	[L1: 40.2445]	83.0+6.5s

Evaluation:
[my_val x8]	PSNR: 21.88 (Best: 22.45 @epoch 569)
Total time: 3.83s

[Epoch 786]	Learning rate: 1.10e-5
[1600/1600]	[L1: 40.5029]	83.7+6.7s

Evaluation:
[my_val x8]	PSNR: 21.87 (Best: 22.45 @epoch 569)
Total time: 3.76s

[Epoch 787]	Learning rate: 1.09e-5
[1600/1600]	[L1: 40.2857]	82.6+8.9s

Evaluation:
[my_val x8]	PSNR: 22.16 (Best: 22.45 @epoch 569)
Total time: 3.80s

[Epoch 788]	Learning rate: 1.08e-5
[1600/1600]	[L1: 41.0103]	83.4+6.3s

Evaluation:
[my_val x8]	PSNR: 22.13 (Best: 22.45 @epoch 569)
Total time: 3.77s

[Epoch 789]	Learning rate: 1.07e-5
[1600/1600]	[L1: 39.5444]	84.1+6.6s

Evaluation:
[my_val x8]	PSNR: 22.13 (Best: 22.45 @epoch 569)
Total time: 3.80s

[Epoch 790]	Learning rate: 1.06e-5
[1600/1600]	[L1: 40.5009]	84.3+7.5s

Evaluation:
[my_val x8]	PSNR: 21.69 (Best: 22.45 @epoch 569)
Total time: 3.76s

[Epoch 791]	Learning rate: 1.05e-5
[1600/1600]	[L1: 39.7830]	83.2+6.6s

Evaluation:
[my_val x8]	PSNR: 22.19 (Best: 22.45 @epoch 569)
Total time: 3.76s

[Epoch 792]	Learning rate: 1.04e-5
[1600/1600]	[L1: 39.7626]	81.3+6.9s

Evaluation:
[my_val x8]	PSNR: 22.01 (Best: 22.45 @epoch 569)
Total time: 3.79s

[Epoch 793]	Learning rate: 1.03e-5
[1600/1600]	[L1: 39.7749]	84.5+6.9s

Evaluation:
[my_val x8]	PSNR: 21.99 (Best: 22.45 @epoch 569)
Total time: 3.79s

[Epoch 794]	Learning rate: 1.02e-5
[1600/1600]	[L1: 39.8092]	83.1+7.0s

Evaluation:
[my_val x8]	PSNR: 21.91 (Best: 22.45 @epoch 569)
Total time: 3.68s

[Epoch 795]	Learning rate: 1.01e-5
[1600/1600]	[L1: 39.7224]	83.1+6.6s

Evaluation:
[my_val x8]	PSNR: 22.06 (Best: 22.45 @epoch 569)
Total time: 3.80s

[Epoch 796]	Learning rate: 1.00e-5
[1600/1600]	[L1: 39.2913]	83.3+6.9s

Evaluation:
[my_val x8]	PSNR: 21.63 (Best: 22.45 @epoch 569)
Total time: 3.89s

[Epoch 797]	Learning rate: 9.92e-6
[1600/1600]	[L1: 39.5246]	82.3+7.4s

Evaluation:
[my_val x8]	PSNR: 22.18 (Best: 22.45 @epoch 569)
Total time: 3.77s

[Epoch 798]	Learning rate: 9.83e-6
[1600/1600]	[L1: 40.5335]	82.4+7.5s

Evaluation:
[my_val x8]	PSNR: 22.11 (Best: 22.45 @epoch 569)
Total time: 3.78s

[Epoch 799]	Learning rate: 9.73e-6
[1600/1600]	[L1: 39.6096]	82.8+6.4s

Evaluation:
[my_val x8]	PSNR: 22.16 (Best: 22.45 @epoch 569)
Total time: 3.78s

[Epoch 800]	Learning rate: 9.64e-6
[1600/1600]	[L1: 40.3238]	81.5+7.7s

Evaluation:
[my_val x8]	PSNR: 22.30 (Best: 22.45 @epoch 569)
Total time: 3.84s

[Epoch 801]	Learning rate: 9.55e-6
[1600/1600]	[L1: 40.3638]	79.6+6.8s

Evaluation:
[my_val x8]	PSNR: 22.12 (Best: 22.45 @epoch 569)
Total time: 3.80s

[Epoch 802]	Learning rate: 9.46e-6
[1600/1600]	[L1: 40.0330]	83.9+6.5s

Evaluation:
[my_val x8]	PSNR: 22.22 (Best: 22.45 @epoch 569)
Total time: 3.71s

[Epoch 803]	Learning rate: 9.37e-6
[1600/1600]	[L1: 39.4006]	83.1+6.6s

Evaluation:
[my_val x8]	PSNR: 21.78 (Best: 22.45 @epoch 569)
Total time: 3.81s

[Epoch 804]	Learning rate: 9.27e-6
[1600/1600]	[L1: 40.1459]	83.9+7.0s

Evaluation:
[my_val x8]	PSNR: 22.11 (Best: 22.45 @epoch 569)
Total time: 3.76s

[Epoch 805]	Learning rate: 9.18e-6
[1600/1600]	[L1: 40.3873]	82.5+6.6s

Evaluation:
[my_val x8]	PSNR: 21.89 (Best: 22.45 @epoch 569)
Total time: 3.67s

[Epoch 806]	Learning rate: 9.09e-6
[1600/1600]	[L1: 39.7952]	83.7+6.7s

Evaluation:
[my_val x8]	PSNR: 22.24 (Best: 22.45 @epoch 569)
Total time: 3.76s

[Epoch 807]	Learning rate: 9.00e-6
[1600/1600]	[L1: 39.4841]	82.6+8.0s

Evaluation:
[my_val x8]	PSNR: 22.07 (Best: 22.45 @epoch 569)
Total time: 3.73s

[Epoch 808]	Learning rate: 8.92e-6
[1600/1600]	[L1: 40.6902]	82.5+6.7s

Evaluation:
[my_val x8]	PSNR: 21.59 (Best: 22.45 @epoch 569)
Total time: 3.72s

[Epoch 809]	Learning rate: 8.83e-6
[1600/1600]	[L1: 40.0378]	84.0+6.7s

Evaluation:
[my_val x8]	PSNR: 21.81 (Best: 22.45 @epoch 569)
Total time: 3.83s

[Epoch 810]	Learning rate: 8.74e-6
[1600/1600]	[L1: 39.9381]	82.7+6.3s

Evaluation:
[my_val x8]	PSNR: 21.91 (Best: 22.45 @epoch 569)
Total time: 3.78s

[Epoch 811]	Learning rate: 8.65e-6
[1600/1600]	[L1: 39.4707]	83.6+6.3s

Evaluation:
[my_val x8]	PSNR: 21.68 (Best: 22.45 @epoch 569)
Total time: 3.85s

[Epoch 812]	Learning rate: 8.56e-6
[1600/1600]	[L1: 39.6033]	83.1+6.7s

Evaluation:
[my_val x8]	PSNR: 22.19 (Best: 22.45 @epoch 569)
Total time: 3.83s

[Epoch 813]	Learning rate: 8.48e-6
[1600/1600]	[L1: 40.8093]	84.3+6.8s

Evaluation:
[my_val x8]	PSNR: 22.08 (Best: 22.45 @epoch 569)
Total time: 3.94s

[Epoch 814]	Learning rate: 8.39e-6
[1600/1600]	[L1: 39.3994]	82.9+6.7s

Evaluation:
[my_val x8]	PSNR: 21.45 (Best: 22.45 @epoch 569)
Total time: 3.81s

[Epoch 815]	Learning rate: 8.30e-6
[1600/1600]	[L1: 39.6071]	83.3+6.9s

Evaluation:
[my_val x8]	PSNR: 22.08 (Best: 22.45 @epoch 569)
Total time: 3.79s

[Epoch 816]	Learning rate: 8.22e-6
[1600/1600]	[L1: 38.9672]	83.6+6.7s

Evaluation:
[my_val x8]	PSNR: 22.08 (Best: 22.45 @epoch 569)
Total time: 3.82s

[Epoch 817]	Learning rate: 8.13e-6
[1600/1600]	[L1: 39.5691]	83.8+6.7s

Evaluation:
[my_val x8]	PSNR: 21.14 (Best: 22.45 @epoch 569)
Total time: 3.74s

[Epoch 818]	Learning rate: 8.05e-6
[1600/1600]	[L1: 39.9856]	82.3+6.6s

Evaluation:
[my_val x8]	PSNR: 21.43 (Best: 22.45 @epoch 569)
Total time: 3.71s

[Epoch 819]	Learning rate: 7.96e-6
[1600/1600]	[L1: 39.7053]	83.8+7.3s

Evaluation:
[my_val x8]	PSNR: 22.19 (Best: 22.45 @epoch 569)
Total time: 3.64s

[Epoch 820]	Learning rate: 7.88e-6
[1600/1600]	[L1: 40.8664]	83.3+6.9s

Evaluation:
[my_val x8]	PSNR: 22.11 (Best: 22.45 @epoch 569)
Total time: 3.86s

[Epoch 821]	Learning rate: 7.79e-6
[1600/1600]	[L1: 39.4771]	82.8+7.1s

Evaluation:
[my_val x8]	PSNR: 22.06 (Best: 22.45 @epoch 569)
Total time: 3.80s

[Epoch 822]	Learning rate: 7.71e-6
[1600/1600]	[L1: 39.8983]	84.4+7.2s

Evaluation:
[my_val x8]	PSNR: 22.10 (Best: 22.45 @epoch 569)
Total time: 3.82s

[Epoch 823]	Learning rate: 7.63e-6
[1600/1600]	[L1: 40.7622]	82.4+7.6s

Evaluation:
[my_val x8]	PSNR: 22.08 (Best: 22.45 @epoch 569)
Total time: 3.67s

[Epoch 824]	Learning rate: 7.54e-6
[1600/1600]	[L1: 39.9806]	83.2+6.7s

Evaluation:
[my_val x8]	PSNR: 21.57 (Best: 22.45 @epoch 569)
Total time: 3.86s

[Epoch 825]	Learning rate: 7.46e-6
[1600/1600]	[L1: 40.5344]	82.5+6.4s

Evaluation:
[my_val x8]	PSNR: 22.02 (Best: 22.45 @epoch 569)
Total time: 3.78s

[Epoch 826]	Learning rate: 7.38e-6
[1600/1600]	[L1: 39.9749]	83.9+7.0s

Evaluation:
[my_val x8]	PSNR: 21.55 (Best: 22.45 @epoch 569)
Total time: 3.81s

[Epoch 827]	Learning rate: 7.30e-6
[1600/1600]	[L1: 39.9243]	83.4+7.0s

Evaluation:
[my_val x8]	PSNR: 22.10 (Best: 22.45 @epoch 569)
Total time: 3.70s

[Epoch 828]	Learning rate: 7.22e-6
[1600/1600]	[L1: 40.3936]	82.2+7.1s

Evaluation:
[my_val x8]	PSNR: 21.77 (Best: 22.45 @epoch 569)
Total time: 3.69s

[Epoch 829]	Learning rate: 7.14e-6
[1600/1600]	[L1: 40.3061]	82.9+6.8s

Evaluation:
[my_val x8]	PSNR: 22.14 (Best: 22.45 @epoch 569)
Total time: 3.71s

[Epoch 830]	Learning rate: 7.06e-6
[1600/1600]	[L1: 39.8852]	82.0+6.4s

Evaluation:
[my_val x8]	PSNR: 21.71 (Best: 22.45 @epoch 569)
Total time: 3.81s

[Epoch 831]	Learning rate: 6.98e-6
[1600/1600]	[L1: 39.7000]	83.0+6.7s

Evaluation:
[my_val x8]	PSNR: 22.10 (Best: 22.45 @epoch 569)
Total time: 3.75s

[Epoch 832]	Learning rate: 6.90e-6
[1600/1600]	[L1: 40.6980]	82.1+7.1s

Evaluation:
[my_val x8]	PSNR: 22.14 (Best: 22.45 @epoch 569)
Total time: 3.79s

[Epoch 833]	Learning rate: 6.82e-6
[1600/1600]	[L1: 39.8174]	83.2+6.9s

Evaluation:
[my_val x8]	PSNR: 21.73 (Best: 22.45 @epoch 569)
Total time: 3.82s

[Epoch 834]	Learning rate: 6.74e-6
[1600/1600]	[L1: 39.7832]	84.3+6.9s

Evaluation:
[my_val x8]	PSNR: 22.14 (Best: 22.45 @epoch 569)
Total time: 3.82s

[Epoch 835]	Learning rate: 6.66e-6
[1600/1600]	[L1: 39.8168]	82.8+6.8s

Evaluation:
[my_val x8]	PSNR: 21.83 (Best: 22.45 @epoch 569)
Total time: 3.89s

[Epoch 836]	Learning rate: 6.58e-6
[1600/1600]	[L1: 40.1454]	83.3+6.8s

Evaluation:
[my_val x8]	PSNR: 21.53 (Best: 22.45 @epoch 569)
Total time: 3.79s

[Epoch 837]	Learning rate: 6.51e-6
[1600/1600]	[L1: 39.7769]	83.0+6.5s

Evaluation:
[my_val x8]	PSNR: 22.20 (Best: 22.45 @epoch 569)
Total time: 3.71s

[Epoch 838]	Learning rate: 6.43e-6
[1600/1600]	[L1: 39.9601]	82.6+7.1s

Evaluation:
[my_val x8]	PSNR: 21.69 (Best: 22.45 @epoch 569)
Total time: 3.81s

[Epoch 839]	Learning rate: 6.35e-6
[1600/1600]	[L1: 39.7694]	82.0+6.6s

Evaluation:
[my_val x8]	PSNR: 22.09 (Best: 22.45 @epoch 569)
Total time: 3.79s

[Epoch 840]	Learning rate: 6.28e-6
[1600/1600]	[L1: 39.4615]	81.6+7.1s

Evaluation:
[my_val x8]	PSNR: 22.08 (Best: 22.45 @epoch 569)
Total time: 3.77s

[Epoch 841]	Learning rate: 6.20e-6
[1600/1600]	[L1: 39.8187]	82.4+6.7s

Evaluation:
[my_val x8]	PSNR: 21.98 (Best: 22.45 @epoch 569)
Total time: 3.75s

[Epoch 842]	Learning rate: 6.13e-6
[1600/1600]	[L1: 40.0611]	81.7+7.3s

Evaluation:
[my_val x8]	PSNR: 22.08 (Best: 22.45 @epoch 569)
Total time: 3.82s

[Epoch 843]	Learning rate: 6.05e-6
[1600/1600]	[L1: 40.9274]	83.9+6.5s

Evaluation:
[my_val x8]	PSNR: 21.96 (Best: 22.45 @epoch 569)
Total time: 3.63s

[Epoch 844]	Learning rate: 5.98e-6
[1600/1600]	[L1: 40.0548]	83.8+6.8s

Evaluation:
[my_val x8]	PSNR: 21.52 (Best: 22.45 @epoch 569)
Total time: 3.85s

[Epoch 845]	Learning rate: 5.91e-6
[1600/1600]	[L1: 39.2216]	82.1+6.5s

Evaluation:
[my_val x8]	PSNR: 22.13 (Best: 22.45 @epoch 569)
Total time: 3.83s

[Epoch 846]	Learning rate: 5.83e-6
[1600/1600]	[L1: 39.3291]	82.6+6.8s

Evaluation:
[my_val x8]	PSNR: 22.02 (Best: 22.45 @epoch 569)
Total time: 3.97s

[Epoch 847]	Learning rate: 5.76e-6
[1600/1600]	[L1: 39.9499]	82.9+6.9s

Evaluation:
[my_val x8]	PSNR: 22.00 (Best: 22.45 @epoch 569)
Total time: 3.84s

[Epoch 848]	Learning rate: 5.69e-6
[1600/1600]	[L1: 39.8276]	83.3+7.1s

Evaluation:
[my_val x8]	PSNR: 21.85 (Best: 22.45 @epoch 569)
Total time: 3.76s

[Epoch 849]	Learning rate: 5.62e-6
[1600/1600]	[L1: 40.4269]	82.1+6.7s

Evaluation:
[my_val x8]	PSNR: 21.95 (Best: 22.45 @epoch 569)
Total time: 3.78s

[Epoch 850]	Learning rate: 5.54e-6
[1600/1600]	[L1: 39.4510]	82.2+7.4s

Evaluation:
[my_val x8]	PSNR: 22.12 (Best: 22.45 @epoch 569)
Total time: 3.85s

[Epoch 851]	Learning rate: 5.47e-6
[1600/1600]	[L1: 39.0780]	82.2+6.9s

Evaluation:
[my_val x8]	PSNR: 22.12 (Best: 22.45 @epoch 569)
Total time: 3.77s

[Epoch 852]	Learning rate: 5.40e-6
[1600/1600]	[L1: 39.6769]	83.4+7.0s

Evaluation:
[my_val x8]	PSNR: 22.16 (Best: 22.45 @epoch 569)
Total time: 3.77s

[Epoch 853]	Learning rate: 5.33e-6
[1600/1600]	[L1: 39.9189]	83.3+7.8s

Evaluation:
[my_val x8]	PSNR: 21.43 (Best: 22.45 @epoch 569)
Total time: 3.76s

[Epoch 854]	Learning rate: 5.26e-6
[1600/1600]	[L1: 40.6220]	83.3+6.1s

Evaluation:
[my_val x8]	PSNR: 22.05 (Best: 22.45 @epoch 569)
Total time: 3.69s

[Epoch 855]	Learning rate: 5.19e-6
[1600/1600]	[L1: 39.3203]	81.6+7.3s

Evaluation:
[my_val x8]	PSNR: 21.49 (Best: 22.45 @epoch 569)
Total time: 3.73s

[Epoch 856]	Learning rate: 5.13e-6
[1600/1600]	[L1: 40.1217]	82.9+6.5s

Evaluation:
[my_val x8]	PSNR: 21.44 (Best: 22.45 @epoch 569)
Total time: 3.84s

[Epoch 857]	Learning rate: 5.06e-6
[1600/1600]	[L1: 40.5086]	83.4+7.6s

Evaluation:
[my_val x8]	PSNR: 22.14 (Best: 22.45 @epoch 569)
Total time: 3.94s

[Epoch 858]	Learning rate: 4.99e-6
[1600/1600]	[L1: 39.3966]	82.7+6.8s

Evaluation:
[my_val x8]	PSNR: 22.23 (Best: 22.45 @epoch 569)
Total time: 3.79s

[Epoch 859]	Learning rate: 4.92e-6
[1600/1600]	[L1: 40.0970]	82.6+6.8s

Evaluation:
[my_val x8]	PSNR: 22.28 (Best: 22.45 @epoch 569)
Total time: 3.80s

[Epoch 860]	Learning rate: 4.85e-6
[1600/1600]	[L1: 39.9029]	81.8+6.5s

Evaluation:
[my_val x8]	PSNR: 21.32 (Best: 22.45 @epoch 569)
Total time: 3.76s

[Epoch 861]	Learning rate: 4.79e-6
[1600/1600]	[L1: 40.5130]	81.9+6.7s

Evaluation:
[my_val x8]	PSNR: 22.07 (Best: 22.45 @epoch 569)
Total time: 3.84s

[Epoch 862]	Learning rate: 4.72e-6
[1600/1600]	[L1: 39.8914]	82.8+6.8s

Evaluation:
[my_val x8]	PSNR: 22.14 (Best: 22.45 @epoch 569)
Total time: 3.72s

[Epoch 863]	Learning rate: 4.66e-6
[1600/1600]	[L1: 39.4353]	82.2+6.7s

Evaluation:
[my_val x8]	PSNR: 22.12 (Best: 22.45 @epoch 569)
Total time: 3.76s

[Epoch 864]	Learning rate: 4.59e-6
[1600/1600]	[L1: 39.9212]	82.8+7.1s

Evaluation:
[my_val x8]	PSNR: 22.04 (Best: 22.45 @epoch 569)
Total time: 3.70s

[Epoch 865]	Learning rate: 4.53e-6
[1600/1600]	[L1: 39.9553]	81.9+6.4s

Evaluation:
[my_val x8]	PSNR: 21.93 (Best: 22.45 @epoch 569)
Total time: 3.85s

[Epoch 866]	Learning rate: 4.46e-6
[1600/1600]	[L1: 39.0508]	82.5+6.7s

Evaluation:
[my_val x8]	PSNR: 22.19 (Best: 22.45 @epoch 569)
Total time: 3.92s

[Epoch 867]	Learning rate: 4.40e-6
[1600/1600]	[L1: 39.7977]	83.5+6.4s

Evaluation:
[my_val x8]	PSNR: 22.15 (Best: 22.45 @epoch 569)
Total time: 3.88s

[Epoch 868]	Learning rate: 4.33e-6
[1600/1600]	[L1: 40.0574]	82.5+7.1s

Evaluation:
[my_val x8]	PSNR: 22.04 (Best: 22.45 @epoch 569)
Total time: 3.95s

[Epoch 869]	Learning rate: 4.27e-6
[1600/1600]	[L1: 39.9384]	82.8+6.6s

Evaluation:
[my_val x8]	PSNR: 21.22 (Best: 22.45 @epoch 569)
Total time: 3.65s

[Epoch 870]	Learning rate: 4.21e-6
[1600/1600]	[L1: 40.1901]	81.8+6.6s

Evaluation:
[my_val x8]	PSNR: 22.08 (Best: 22.45 @epoch 569)
Total time: 3.77s

[Epoch 871]	Learning rate: 4.15e-6
[1600/1600]	[L1: 39.2274]	81.1+6.6s

Evaluation:
[my_val x8]	PSNR: 22.10 (Best: 22.45 @epoch 569)
Total time: 3.78s

[Epoch 872]	Learning rate: 4.08e-6
[1600/1600]	[L1: 40.5324]	83.3+7.4s

Evaluation:
[my_val x8]	PSNR: 22.20 (Best: 22.45 @epoch 569)
Total time: 3.83s

[Epoch 873]	Learning rate: 4.02e-6
[1600/1600]	[L1: 39.9819]	82.5+6.8s

Evaluation:
[my_val x8]	PSNR: 21.42 (Best: 22.45 @epoch 569)
Total time: 3.77s

[Epoch 874]	Learning rate: 3.96e-6
[1600/1600]	[L1: 40.0289]	82.9+6.8s

Evaluation:
[my_val x8]	PSNR: 21.87 (Best: 22.45 @epoch 569)
Total time: 3.71s

[Epoch 875]	Learning rate: 3.90e-6
[1600/1600]	[L1: 39.8744]	82.5+6.9s

Evaluation:
[my_val x8]	PSNR: 22.10 (Best: 22.45 @epoch 569)
Total time: 3.68s

[Epoch 876]	Learning rate: 3.84e-6
[1600/1600]	[L1: 40.4734]	83.3+6.5s

Evaluation:
[my_val x8]	PSNR: 22.02 (Best: 22.45 @epoch 569)
Total time: 3.82s

[Epoch 877]	Learning rate: 3.78e-6
[1600/1600]	[L1: 39.8359]	84.4+6.7s

Evaluation:
[my_val x8]	PSNR: 22.00 (Best: 22.45 @epoch 569)
Total time: 3.72s

[Epoch 878]	Learning rate: 3.72e-6
[1600/1600]	[L1: 39.7894]	83.5+6.6s

Evaluation:
[my_val x8]	PSNR: 22.15 (Best: 22.45 @epoch 569)
Total time: 3.89s

[Epoch 879]	Learning rate: 3.67e-6
[1600/1600]	[L1: 40.3553]	83.7+6.5s

Evaluation:
[my_val x8]	PSNR: 22.18 (Best: 22.45 @epoch 569)
Total time: 3.83s

[Epoch 880]	Learning rate: 3.61e-6
[1600/1600]	[L1: 40.1134]	82.3+6.7s

Evaluation:
[my_val x8]	PSNR: 22.21 (Best: 22.45 @epoch 569)
Total time: 3.79s

[Epoch 881]	Learning rate: 3.55e-6
[1600/1600]	[L1: 39.9237]	83.9+7.6s

Evaluation:
[my_val x8]	PSNR: 21.50 (Best: 22.45 @epoch 569)
Total time: 3.89s

[Epoch 882]	Learning rate: 3.49e-6
[1600/1600]	[L1: 39.2834]	83.4+7.6s

Evaluation:
[my_val x8]	PSNR: 22.09 (Best: 22.45 @epoch 569)
Total time: 3.73s

[Epoch 883]	Learning rate: 3.44e-6
[1600/1600]	[L1: 39.8496]	82.1+6.1s

Evaluation:
[my_val x8]	PSNR: 22.10 (Best: 22.45 @epoch 569)
Total time: 3.65s

[Epoch 884]	Learning rate: 3.38e-6
[1600/1600]	[L1: 40.0169]	83.7+6.9s

Evaluation:
[my_val x8]	PSNR: 22.15 (Best: 22.45 @epoch 569)
Total time: 3.69s

[Epoch 885]	Learning rate: 3.33e-6
[1600/1600]	[L1: 39.9537]	84.1+6.8s

Evaluation:
[my_val x8]	PSNR: 22.21 (Best: 22.45 @epoch 569)
Total time: 3.77s

[Epoch 886]	Learning rate: 3.27e-6
[1600/1600]	[L1: 40.4331]	82.7+6.3s

Evaluation:
[my_val x8]	PSNR: 22.05 (Best: 22.45 @epoch 569)
Total time: 3.78s

[Epoch 887]	Learning rate: 3.22e-6
[1600/1600]	[L1: 39.9160]	83.1+6.4s

Evaluation:
[my_val x8]	PSNR: 22.14 (Best: 22.45 @epoch 569)
Total time: 3.78s

[Epoch 888]	Learning rate: 3.16e-6
[1600/1600]	[L1: 40.0812]	84.0+6.5s

Evaluation:
[my_val x8]	PSNR: 22.20 (Best: 22.45 @epoch 569)
Total time: 3.83s

[Epoch 889]	Learning rate: 3.11e-6
[1600/1600]	[L1: 39.6099]	82.2+6.5s

Evaluation:
[my_val x8]	PSNR: 22.05 (Best: 22.45 @epoch 569)
Total time: 3.75s

[Epoch 890]	Learning rate: 3.05e-6
[1600/1600]	[L1: 39.3731]	82.4+6.3s

Evaluation:
[my_val x8]	PSNR: 22.24 (Best: 22.45 @epoch 569)
Total time: 3.68s

[Epoch 891]	Learning rate: 3.00e-6
[1600/1600]	[L1: 39.3817]	82.7+6.5s

Evaluation:
[my_val x8]	PSNR: 22.19 (Best: 22.45 @epoch 569)
Total time: 3.81s

[Epoch 892]	Learning rate: 2.95e-6
[1600/1600]	[L1: 39.4704]	82.4+6.7s

Evaluation:
[my_val x8]	PSNR: 22.18 (Best: 22.45 @epoch 569)
Total time: 3.82s

[Epoch 893]	Learning rate: 2.90e-6
[1600/1600]	[L1: 39.4948]	83.0+6.9s

Evaluation:
[my_val x8]	PSNR: 22.16 (Best: 22.45 @epoch 569)
Total time: 3.80s

[Epoch 894]	Learning rate: 2.84e-6
[1600/1600]	[L1: 40.0538]	82.1+7.3s

Evaluation:
[my_val x8]	PSNR: 22.10 (Best: 22.45 @epoch 569)
Total time: 3.80s

[Epoch 895]	Learning rate: 2.79e-6
[1600/1600]	[L1: 39.7383]	83.2+6.3s

Evaluation:
[my_val x8]	PSNR: 22.14 (Best: 22.45 @epoch 569)
Total time: 3.85s

[Epoch 896]	Learning rate: 2.74e-6
[1600/1600]	[L1: 39.7785]	82.1+6.3s

Evaluation:
[my_val x8]	PSNR: 22.20 (Best: 22.45 @epoch 569)
Total time: 3.76s

[Epoch 897]	Learning rate: 2.69e-6
[1600/1600]	[L1: 39.5593]	84.4+6.8s

Evaluation:
[my_val x8]	PSNR: 22.18 (Best: 22.45 @epoch 569)
Total time: 3.78s

[Epoch 898]	Learning rate: 2.64e-6
[1600/1600]	[L1: 39.1696]	81.5+7.1s

Evaluation:
[my_val x8]	PSNR: 22.20 (Best: 22.45 @epoch 569)
Total time: 3.80s

[Epoch 899]	Learning rate: 2.59e-6
[1600/1600]	[L1: 38.9263]	83.1+6.8s

Evaluation:
[my_val x8]	PSNR: 22.08 (Best: 22.45 @epoch 569)
Total time: 3.82s

[Epoch 900]	Learning rate: 2.55e-6
[1600/1600]	[L1: 39.0437]	83.1+7.0s

Evaluation:
[my_val x8]	PSNR: 22.20 (Best: 22.45 @epoch 569)
Total time: 3.74s

[Epoch 901]	Learning rate: 2.50e-6
[1600/1600]	[L1: 39.9102]	82.9+6.8s

Evaluation:
[my_val x8]	PSNR: 22.07 (Best: 22.45 @epoch 569)
Total time: 3.81s

[Epoch 902]	Learning rate: 2.45e-6
[1600/1600]	[L1: 39.4951]	83.2+6.6s

Evaluation:
[my_val x8]	PSNR: 22.10 (Best: 22.45 @epoch 569)
Total time: 3.78s

[Epoch 903]	Learning rate: 2.40e-6
[1600/1600]	[L1: 40.0629]	83.7+6.6s

Evaluation:
[my_val x8]	PSNR: 22.13 (Best: 22.45 @epoch 569)
Total time: 3.64s

[Epoch 904]	Learning rate: 2.35e-6
[1600/1600]	[L1: 40.3544]	80.9+7.1s

Evaluation:
[my_val x8]	PSNR: 22.22 (Best: 22.45 @epoch 569)
Total time: 3.89s

[Epoch 905]	Learning rate: 2.31e-6
[1600/1600]	[L1: 39.7008]	81.6+7.3s

Evaluation:
[my_val x8]	PSNR: 22.18 (Best: 22.45 @epoch 569)
Total time: 3.88s

[Epoch 906]	Learning rate: 2.26e-6
[1600/1600]	[L1: 40.0963]	81.4+7.1s

Evaluation:
[my_val x8]	PSNR: 22.17 (Best: 22.45 @epoch 569)
Total time: 3.97s

[Epoch 907]	Learning rate: 2.22e-6
[1600/1600]	[L1: 40.0779]	81.9+6.8s

Evaluation:
[my_val x8]	PSNR: 21.69 (Best: 22.45 @epoch 569)
Total time: 3.69s

[Epoch 908]	Learning rate: 2.17e-6
[1600/1600]	[L1: 40.1388]	81.6+6.7s

Evaluation:
[my_val x8]	PSNR: 22.09 (Best: 22.45 @epoch 569)
Total time: 3.78s

[Epoch 909]	Learning rate: 2.13e-6
[1600/1600]	[L1: 39.5072]	82.9+8.3s

Evaluation:
[my_val x8]	PSNR: 22.00 (Best: 22.45 @epoch 569)
Total time: 3.84s

[Epoch 910]	Learning rate: 2.08e-6
[1600/1600]	[L1: 40.2628]	83.0+6.9s

Evaluation:
[my_val x8]	PSNR: 22.15 (Best: 22.45 @epoch 569)
Total time: 3.83s

[Epoch 911]	Learning rate: 2.04e-6
[1600/1600]	[L1: 39.5434]	84.1+6.6s

Evaluation:
[my_val x8]	PSNR: 22.19 (Best: 22.45 @epoch 569)
Total time: 3.79s

[Epoch 912]	Learning rate: 2.00e-6
[1600/1600]	[L1: 39.7603]	83.5+6.4s

Evaluation:
[my_val x8]	PSNR: 22.17 (Best: 22.45 @epoch 569)
Total time: 3.61s

[Epoch 913]	Learning rate: 1.95e-6
[1600/1600]	[L1: 40.2318]	83.4+7.1s

Evaluation:
[my_val x8]	PSNR: 22.00 (Best: 22.45 @epoch 569)
Total time: 3.72s

[Epoch 914]	Learning rate: 1.91e-6
[1600/1600]	[L1: 39.7418]	82.2+6.7s

Evaluation:
[my_val x8]	PSNR: 22.12 (Best: 22.45 @epoch 569)
Total time: 3.70s

[Epoch 915]	Learning rate: 1.87e-6
[1600/1600]	[L1: 39.5465]	83.0+6.6s

Evaluation:
[my_val x8]	PSNR: 22.17 (Best: 22.45 @epoch 569)
Total time: 3.78s

[Epoch 916]	Learning rate: 1.83e-6
[1600/1600]	[L1: 39.9525]	81.4+6.6s

Evaluation:
[my_val x8]	PSNR: 22.15 (Best: 22.45 @epoch 569)
Total time: 3.90s

[Epoch 917]	Learning rate: 1.79e-6
[1600/1600]	[L1: 39.5961]	82.5+6.8s

Evaluation:
[my_val x8]	PSNR: 22.20 (Best: 22.45 @epoch 569)
Total time: 3.71s

[Epoch 918]	Learning rate: 1.75e-6
[1600/1600]	[L1: 40.3270]	82.7+6.7s

Evaluation:
[my_val x8]	PSNR: 22.03 (Best: 22.45 @epoch 569)
Total time: 3.85s

[Epoch 919]	Learning rate: 1.71e-6
[1600/1600]	[L1: 40.0744]	82.5+6.7s

Evaluation:
[my_val x8]	PSNR: 22.16 (Best: 22.45 @epoch 569)
Total time: 3.83s

[Epoch 920]	Learning rate: 1.67e-6
[1600/1600]	[L1: 39.9892]	81.5+7.3s

Evaluation:
[my_val x8]	PSNR: 22.09 (Best: 22.45 @epoch 569)
Total time: 3.79s

[Epoch 921]	Learning rate: 1.63e-6
[1600/1600]	[L1: 40.3300]	83.6+6.8s

Evaluation:
[my_val x8]	PSNR: 22.19 (Best: 22.45 @epoch 569)
Total time: 3.70s

[Epoch 922]	Learning rate: 1.59e-6
[1600/1600]	[L1: 39.6395]	82.7+6.3s

Evaluation:
[my_val x8]	PSNR: 22.19 (Best: 22.45 @epoch 569)
Total time: 3.70s

[Epoch 923]	Learning rate: 1.55e-6
[1600/1600]	[L1: 39.4267]	82.9+6.8s

Evaluation:
[my_val x8]	PSNR: 22.19 (Best: 22.45 @epoch 569)
Total time: 3.65s

[Epoch 924]	Learning rate: 1.52e-6
[1600/1600]	[L1: 39.4345]	83.6+6.6s

Evaluation:
[my_val x8]	PSNR: 22.19 (Best: 22.45 @epoch 569)
Total time: 3.83s

[Epoch 925]	Learning rate: 1.48e-6
[1600/1600]	[L1: 39.4161]	82.8+7.0s

Evaluation:
[my_val x8]	PSNR: 22.13 (Best: 22.45 @epoch 569)
Total time: 3.77s

[Epoch 926]	Learning rate: 1.44e-6
[1600/1600]	[L1: 39.7295]	81.9+6.2s

Evaluation:
[my_val x8]	PSNR: 22.05 (Best: 22.45 @epoch 569)
Total time: 3.71s

[Epoch 927]	Learning rate: 1.41e-6
[1600/1600]	[L1: 40.2367]	82.5+6.4s

Evaluation:
[my_val x8]	PSNR: 22.21 (Best: 22.45 @epoch 569)
Total time: 3.91s

[Epoch 928]	Learning rate: 1.37e-6
[1600/1600]	[L1: 39.8981]	83.3+6.3s

Evaluation:
[my_val x8]	PSNR: 22.19 (Best: 22.45 @epoch 569)
Total time: 3.87s

[Epoch 929]	Learning rate: 1.34e-6
[1600/1600]	[L1: 39.4423]	82.7+7.4s

Evaluation:
[my_val x8]	PSNR: 22.15 (Best: 22.45 @epoch 569)
Total time: 3.62s

[Epoch 930]	Learning rate: 1.30e-6
[1600/1600]	[L1: 40.5892]	83.0+6.3s

Evaluation:
[my_val x8]	PSNR: 22.13 (Best: 22.45 @epoch 569)
Total time: 3.80s

[Epoch 931]	Learning rate: 1.27e-6
[1600/1600]	[L1: 40.1213]	83.1+6.5s

Evaluation:
[my_val x8]	PSNR: 22.19 (Best: 22.45 @epoch 569)
Total time: 3.82s

[Epoch 932]	Learning rate: 1.24e-6
[1600/1600]	[L1: 39.9161]	83.6+7.1s

Evaluation:
[my_val x8]	PSNR: 21.91 (Best: 22.45 @epoch 569)
Total time: 3.65s

[Epoch 933]	Learning rate: 1.20e-6
[1600/1600]	[L1: 38.9265]	82.7+6.4s

Evaluation:
[my_val x8]	PSNR: 22.00 (Best: 22.45 @epoch 569)
Total time: 3.57s

[Epoch 934]	Learning rate: 1.17e-6
[1600/1600]	[L1: 40.0443]	84.3+6.5s

Evaluation:
[my_val x8]	PSNR: 22.17 (Best: 22.45 @epoch 569)
Total time: 3.68s

[Epoch 935]	Learning rate: 1.14e-6
[1600/1600]	[L1: 38.7658]	82.7+6.8s

Evaluation:
[my_val x8]	PSNR: 22.11 (Best: 22.45 @epoch 569)
Total time: 3.86s

[Epoch 936]	Learning rate: 1.11e-6
[1600/1600]	[L1: 39.5360]	81.5+6.9s

Evaluation:
[my_val x8]	PSNR: 22.06 (Best: 22.45 @epoch 569)
Total time: 3.77s

[Epoch 937]	Learning rate: 1.08e-6
[1600/1600]	[L1: 39.9194]	82.3+7.0s

Evaluation:
[my_val x8]	PSNR: 22.08 (Best: 22.45 @epoch 569)
Total time: 3.74s

[Epoch 938]	Learning rate: 1.05e-6
[1600/1600]	[L1: 39.8660]	83.2+6.4s

Evaluation:
[my_val x8]	PSNR: 22.20 (Best: 22.45 @epoch 569)
Total time: 3.80s

[Epoch 939]	Learning rate: 1.01e-6
[1600/1600]	[L1: 40.5486]	83.5+6.6s

Evaluation:
[my_val x8]	PSNR: 22.13 (Best: 22.45 @epoch 569)
Total time: 3.71s

[Epoch 940]	Learning rate: 9.85e-7
[1600/1600]	[L1: 39.7861]	82.1+7.2s

Evaluation:
[my_val x8]	PSNR: 22.14 (Best: 22.45 @epoch 569)
Total time: 3.74s

[Epoch 941]	Learning rate: 9.56e-7
[1600/1600]	[L1: 39.5618]	81.3+7.1s

Evaluation:
[my_val x8]	PSNR: 22.11 (Best: 22.45 @epoch 569)
Total time: 3.83s

[Epoch 942]	Learning rate: 9.27e-7
[1600/1600]	[L1: 39.9654]	82.9+6.5s

Evaluation:
[my_val x8]	PSNR: 22.16 (Best: 22.45 @epoch 569)
Total time: 3.84s

[Epoch 943]	Learning rate: 8.99e-7
[1600/1600]	[L1: 39.9635]	81.2+7.1s

Evaluation:
[my_val x8]	PSNR: 22.13 (Best: 22.45 @epoch 569)
Total time: 3.81s

[Epoch 944]	Learning rate: 8.71e-7
[1600/1600]	[L1: 39.5042]	82.6+7.0s

Evaluation:
[my_val x8]	PSNR: 22.15 (Best: 22.45 @epoch 569)
Total time: 3.61s

[Epoch 945]	Learning rate: 8.44e-7
[1600/1600]	[L1: 39.4904]	82.2+6.7s

Evaluation:
[my_val x8]	PSNR: 22.09 (Best: 22.45 @epoch 569)
Total time: 3.79s

[Epoch 946]	Learning rate: 8.18e-7
[1600/1600]	[L1: 40.5842]	82.8+6.8s

Evaluation:
[my_val x8]	PSNR: 21.82 (Best: 22.45 @epoch 569)
Total time: 3.79s

[Epoch 947]	Learning rate: 7.91e-7
[1600/1600]	[L1: 39.8008]	83.4+6.4s

Evaluation:
[my_val x8]	PSNR: 22.18 (Best: 22.45 @epoch 569)
Total time: 3.82s

[Epoch 948]	Learning rate: 7.66e-7
[1600/1600]	[L1: 40.6430]	84.5+6.8s

Evaluation:
[my_val x8]	PSNR: 22.18 (Best: 22.45 @epoch 569)
Total time: 3.77s

[Epoch 949]	Learning rate: 7.40e-7
[1600/1600]	[L1: 39.6893]	82.3+6.7s

Evaluation:
[my_val x8]	PSNR: 22.12 (Best: 22.45 @epoch 569)
Total time: 3.68s

[Epoch 950]	Learning rate: 7.15e-7
[1600/1600]	[L1: 39.9883]	83.1+6.8s

Evaluation:
[my_val x8]	PSNR: 22.24 (Best: 22.45 @epoch 569)
Total time: 3.90s

[Epoch 951]	Learning rate: 6.91e-7
[1600/1600]	[L1: 39.1242]	82.9+7.0s

Evaluation:
[my_val x8]	PSNR: 22.18 (Best: 22.45 @epoch 569)
Total time: 3.90s

[Epoch 952]	Learning rate: 6.67e-7
[1600/1600]	[L1: 40.0882]	82.7+7.0s

Evaluation:
[my_val x8]	PSNR: 22.06 (Best: 22.45 @epoch 569)
Total time: 3.61s

[Epoch 953]	Learning rate: 6.44e-7
[1600/1600]	[L1: 39.4981]	82.4+6.8s

Evaluation:
[my_val x8]	PSNR: 21.93 (Best: 22.45 @epoch 569)
Total time: 3.77s

[Epoch 954]	Learning rate: 6.21e-7
[1600/1600]	[L1: 40.1339]	83.2+6.7s

Evaluation:
[my_val x8]	PSNR: 22.15 (Best: 22.45 @epoch 569)
Total time: 3.72s

[Epoch 955]	Learning rate: 5.99e-7
[1600/1600]	[L1: 39.7513]	83.7+6.8s

Evaluation:
[my_val x8]	PSNR: 22.17 (Best: 22.45 @epoch 569)
Total time: 3.72s

[Epoch 956]	Learning rate: 5.77e-7
[1600/1600]	[L1: 40.4200]	81.7+6.7s

Evaluation:
[my_val x8]	PSNR: 22.16 (Best: 22.45 @epoch 569)
Total time: 3.83s

[Epoch 957]	Learning rate: 5.56e-7
[1600/1600]	[L1: 39.5906]	83.2+6.6s

Evaluation:
[my_val x8]	PSNR: 22.17 (Best: 22.45 @epoch 569)
Total time: 3.79s

[Epoch 958]	Learning rate: 5.35e-7
[1600/1600]	[L1: 39.7139]	81.4+7.1s

Evaluation:
[my_val x8]	PSNR: 22.12 (Best: 22.45 @epoch 569)
Total time: 3.76s

[Epoch 959]	Learning rate: 5.14e-7
[1600/1600]	[L1: 39.9896]	82.9+6.2s

Evaluation:
[my_val x8]	PSNR: 22.11 (Best: 22.45 @epoch 569)
Total time: 3.81s

[Epoch 960]	Learning rate: 4.94e-7
[1600/1600]	[L1: 40.1363]	82.6+6.5s

Evaluation:
[my_val x8]	PSNR: 22.17 (Best: 22.45 @epoch 569)
Total time: 3.87s

[Epoch 961]	Learning rate: 4.75e-7
[1600/1600]	[L1: 39.6908]	84.0+7.3s

Evaluation:
[my_val x8]	PSNR: 22.16 (Best: 22.45 @epoch 569)
Total time: 3.91s

[Epoch 962]	Learning rate: 4.56e-7
[1600/1600]	[L1: 39.8952]	83.1+7.0s

Evaluation:
[my_val x8]	PSNR: 22.18 (Best: 22.45 @epoch 569)
Total time: 3.93s

[Epoch 963]	Learning rate: 4.38e-7
[1600/1600]	[L1: 39.3215]	82.9+6.4s

Evaluation:
[my_val x8]	PSNR: 22.15 (Best: 22.45 @epoch 569)
Total time: 3.75s

[Epoch 964]	Learning rate: 4.20e-7
[1600/1600]	[L1: 40.1966]	82.0+6.6s

Evaluation:
[my_val x8]	PSNR: 22.16 (Best: 22.45 @epoch 569)
Total time: 3.75s

[Epoch 965]	Learning rate: 4.02e-7
[1600/1600]	[L1: 39.8645]	82.9+7.7s

Evaluation:
[my_val x8]	PSNR: 22.13 (Best: 22.45 @epoch 569)
Total time: 3.71s

[Epoch 966]	Learning rate: 3.85e-7
[1600/1600]	[L1: 40.0899]	82.8+7.2s

Evaluation:
[my_val x8]	PSNR: 22.14 (Best: 22.45 @epoch 569)
Total time: 3.83s

[Epoch 967]	Learning rate: 3.69e-7
[1600/1600]	[L1: 39.8697]	82.7+6.8s

Evaluation:
[my_val x8]	PSNR: 22.15 (Best: 22.45 @epoch 569)
Total time: 3.77s

[Epoch 968]	Learning rate: 3.53e-7
[1600/1600]	[L1: 40.1345]	82.0+6.6s

Evaluation:
[my_val x8]	PSNR: 22.14 (Best: 22.45 @epoch 569)
Total time: 3.71s

[Epoch 969]	Learning rate: 3.37e-7
[1600/1600]	[L1: 40.2549]	82.4+6.7s

Evaluation:
[my_val x8]	PSNR: 22.15 (Best: 22.45 @epoch 569)
Total time: 3.73s

[Epoch 970]	Learning rate: 3.22e-7
[1600/1600]	[L1: 39.6783]	82.8+7.6s

Evaluation:
[my_val x8]	PSNR: 22.13 (Best: 22.45 @epoch 569)
Total time: 3.81s

[Epoch 971]	Learning rate: 3.08e-7
[1600/1600]	[L1: 39.6821]	83.1+6.8s

Evaluation:
[my_val x8]	PSNR: 22.17 (Best: 22.45 @epoch 569)
Total time: 3.88s

[Epoch 972]	Learning rate: 2.94e-7
[1600/1600]	[L1: 39.4457]	82.1+7.2s

Evaluation:
[my_val x8]	PSNR: 22.18 (Best: 22.45 @epoch 569)
Total time: 3.88s

[Epoch 973]	Learning rate: 2.80e-7
[1600/1600]	[L1: 39.7498]	82.2+6.9s

Evaluation:
[my_val x8]	PSNR: 22.16 (Best: 22.45 @epoch 569)
Total time: 3.91s

[Epoch 974]	Learning rate: 2.67e-7
[1600/1600]	[L1: 39.5813]	80.3+6.4s

Evaluation:
[my_val x8]	PSNR: 22.13 (Best: 22.45 @epoch 569)
Total time: 3.80s

[Epoch 975]	Learning rate: 2.54e-7
[1600/1600]	[L1: 39.6225]	83.0+7.2s

Evaluation:
[my_val x8]	PSNR: 22.15 (Best: 22.45 @epoch 569)
Total time: 3.79s

[Epoch 976]	Learning rate: 2.42e-7
[1600/1600]	[L1: 39.7952]	81.6+7.3s

Evaluation:
[my_val x8]	PSNR: 22.15 (Best: 22.45 @epoch 569)
Total time: 3.77s

[Epoch 977]	Learning rate: 2.31e-7
[1600/1600]	[L1: 39.1197]	83.0+7.3s

Evaluation:
[my_val x8]	PSNR: 22.10 (Best: 22.45 @epoch 569)
Total time: 3.82s

[Epoch 978]	Learning rate: 2.20e-7
[1600/1600]	[L1: 40.0413]	84.0+6.9s

Evaluation:
[my_val x8]	PSNR: 22.13 (Best: 22.45 @epoch 569)
Total time: 3.77s

[Epoch 979]	Learning rate: 2.09e-7
[1600/1600]	[L1: 39.6681]	83.0+7.0s

Evaluation:
[my_val x8]	PSNR: 22.13 (Best: 22.45 @epoch 569)
Total time: 3.69s

[Epoch 980]	Learning rate: 1.99e-7
[1600/1600]	[L1: 40.6564]	83.2+6.9s

Evaluation:
[my_val x8]	PSNR: 22.13 (Best: 22.45 @epoch 569)
Total time: 3.83s

[Epoch 981]	Learning rate: 1.89e-7
[1600/1600]	[L1: 39.3618]	83.5+6.3s

Evaluation:
[my_val x8]	PSNR: 22.11 (Best: 22.45 @epoch 569)
Total time: 3.74s

[Epoch 982]	Learning rate: 1.80e-7
[1600/1600]	[L1: 39.5599]	82.2+7.0s

Evaluation:
[my_val x8]	PSNR: 22.13 (Best: 22.45 @epoch 569)
Total time: 3.71s

[Epoch 983]	Learning rate: 1.72e-7
[1600/1600]	[L1: 39.4503]	82.6+6.4s

Evaluation:
[my_val x8]	PSNR: 22.14 (Best: 22.45 @epoch 569)
Total time: 3.91s

[Epoch 984]	Learning rate: 1.64e-7
[1600/1600]	[L1: 40.0192]	81.0+6.6s

Evaluation:
[my_val x8]	PSNR: 22.14 (Best: 22.45 @epoch 569)
Total time: 3.94s

[Epoch 985]	Learning rate: 1.56e-7
[1600/1600]	[L1: 39.9001]	83.2+6.8s

Evaluation:
[my_val x8]	PSNR: 22.15 (Best: 22.45 @epoch 569)
Total time: 3.74s

[Epoch 986]	Learning rate: 1.49e-7
[1600/1600]	[L1: 39.2454]	82.1+6.6s

Evaluation:
[my_val x8]	PSNR: 22.14 (Best: 22.45 @epoch 569)
Total time: 3.83s

[Epoch 987]	Learning rate: 1.42e-7
[1600/1600]	[L1: 39.3912]	83.4+7.0s

Evaluation:
[my_val x8]	PSNR: 22.14 (Best: 22.45 @epoch 569)
Total time: 3.88s

[Epoch 988]	Learning rate: 1.36e-7
[1600/1600]	[L1: 38.9731]	81.6+7.0s

Evaluation:
[my_val x8]	PSNR: 22.14 (Best: 22.45 @epoch 569)
Total time: 3.75s

[Epoch 989]	Learning rate: 1.30e-7
[1600/1600]	[L1: 38.7716]	83.1+6.7s

Evaluation:
[my_val x8]	PSNR: 22.14 (Best: 22.45 @epoch 569)
Total time: 3.76s

[Epoch 990]	Learning rate: 1.25e-7
[1600/1600]	[L1: 39.0720]	83.5+7.0s

Evaluation:
[my_val x8]	PSNR: 22.14 (Best: 22.45 @epoch 569)
Total time: 3.72s

[Epoch 991]	Learning rate: 1.20e-7
[1600/1600]	[L1: 40.0888]	82.2+6.8s

Evaluation:
[my_val x8]	PSNR: 22.14 (Best: 22.45 @epoch 569)
Total time: 3.85s

[Epoch 992]	Learning rate: 1.16e-7
[1600/1600]	[L1: 39.0474]	83.5+7.2s

Evaluation:
[my_val x8]	PSNR: 22.13 (Best: 22.45 @epoch 569)
Total time: 3.74s

[Epoch 993]	Learning rate: 1.12e-7
[1600/1600]	[L1: 40.4290]	83.2+6.8s

Evaluation:
[my_val x8]	PSNR: 22.12 (Best: 22.45 @epoch 569)
Total time: 3.81s

[Epoch 994]	Learning rate: 1.09e-7
[1600/1600]	[L1: 39.6557]	83.3+7.1s

Evaluation:
[my_val x8]	PSNR: 22.12 (Best: 22.45 @epoch 569)
Total time: 3.78s

[Epoch 995]	Learning rate: 1.07e-7
[1600/1600]	[L1: 39.5128]	83.1+7.0s

Evaluation:
[my_val x8]	PSNR: 22.14 (Best: 22.45 @epoch 569)
Total time: 3.78s

[Epoch 996]	Learning rate: 1.04e-7
[1600/1600]	[L1: 40.1368]	79.9+7.3s

Evaluation:
[my_val x8]	PSNR: 22.14 (Best: 22.45 @epoch 569)
Total time: 3.83s

[Epoch 997]	Learning rate: 1.03e-7
[1600/1600]	[L1: 39.5868]	82.2+7.2s

Evaluation:
[my_val x8]	PSNR: 22.14 (Best: 22.45 @epoch 569)
Total time: 3.73s

[Epoch 998]	Learning rate: 1.01e-7
[1600/1600]	[L1: 39.7326]	82.6+6.5s

Evaluation:
[my_val x8]	PSNR: 22.14 (Best: 22.45 @epoch 569)
Total time: 3.71s

[Epoch 999]	Learning rate: 1.00e-7
[1600/1600]	[L1: 40.0668]	83.4+6.6s

Evaluation:
[my_val x8]	PSNR: 22.14 (Best: 22.45 @epoch 569)
Total time: 3.78s

[Epoch 1000]	Learning rate: 1.00e-7
[1600/1600]	[L1: 40.5203]	82.2+7.1s

Evaluation:
[my_val x8]	PSNR: 22.14 (Best: 22.45 @epoch 569)
Total time: 3.80s

